<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/11/02/qt-gui-bian-cheng/"/>
      <url>/2021/11/02/qt-gui-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>@[TOC](QT GUI编程)</p><blockquote><p><font face="微软雅黑" color="#FF0000" size="4">统一声明：</font><br><font color="##00BFFF" size="3">博客转载 声 明 ： </font><font color="gray" size="3"> 本博客部分内容来源于网络、书籍、及各类手册。<br>        内容宗旨为方便查询、总结备份、开源分享。<br>        部分转载内容均有注明出处，如有侵权请联系博客告知并删除，谢谢！</font><br><font color="##00BFFF" size="3">百度云盘提取码：</font><font color="gray" size="3">统一提取码：    <code>ziyu</code></font></p></blockquote><h1 id="一、QT基础"><a href="#一、QT基础" class="headerlink" title="一、QT基础"></a>一、QT基础</h1><h2 id="1-1、QT简介"><a href="#1-1、QT简介" class="headerlink" title="1.1、QT简介"></a>1.1、QT简介</h2><p><strong>1.1.1.    什么是QT</strong></p><ul><li>一堆C++/python类库（GUI类，network，。。。。。。）</li><li>免费开源</li></ul><p><strong>1.1.2、QT特点：</strong></p><ul><li>优良的跨平台特性：<br>Qt支持下列操作系统: Windows、 Linux、 Solaris、Sun0sS、 FreebSD、BSD/S、SCO、AIX、0S390、QNX、 android等等</li><li>面向对象</li><li>QT的良好封装机制使得Qt的模块化程度非常高,可重用性较</li><li>丰富的API<br>Qt包括多达500个以上的C++</li><li>大量的开发文档<br>Network/XML/Open GL/Database/webkit/<h2 id="1-2、QT应用范围"><a href="#1-2、QT应用范围" class="headerlink" title="1.2、QT应用范围"></a>1.2、QT应用范围</h2>KDE<br>ava<br>Google earth<br>0pera浏览器<br>Skype网络电话<br>QCad<br>Adobe Photoshop Album<br>CGAL计算几何库<br>…</li></ul><blockquote><p>下面展示qt部分应用领域，转至博主<a href="https://qtchina.blog.csdn.net/">feiyangqingyun</a>，如有侵权，请联系博主删除，谢谢！</p></blockquote><p>==雷达模拟仿真工具==<br><img src="https://img-blog.csdnimg.cn/59fabab5bebc4786b098b1f783d21e3c.gif"><br><img src="https://img-blog.csdnimg.cn/317d5c4c97bc4a57a4d0f5c72055c098.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/62f9f150c1ac48beab090a3543ea16b2.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/e8d1be36ebc94baa8a36bed9f82d8c9f.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/be7c8050bc8f4b6da25f788da6aa9b2b.gif" alt="请添加图片描述"><br>==数字化工厂信息==<br><img src="https://img-blog.csdnimg.cn/566b8a6bcf9e435aa124f84821ee41de.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/db74c4b03fcc46c28b8fc64f36c369bf.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/a82ec8ab63564aaf864e2119da1bd251.gif" alt="请添加图片描述"><br>==视频监控系统==<br><img src="https://img-blog.csdnimg.cn/ce2ec811daa8493b9d8962c5dd8816b2.gif" alt="请添加图片描述"><br>==人脸识别综合应用(在线+离线+嵌入式)==<br><img src="https://img-blog.csdnimg.cn/4ecf45daa6a944839f2e3829609c145b.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/fa732a0e594d4073b1efddfe3c01d2d7.gif" alt="请添加图片描述"><br>==地图综合应用==<br><img src="https://img-blog.csdnimg.cn/af331d418e2d4407b0896cfbdbad58b6.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/bc0cb9da6cfa448c82cee61c03c523a0.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/64bac7f38ae3417a947b3f7bbd051017.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/2c75c047fed8447ead4e767f5c2e08a0.gif" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/d03ddb78e9254d7898b387bafab286d3.gif" alt="请添加图片描述"><br>==气体安全管理系统==<br><img src="https://img-blog.csdnimg.cn/88b56c600f594bb8af5551d111cc3c2c.gif" alt="请添加图片描述"><br>==Onvif搜索和云台控制工具==<br><img src="https://img-blog.csdnimg.cn/9b3243e3a632469e8dbfa76e5e4f24f8.gif" alt="请添加图片描述"><br>==。。。==</p><h2 id="1-3、开发环境"><a href="#1-3、开发环境" class="headerlink" title="1.3、开发环境"></a>1.3、开发环境</h2><ul><li>可视化工具: Qt Designer、 Qt Assistant.、 Qt Linguist、 Qt Creator</li><li>命令行程序: update、 release、 qmake、uic、moc</li><li>Qt SDK开发包</li><li>Qvfd</li></ul><h2 id="1-4、QT软件下载安装教程"><a href="#1-4、QT软件下载安装教程" class="headerlink" title="1.4、QT软件下载安装教程"></a>1.4、QT软件下载安装教程</h2><p><strong>1.4.1、QT软件下载</strong></p><blockquote><p>QT版本官方下载地址：<a href="https://download.qt.io/archive/qt/"> http://download.qt.io/archive/qt/</a><br>百度云盘分享下载链接： <a href="https://pan.baidu.com/s/1T-csDlc0B_C4EY7BYP-3mA">https://pan.baidu.com/s/1T-csDlc0B_C4EY7BYP-3mA </a>        提取码：zllk<br>阿里云盘分享下载链接： <a href="https://www.aliyundrive.com/s/F8Zw2Qdf6yK">https://www.aliyundrive.com/s/F8Zw2Qdf6yK</a></p></blockquote><p><strong>1.4.2、QT软件安装</strong></p><blockquote><p>安装Linux-windows版本可参考链接：<a href="https://blog.csdn.net/qq_23473839/article/details/80523318">https://blog.csdn.net/qq_23473839/article/details/80523318​</a></p></blockquote><p> ==- 详细windows版本安装教程如下：==<br><img src="https://img-blog.csdnimg.cn/a6c94158dfa84bf0a1bbef01435174cb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b688a54a4f6b4a96a1d4589ef28935e0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ec9fa523ea164869a1f7e15659f7264f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/334d7135647b4986a5ef9c6398227693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d8d43240be904a51aace2c7611ba34db.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b3937a3f6e0f45c1aace1970d605ed1d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4bae853df77940489105d158525c7124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d92fa7783bf44cadaa5726184e933cf1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bb934671fdb4446282b8f49f584fbdc1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9d8b54262c244795b7e6f650f7aa63b7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4fc58b0b508b4cfc83e84ad6fc0ed654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/216b1b3320f74f25a85d9e5e317dca60.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/abb8ac8bf6a54507af1d2eb69cad618c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>QT软件安装完毕！</p><h2 id="1-5、QT内存管理"><a href="#1-5、QT内存管理" class="headerlink" title="1.5、QT内存管理"></a>1.5、QT内存管理</h2><p><strong>1.5.1、使用new和 delete时,内存在堆中分配。</strong><br>堆内存空间必须通过 delete完全释放,以防止内存泄漏。只要不 delete,分配在堆上的对象可以一直存活下去。<br>栈是系统自动分配管理的,局部变量就是来自于栈区,只要超出了作用域的栈区数据就会被自动回收。<br><img src="https://img-blog.csdnimg.cn/efbee010b0584e3e8a5ae64dda3072b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-6、第一个QT程序"><a href="#1-6、第一个QT程序" class="headerlink" title="1.6、第一个QT程序"></a>1.6、第一个QT程序</h2><p><strong>1.6.1、创建工程</strong><br><img src="https://img-blog.csdnimg.cn/fa91ffcd80bc47318aaf0a6e4ff845b9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6ba99cef14e24d0fb9dc664e0eaba216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/921cea81069248aba736c38dde520def.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a60b53b4175347e2a32b3ffe3b5432fe.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==三种基础模板（QWidget/ QDialog/ QMainWindow）==</p><blockquote><p>三种基础模板区别可参考链接：<a href="https://www.pianshen.com/article/20181654761/">https://www.pianshen.com/article/20181654761/</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/7dda7be9c870432ba6669269c0958004.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/10afb190be234acc82b0e292b40a327c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c2499d6d7b054d258e82450c628ffbf3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/af13857b35eb4b91bbd31c797a10ed30.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>工程创建完毕！<br><strong>1.6.2、第一个程序</strong><br><img src="https://img-blog.csdnimg.cn/da987b7c21bc4ec19c0afb404232fdcc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span>  </span><span class="token comment" spellcheck="true">//调用按钮头文件</span><span class="token comment" spellcheck="true">/*选择组合*/</span>QPushButton <span class="token operator">*</span>bt<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//这里构造一个指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可参考设置RGB颜色对照表：<a href="https://bj.96weixin.com/tools/rgb">https://bj.96weixin.com/tools/rgb</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/0a3e25eba444465b981cc7130173d53c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//设置页面</span>bt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//构造一个按钮对象</span>bt<span class="token operator">-</span><span class="token operator">></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置按钮坐标</span><span class="token comment" spellcheck="true">//bt->setStyleSheet("QPushButton{color:blue;};");               //设置风格；设置字体颜色蓝色</span><span class="token comment" spellcheck="true">//bt->setStyleSheet("QPushButton{background-color:blue;};");    //设置风格；设置登录框背景显示蓝色</span>bt<span class="token operator">-</span><span class="token operator">></span><span class="token function">setStyleSheet</span><span class="token punctuation">(</span><span class="token string">"QPushButton{background-color:#63B8FF;};"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//设置风格；设置登录可以根据颜色码表设置颜色蓝色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第一个程序示例代码链接：<br>是==untitled1==文件夹：<a href="https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ">https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ </a><br>提取码：u4uy</p></blockquote><h2 id="1-7、打印跟踪"><a href="#1-7、打印跟踪" class="headerlink" title="1.7、打印跟踪"></a>1.7、打印跟踪</h2><p><img src="https://img-blog.csdnimg.cn/a550e5da325c4098bde4d5c5a90a1528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/da751b3f924445ee95cb06ff61512239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-8、QT工程示例"><a href="#1-8、QT工程示例" class="headerlink" title="1.8、QT工程示例"></a>1.8、QT工程示例</h2><p><strong>1.8.1、基础模板（QWidget/QDialog/QMainWindow）<br>1.8.2、流程1.申明界面上的元素；2.构造所需的控件；3.排版；4.前后台挂接<br>1.8.3、细节：</strong><br>(1)    排版</p><ul><li>垂直QVBoxLayout</li><li>水平QHBoxLayout</li><li>网格（二维数组）QGridLayout</li></ul><p>(2)    信号与槽</p><ul><li>public slots: 申明槽函数</li><li>Connect(发信号的对象， 信号， 接收信号的对象， 槽函数);</li></ul><p><strong>编程示例1：</strong><br>==显示对话框==<br><img src="https://img-blog.csdnimg.cn/ae0ce42439bc4d398f3a595d662b8bf9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span>  </span><span class="token comment" spellcheck="true">//调用按钮头文件</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLineEdit></span>    </span><span class="token comment" spellcheck="true">//行编辑器</span><span class="token comment" spellcheck="true">/*选择组合*/</span>QPushButton <span class="token operator">*</span>bt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里构造一个指针</span>QLineEdit <span class="token operator">*</span>le<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//行编辑器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/91c182fbca654736bf707127d599c860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QVBoxLayout"</span>  </span><span class="token comment" spellcheck="true">//排版的垂直类</span><span class="token comment" spellcheck="true">//1. 在堆区真正的将对象申请出来</span>bt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//构造一个按钮对象</span>le <span class="token operator">=</span> <span class="token keyword">new</span> QLineEdit<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//构造一个对话框</span><span class="token comment" spellcheck="true">//2. 做必要的排版</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//垂直布局</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>le<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//行编辑框</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//按钮</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//显示当前主界面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>编程示例1-2代码链接：<br>在==untitled2==文件夹：<a href="https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ">https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ </a><br>提取码：u4uy</p></blockquote><p><strong>编程示例2：</strong><br>==读：点击按钮电脑自动播报语音==<br><img src="https://img-blog.csdnimg.cn/a6d98b64f08049beb21c8de7de2e3943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span>      </span><span class="token comment" spellcheck="true">//调用按钮头文件</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLineEdit></span>        </span><span class="token comment" spellcheck="true">//行编辑器</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span>           </span><span class="token comment" spellcheck="true">//打印跟踪</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextToSpeech></span>    </span><span class="token comment" spellcheck="true">//说话的类；需要在pro加入语言转换类：texttospeech</span><span class="token comment" spellcheck="true">/*读*/</span><span class="token keyword">public</span> slots<span class="token operator">:</span> <span class="token comment" spellcheck="true">//申明此函数为槽函数（能被信号激发）；QT c++语法</span><span class="token keyword">void</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">-</span><span class="token operator">></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//说话的类，语言输出你好</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"xxxxxxxxxxxx"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//显示打印xxxxxxxxxxxx</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*选择组合*/</span>QPushButton <span class="token operator">*</span>bt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里构造一个指针</span>QLineEdit <span class="token operator">*</span>le<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//行编辑器</span>QTextToSpeech <span class="token operator">*</span>x<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//说话的类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/fafdc9fd16e74f01a5ccb5c73dd23aca.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QT       <span class="token operator">+</span><span class="token operator">=</span> core gui texttospeech<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/6ec217bed93b47e485ed19018a4763be.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QVBoxLayout"</span>  </span><span class="token comment" spellcheck="true">//排版的垂直类</span><span class="token comment" spellcheck="true">//1. 在堆区真正的将对象申请出来</span>bt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"读"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//构造一个按钮对象</span>le <span class="token operator">=</span> <span class="token keyword">new</span> QLineEdit<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//构造一个对话框</span> x <span class="token operator">=</span> <span class="token keyword">new</span> QTextToSpeech<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//构造一个说话的类</span><span class="token comment" spellcheck="true">//2. 做必要的排版</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//垂直布局</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>le<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//行编辑框</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//按钮</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//显示当前主界面</span><span class="token comment" spellcheck="true">//3. 前后台挂接（连接信号与曹）</span><span class="token function">connect</span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//按钮连接的信号；如果按钮按下了那么下面xxx应该点击执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f5cac1bb943e4949bdfb1a0459d3ba43.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">x<span class="token operator">-</span><span class="token operator">></span><span class="token function">say</span><span class="token punctuation">(</span>le<span class="token operator">-</span><span class="token operator">></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//说话的类，编辑框中的文字</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>编程示例1-2代码链接：<br>在==untitled2==文件夹：<a href="https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ">https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ  ​</a><br>提取码：u4uy </p></blockquote><p><strong>编程示例3：</strong><br>==水平布局 || 网格状布局==<br><img src="https://img-blog.csdnimg.cn/345440b4fc2f4d2b91c25320a9cd0a15.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QHBoxLayout></span>  </span><span class="token comment" spellcheck="true">//排版 水平布局</span>QHBoxLayout <span class="token operator">*</span>hbox <span class="token operator">=</span> <span class="token keyword">new</span> QHBoxLayout<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//水平布局</span>hbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>le<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//行编辑框</span>hbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//按钮</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLayout</span><span class="token punctuation">(</span>hbox<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//显示当前主界面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/982cf438d57a420a908b56715904c7bf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QGridLayout></span>  </span><span class="token comment" spellcheck="true">//排版 网格状布局</span>QGridLayout <span class="token operator">*</span>gbox <span class="token operator">=</span> <span class="token keyword">new</span> QGridLayout<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//网格状布局</span>gbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>le<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//行编辑框</span>gbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//按钮</span><span class="token function">setLayout</span><span class="token punctuation">(</span>gbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>编程示例3代码链接：<br>在==untitled3==文件夹：<a href="https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ">https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ  ​</a><br>提取码：u4uy </p></blockquote><p><strong>==编程示：多个按钮控制==</strong><br><img src="https://img-blog.csdnimg.cn/6128310796f14dd2864853ac50449d62.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/4611ca875e194cc4be2892852483b1e7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3612f478fc5b4630a52453c64a6bfaea.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d8026b8b9fb84ad4b2d2c9ef23974b95.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//提取发信号的对象</span>QPushButton <span class="token operator">*</span>xbt <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>QPushButton <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>xbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>编程示例：多个按钮控制链接：<br>在==untitled3==文件夹：<a href="https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ">https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ  ​</a><br>提取码：u4uy </p></blockquote><h2 id="1-9、QT-图形编程"><a href="#1-9、QT-图形编程" class="headerlink" title="1.9、QT 图形编程"></a>1.9、QT 图形编程</h2><p><strong>==1.9.1、建立工程：==</strong><br><img src="https://img-blog.csdnimg.cn/c209eb974d654c9d8dfd2fc7bf831c1a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d9fcdb59519f413e8c0622a5038b38dc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/78a215c0021645e4b1b31bcc73cfeea7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8ee6872238264818a3bbc4f3ce302401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/62c6568860be46f0ba1251d636ebec1d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/73a0c7c55f744a2884a5c210b8ce2383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/43de0c7304374fc4867c15ce90e19926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>==1.9.2、工程实现：==</strong><br><img src="https://img-blog.csdnimg.cn/eecca16c03214a7ab8fe28e95eeb6fe1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0714f32748a742878313cd69dd2f01d6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e06f27812be5486cb959e703f9fcc490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QT       <span class="token operator">+</span><span class="token operator">=</span> core gui texttospeech<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/eade572ff55c4fb0bad77ef01c026aaf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextToSpeech></span>    </span><span class="token comment" spellcheck="true">//说话的类；需要在pro加入语言转换类：texttospeech</span>QTextToSpeech <span class="token operator">*</span>x<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//说话的类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/b0a010d3c9574a729b8d08d2bc2250c1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">x <span class="token operator">=</span> <span class="token keyword">new</span> QTextToSpeech<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//构造一个说话的类</span>x<span class="token operator">-</span><span class="token operator">></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"吃饭了嘛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//说出一句话</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/3f830197e94944779fb7417931d9a4a1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6e10a3cce38e48eaa7615e8d1a6b0128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">x<span class="token operator">-</span><span class="token operator">></span><span class="token function">say</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>lineEdit<span class="token operator">-</span><span class="token operator">></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//提取框中文字语音播报</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/fe28f53bb0924babbfab3e57a87f095f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>QT图形编程示例代码链接：<br>在==untitled4==文件夹：<a href="https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ">https://pan.baidu.com/s/1_sonChu0NyJhtJkmEsRSKQ  ​</a><br>提取码：u4uy </p></blockquote><h2 id="1-10、信号与槽"><a href="#1-10、信号与槽" class="headerlink" title="1.10、信号与槽"></a>1.10、信号与槽</h2><p><strong>1.10.1、信号与槽</strong></p><ul><li>信号和槽机制是Qt的一个主要特征,是Qt与其它工具包最不相同的部分</li><li>回调( callback)是一个函数指针,当一个事件发生时被调用,任何函数都可以被安排作为回调</li><li>信号和槽的方式更加动态</li><li>Qt采用信号和槽实现对象部件之间的通信。</li></ul><p><strong>1.10.2、信号与槽：信号</strong></p><ul><li>当信号被发射时,QT代码将回调与其相连接的槽函数</li><li>信号将由元对象处理moc自动翻译成C++代码</li><li>信号的声明不在cpp文件中,而在头文件中</li></ul><p><strong>1.10.3、信号与槽：槽函数</strong></p><ul><li>槽函数是普通的C++成员函数,可以被正常调用</li><li>槽函数可以有返回值,也可以没有</li><li>槽函数的访问权限三种: public slots、 private slots和 protected<br>slots。槽函数的存取权限决定了谁能够与其相关联</li></ul><p><strong>1.10.4、信号与槽：连接</strong><br><img src="https://img-blog.csdnimg.cn/3c6c99613d02490ca94ec8d94bb0f6a7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>1.10.5、信号与槽：发送信号</strong></p><ul><li>signa}-般是在事件处理时候Qt发出,如果需要程序自己触发信号,则使用emit。</li><li>使用语法如下<br>emit signal</li></ul><p><strong>1.10.6、信号与槽：取消连接</strong><br><img src="https://img-blog.csdnimg.cn/ca7e9e35bfa4495dac7c123992ca9824.png" alt="在这里插入图片描述"></p><h2 id="1-11、QT实现心仪的计算器"><a href="#1-11、QT实现心仪的计算器" class="headerlink" title="1.11、QT实现心仪的计算器"></a>1.11、QT实现心仪的计算器</h2><p><strong>示例1:</strong><br><img src="https://img-blog.csdnimg.cn/0aece74e44a542d7824288fa76cafd5f.gif" alt="请添加图片描述"></p><blockquote><p>实现心仪的计算器代码链接：<br>==在实现心仪计算器示例1==文件夹：<a href="https://pan.baidu.com/s/1bFNXYteY4hFqZlTTgdjkrA">https://pan.baidu.com/s/1bFNXYteY4hFqZlTTgdjkrA</a><br>提取码：rmm8</p></blockquote><p><strong>示例2:</strong><br><img src="https://img-blog.csdnimg.cn/926e8d2244c6423ca12ad3d2954c5332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>实现心仪的计算器代码链接：<br>==在实现心仪计算器示例2==文件夹：<a href="https://pan.baidu.com/s/1bFNXYteY4hFqZlTTgdjkrA">https://pan.baidu.com/s/1bFNXYteY4hFqZlTTgdjkrA</a><br>提取码：rmm8</p></blockquote><h2 id="1-12、将QT文件单独提取出来自由使用"><a href="#1-12、将QT文件单独提取出来自由使用" class="headerlink" title="1.12、将QT文件单独提取出来自由使用"></a>1.12、将QT文件单独提取出来自由使用</h2><p><img src="https://img-blog.csdnimg.cn/ef4b0d6217a947e19cd96ec5e525eebc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9dd8ac0353a84a8d8b2045e09782094d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ed599b4508bc4b40bf88ddec80a831e8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a19e13f6150048b5a89f6b79cb06eac5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/afd9e681907e4b68bc7e4fcc2111a480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/22c9b2b1f460445fa8327f50b660fc48.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b48e27e8869947a4940dcd6d4ec9095d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7966713a6dd9468192a392f47990529e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==QT加载库程序 + 自己文件名==</p><pre class="line-numbers language-cpp"><code class="language-cpp">windeployqt<span class="token punctuation">.</span>exe untitled4<span class="token punctuation">.</span>exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f5ae15d0173d4515b4d7610b8ed15526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>由于本方法打包程序文件较大，我们需要的是单独的.exe运行程序，详情见本文末尾    ==8.4、应用程序打包==</p></blockquote><h1 id="二、窗口部件"><a href="#二、窗口部件" class="headerlink" title="二、窗口部件"></a>二、窗口部件</h1><h2 id="2-1、常用类介绍"><a href="#2-1、常用类介绍" class="headerlink" title="2.1、常用类介绍"></a>2.1、常用类介绍</h2><p><img src="https://img-blog.csdnimg.cn/d67d69d7552d4e9da54539a9a167e367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2、对话框（qt组合部件）"><a href="#2-2、对话框（qt组合部件）" class="headerlink" title="2.2、对话框（qt组合部件）"></a>2.2、对话框（qt组合部件）</h2><ul><li>文件对话框( QFile Dialog)</li><li>消息对话框( QMessageBox)</li><li>输入对话框( QInputDialog)</li><li>颜色对话框( QColorDialog)</li><li>字体对话框( QFontDialog)</li></ul><blockquote><p>源码地址==文件名Dialog==链接：<a href="https://pan.baidu.com/s/1NOilm4D4UfOwGQwR9TH0ow">https://pan.baidu.com/s/1NOilm4D4UfOwGQwR9TH0ow</a><br>取件码：9iy1</p></blockquote><p><strong>界面：</strong><br><img src="https://img-blog.csdnimg.cn/b92bd47217964bdfa222de79c73a66d0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QErrorMessage></span></span><span class="token comment" spellcheck="true">//QColorDialog, QErrorMessage, QFileDialog, QFontDialog, QInputDialog, QMessageBox, QProgressDialog</span>QPushButton <span class="token operator">*</span>bt_filename<span class="token punctuation">;</span>QPushButton <span class="token operator">*</span>bt_getcolor<span class="token punctuation">;</span>QPushButton <span class="token operator">*</span>bt_getfont<span class="token punctuation">;</span>QPushButton <span class="token operator">*</span>bt_getinput<span class="token punctuation">;</span>QPushButton <span class="token operator">*</span>bt_message<span class="token punctuation">;</span>QPushButton <span class="token operator">*</span>bt_error<span class="token punctuation">;</span>QPushButton <span class="token operator">*</span>bt_progress<span class="token punctuation">;</span>QTextEdit <span class="token operator">*</span>te_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/e0e7198648e743b0a45450768bf47238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QHBoxLayout></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QColorDialog></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFontDialog></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QInputDialog></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QErrorMessage></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMessageBox></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QProgressDialog></span></span>bt_filename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"获取文件名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_getcolor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"获取颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_getfont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"获取字体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_getinput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"获取输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"错误弹框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"消息弹框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_progress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"进度条对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>te_test <span class="token operator">=</span> <span class="token keyword">new</span> QTextEdit<span class="token punctuation">;</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_filename<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_getcolor<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_getfont<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_getinput<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_error<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_message<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_progress<span class="token punctuation">)</span><span class="token punctuation">;</span>QHBoxLayout <span class="token operator">*</span>hbox <span class="token operator">=</span> <span class="token keyword">new</span> QHBoxLayout<span class="token punctuation">;</span>hbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span>hbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>te_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setLayout</span><span class="token punctuation">(</span>hbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/5131d9445d634f92a2e96efe543ff39c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.2.1、文件对话框( QFileDialog)</strong><br><img src="https://img-blog.csdnimg.cn/2c61c7a082564e19b87e6c4d10b4c34c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/27b5f77b53a8478e9d43eab8f50ce3a7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0a0c62a88af54a5cb4353acc9fb6b82c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f2efe349dc264fb0824273487ce26206.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9bfe80cb3d294b689e06013218a4c3ec.png" alt="指定打开文件格式"></p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">//文件对话框示例</span> <span class="token function">connect</span><span class="token punctuation">(</span>bt_filename<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//提取单个文件名的对话框</span><span class="token comment" spellcheck="true">//        QString filename =  QFileDialog::getOpenFileName();</span><span class="token comment" spellcheck="true">//        te_test->append(filename);</span>     <span class="token comment" spellcheck="true">//提取多个文件名的对话框</span>     QStringList filenames <span class="token operator">=</span> QFileDialog<span class="token operator">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"打开图片"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"Images (*.png *.xpm *.jpg)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>filenames<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         te_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>filenames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/756a9d05bd4146fda2ee76471e513f50.png" alt="在这里插入图片描述"></p><p><strong>2.2.2、颜色对话框( QColor Dialog)</strong><br><img src="https://img-blog.csdnimg.cn/d999cf16b8d547428522de784ce1d65e.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//颜色对话框示例</span>    <span class="token function">connect</span><span class="token punctuation">(</span>bt_getcolor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        QColor color <span class="token operator">=</span> QColorDialog<span class="token operator">::</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        te_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setTextColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/6a416b2869d645898a3d04c4e9955f22.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.2.3、字体对话框( QFontDialog)</strong><br><img src="https://img-blog.csdnimg.cn/3ad979eba8e84e4baa1f0140b7eae5b4.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">//字体对话框示例</span> <span class="token function">connect</span><span class="token punctuation">(</span>bt_getfont<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">bool</span> ok<span class="token punctuation">;</span>     QFont font <span class="token operator">=</span> QFontDialog<span class="token operator">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//用户选择了字体</span>         te_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setCurrentFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/547d6f09178b4806a7dafd1dd98d3a42.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.2.4、输入对话框( QInputDialog)</strong><br><img src="https://img-blog.csdnimg.cn/753116c779074184b30977781a68ef2b.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//输入对话框示例</span><span class="token function">connect</span><span class="token punctuation">(</span>bt_getinput<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QString str <span class="token operator">=</span> QInputDialog<span class="token operator">::</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span> <span class="token string">"yyyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    te_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ca30949651c947508d971716f4d7c50d.png" alt="在这里插入图片描述"><br><strong>2.2.5、消息对话框( QMessageBox)</strong><br><img src="https://img-blog.csdnimg.cn/372eb5a019784dfea447e9ab53b5ce52.png"></p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">//消息弹窗示例</span> <span class="token function">connect</span><span class="token punctuation">(</span>bt_message<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     QMessageBox<span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span> <span class="token string">"yyyyyyy"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Open<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Apply<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/df98493f76ce456893e6876ecaa74f67.png" alt="在这里插入图片描述"><br><strong>2.2.6、错误消息对话框( QErrorMessage)</strong><br><img src="https://img-blog.csdnimg.cn/b829e4aabd824be49cc978e807457b66.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//错误弹窗示例</span><span class="token function">connect</span><span class="token punctuation">(</span>bt_error<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QErrorMessage <span class="token operator">*</span>x<span class="token punctuation">;</span>    x<span class="token operator">-</span><span class="token operator">></span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxxxxxxxxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/250262c48b2545cd98eab9cff8a91290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.2.7、进度条( QProgressDialog)</strong><br><img src="https://img-blog.csdnimg.cn/88e34528606347fa8a79c7b98ea4e771.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//进度条对话框示例</span><span class="token function">connect</span><span class="token punctuation">(</span>bt_progress<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QProgressDialog x<span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c3a819ad84b74fea9dd67511ba8b5392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-3、QT的内置部件"><a href="#2-3、QT的内置部件" class="headerlink" title="2.3、QT的内置部件"></a>2.3、QT的内置部件</h2><p><strong>(1)    排版类</strong><br><strong>(2)    常见按钮</strong><br>//普通按钮<br>    QPushButton *bt_test;<br>    //工具栏按钮<br>    QToolButton *bt_tool;<br>    //单选按钮<br>    QRadioButton *bt_radio1, *bt_radio2;<br>    //复选按钮<br>    QCheckBox *bt_check1, *bt_check2;</p><p><strong>(3)    输出部件</strong><br>//标签（文字提示， 图片显示，动画显示。。。）<br>    QLabel *lb_text;<br>    QLabel *lb_pix;<br>    QLabel *lb_gif;<br>    //文本浏览器（解释html）<br>    QTextBrowser *tb_test;<br>    //日历<br>    QCalendarWidget *cl_test;<br>    //七段数码管<br>    QLCDNumber *lcd_test;<br>    //进度条<br>    QProgressBar *pbr_test;</p><p><strong>(4)    输入部件类</strong><br>//行编辑框<br>    QLineEdit *le_test;<br>    QCheckBox *ck_test;<br>    //组合框<br>    QComboBox *cmb_test;<br>    //字体选择下拉框<br>    QFontComboBox *fcb_test;<br>    //文本编辑框<br>    QTextEdit *te_test;<br>    //自旋框<br>    QSpinBox *sp_test;<br>    QLCDNumber *lcd_test;<br>    //旋钮<br>    QDial *dl_test;<br>    //滚动条<br>    QScrollBar *sbr_test;<br>    //滑动杆儿<br>    QSlider *sd_test;</p><h3 id="2-3-1、排版类"><a href="#2-3-1、排版类" class="headerlink" title="2.3.1、排版类"></a>2.3.1、排版类</h3><p>==水平布局 || 网格状布局==<br><img src="https://img-blog.csdnimg.cn/345440b4fc2f4d2b91c25320a9cd0a15.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QHBoxLayout></span>  </span><span class="token comment" spellcheck="true">//排版 水平布局</span>QHBoxLayout <span class="token operator">*</span>hbox <span class="token operator">=</span> <span class="token keyword">new</span> QHBoxLayout<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//水平布局</span>hbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>le<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//行编辑框</span>hbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//按钮</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLayout</span><span class="token punctuation">(</span>hbox<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//显示当前主界面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/982cf438d57a420a908b56715904c7bf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QGridLayout></span>  </span><span class="token comment" spellcheck="true">//排版 网格状布局</span>QGridLayout <span class="token operator">*</span>gbox <span class="token operator">=</span> <span class="token keyword">new</span> QGridLayout<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//网格状布局</span>gbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>le<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//行编辑框</span>gbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//按钮</span><span class="token function">setLayout</span><span class="token punctuation">(</span>gbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Qt之格栅布局（QGridLayout）参考链接：<a href="https://www.cnblogs.com/ranson7zop/p/7462265.html">https://www.cnblogs.com/ranson7zop/p/7462265.html</a></p></blockquote><h3 id="2-3-2、常见按钮"><a href="#2-3-2、常见按钮" class="headerlink" title="2.3.2、常见按钮"></a>2.3.2、常见按钮</h3><blockquote><p>==实现按钮链接_文件名：buttons==：<a href="https://pan.baidu.com/s/1vDEm5QuXe2R360GXtRWqsg">https://pan.baidu.com/s/1vDEm5QuXe2R360GXtRWqsg</a><br>提取码：14td</p></blockquote><p>==普通按钮==<br><img src="https://img-blog.csdnimg.cn/3a29ae0884ea44159ab887089012d6ab.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7de2a2e8d841497f8a646499e719f306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span></span><span class="token comment" spellcheck="true">//普通按钮</span>QPushButton <span class="token operator">*</span>bt_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a9c934a50d1343f8a48b5f4b7804ee36.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2fec63fd78e149f3b5f1e2c1db1f62e6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b98bc1b29d6c40b4bd55330817e1b82a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>照片放在：==build-output-Desktop_Qt_5_10_1_MinGW_32bit-Debug 路径==，就不需要声明路径了。<br><img src="https://img-blog.csdnimg.cn/feb4cb5f415845848328f475efd04aa3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7515b7b609194a479bcb90c502f62c3b.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span><span class="token comment" spellcheck="true">//普通按钮示例</span>bt_test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setMinimumSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置最小尺寸</span>bt_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFlat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//设置无边框</span>bt_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIconSize</span><span class="token punctuation">(</span><span class="token function">QSize</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置按钮图标大小</span>bt_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">"car.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置按钮图标</span><span class="token comment" spellcheck="true">//垂直布局</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==工具按钮==<br><img src="https://img-blog.csdnimg.cn/fe56d3a861554532a4e5399bc7bf9ad7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f8aa7bb4a46e4c77977ca88394c64f64.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QToolButton></span></span><span class="token comment" spellcheck="true">//工具栏按钮</span>QToolButton <span class="token operator">*</span>bt_tool<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/aae29366db864473b53846dae9821aa7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//工具按钮示例</span>bt_tool <span class="token operator">=</span> <span class="token keyword">new</span> QToolButton<span class="token punctuation">;</span>bt_tool<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">"car.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置按钮图标</span>bt_tool<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>CTRL <span class="token operator">+</span> Qt<span class="token operator">::</span>Key_M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绑定快捷键</span><span class="token comment" spellcheck="true">//垂直布局</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_tool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/30cfbb58a5da49b29de5ddb99edee7d6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/482afd103d11494e8d75020bcf6623f3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>bt_tool<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>CTRL <span class="token operator">+</span> Qt<span class="token operator">::</span>Key_M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绑定快捷键</span><span class="token function">connect</span><span class="token punctuation">(</span>bt_tool<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">textbutton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/6c36fd62250343be85412a782a35fec9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">void</span> <span class="token function">textbutton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/6d182421678d4005993dc34ad37a98f2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">connect</span><span class="token punctuation">(</span>bt_tool<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">textbutton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//槽函数对信号的参数感兴趣</span><span class="token function">connect</span><span class="token punctuation">(</span>bt_check1<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">check_pushed</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">textbutton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"xxxxxxxxxxxxxxxx"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/cb4e6426ee944b6482e0829dadca0707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==单选按钮==<br><img src="https://img-blog.csdnimg.cn/ce055f4a0dfd43d090e496c74c0d0cef.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/1a75988fa18f46308061e29ffbc2352f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QRadioButton></span></span><span class="token comment" spellcheck="true">//单选按钮</span>QRadioButton <span class="token operator">*</span>bt_radio1<span class="token punctuation">,</span> <span class="token operator">*</span>bt_radio2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/eed091650d9541e8a22576c48204ac8e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//单选按钮示例</span>bt_radio2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QRadioButton</span><span class="token punctuation">(</span><span class="token string">"可以左转"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_radio1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QRadioButton</span><span class="token punctuation">(</span><span class="token string">"可以右转"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_check1<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_check2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/32fad9635a524554aa8de1cefb7dd719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==复选按钮==<br><img src="https://img-blog.csdnimg.cn/0c8cbc8392704f00aad9356b5c10599d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/685f6ea90df147df831ec48d42fe7717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCheckBox></span></span><span class="token comment" spellcheck="true">//复选按钮</span>QCheckBox <span class="token operator">*</span>bt_check1<span class="token punctuation">,</span> <span class="token operator">*</span>bt_check2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/cc998da2a68c437e910192fec9496b48.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//多选按钮示例</span>bt_check1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QCheckBox</span><span class="token punctuation">(</span><span class="token string">"显示密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bt_check2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QCheckBox</span><span class="token punctuation">(</span><span class="token string">"自动登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//垂直布局</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_check1<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_check2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/5e415d496b724a81b751fac58fae6ae7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==lamda表达式(无名函数)==<br><img src="https://img-blog.csdnimg.cn/f9bf976f70614c1eafe22573922c8320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">connect</span><span class="token punctuation">(</span>bt_tool<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QToolButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//lamda表达式（无名函数）</span>     <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"yyyyyyyyyyyyyyyyyy"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/5e564efb06c3414b8a875cc0751388c9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==复选按钮-判断点击上还是没点击上==<br><img src="https://img-blog.csdnimg.cn/852a9d5be8ef4b8b820c8924bdfed7fb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">check_pushed</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/930b246a816c44389a0634981f45a63a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//槽函数对信号的参数感兴趣</span><span class="token function">connect</span><span class="token punctuation">(</span>bt_check1<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">check_pushed</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">check_pushed</span><span class="token punctuation">(</span><span class="token keyword">bool</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"mmmmmmmmmmmmmmmmm"</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/256444be0b4d4169b3f923a727d04d16.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-3-3、输入部件类"><a href="#2-3-3、输入部件类" class="headerlink" title="2.3.3、输入部件类"></a>2.3.3、输入部件类</h3><blockquote><p>==实现输入部件类链接_文件名：input==：<a href="https://pan.baidu.com/s/1vDEm5QuXe2R360GXtRWqsg">https://pan.baidu.com/s/1vDEm5QuXe2R360GXtRWqsg</a><br>提取码：14td</p></blockquote><p>==行编辑框==<br><img src="https://img-blog.csdnimg.cn/ae47a9a33f6145d2bb183afe8d5f0b46.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0bab14d2672a4d19a3ca47710084baf5.png" alt="?"><br><img src="https://img-blog.csdnimg.cn/5d5b7944cdc6464ebc50c905c64ae65d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLineEdit></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCheckBox></span></span><span class="token comment" spellcheck="true">//行编辑框</span>QLineEdit <span class="token operator">*</span>le_test<span class="token punctuation">;</span>QCheckBox <span class="token operator">*</span>ck_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/27386b1849844b9bba29e5ea030ec747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span><span class="token comment" spellcheck="true">//行编辑框使用示例</span>le_test <span class="token operator">=</span> <span class="token keyword">new</span> QLineEdit<span class="token punctuation">;</span>ck_test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QCheckBox</span><span class="token punctuation">(</span><span class="token string">"显示密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>le_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setEchoMode</span><span class="token punctuation">(</span>QLineEdit<span class="token operator">::</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ck_test<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QCheckBox<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">bool</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        le_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setEchoMode</span><span class="token punctuation">(</span>x<span class="token operator">?</span>QLineEdit<span class="token operator">::</span>Normal<span class="token operator">:</span>QLineEdit<span class="token operator">::</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//布局</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>le_test<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>ck_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/05657651fa9c4f63a375f73edcb21521.png" alt="在这里插入图片描述"><br>==组合框==<br><img src="https://img-blog.csdnimg.cn/aa551527344642868117bbcaf51fe451.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/18d87e3e17af4a3997f6849b1874b39e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCheckBox></span></span><span class="token comment" spellcheck="true">//组合框</span>QComboBox <span class="token operator">*</span>cmb_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/43ce4033cfc1443e9d44fd3d36e57dab.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token comment" spellcheck="true">//组合框/下拉框使用示例</span>cmb_test <span class="token operator">=</span> <span class="token keyword">new</span> QComboBox<span class="token punctuation">;</span>cmb_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"com1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmb_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"com2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmb_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"com3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>cmb_test<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QComboBox<span class="token operator">::</span>currentTextChanged<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>QString x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1ddc2cab310f4a6fa3e9197726680928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==字体选择框==<br><img src="https://img-blog.csdnimg.cn/fdc8a0a655504740a43d876f958a3879.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/505541021a50426d921dfcae80ec674f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5a5af3239bb640ef87da326b53234b2f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFontComboBox></span></span><span class="token comment" spellcheck="true">//字体选择下拉框 </span>QFontComboBox <span class="token operator">*</span>fcb_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/991635f065d94557a60ad2132f68737b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//文本编辑框（多行输入）使用示例</span>te_test <span class="token operator">=</span> <span class="token keyword">new</span> QTextEdit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字体输入框使用示例</span>fcb_test <span class="token operator">=</span> <span class="token keyword">new</span> QFontComboBox<span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>fcb_test<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QFontComboBox<span class="token operator">::</span>currentFontChanged<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>QFont x<span class="token punctuation">)</span><span class="token punctuation">{</span>    le_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFont</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置字体</span>    <span class="token comment" spellcheck="true">//te_test->setFont(x);          //设置字体</span>    te_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setCurrentFont</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置选中文字的字体</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>te_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/bc158be9bc114428bdf91ba9e05e7b56.png" alt="在这里插入图片描述"></p><p>==文本编辑框==<br><img src="https://img-blog.csdnimg.cn/c08d34aa15d24cdba75f51661f793c68.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e3b36a4b78424a90bfbe1a3f85f4a7bd.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4283aff5ce6b4581885521026756fb37.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token comment" spellcheck="true">//文本编辑框</span>QTextEdit <span class="token operator">*</span>te_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1a1c04c640084ade9faa69b8cb83455f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f4b06521b05c455ea5e8970f83bae1ae.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//文本编辑框（多行输入）使用示例</span>te_test <span class="token operator">=</span> <span class="token keyword">new</span> QTextEdit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字体输入框使用示例</span>fcb_test <span class="token operator">=</span> <span class="token keyword">new</span> QFontComboBox<span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>fcb_test<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QFontComboBox<span class="token operator">::</span>currentFontChanged<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>QFont x<span class="token punctuation">)</span><span class="token punctuation">{</span>    le_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFont</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置字体</span>    <span class="token comment" spellcheck="true">//te_test->setFont(x);          //设置字体</span>    te_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setCurrentFont</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置选中文字的字体</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/db66611a41e148988e29262820200472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==自旋框==<br><img src="https://img-blog.csdnimg.cn/5126625e724444f5b2747fe76132bf6a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/57fca525b9c74ec1bb79b593911f1170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2db94fccacef428abfd743be54be3d03.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSpinBox></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLCDNumber></span></span><span class="token comment" spellcheck="true">//自旋框</span>QSpinBox <span class="token operator">*</span>sp_test<span class="token punctuation">;</span>QLCDNumber <span class="token operator">*</span>lcd_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/681134a4712845dc88ceaed0e5bf858a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">lcd_test <span class="token operator">=</span> <span class="token keyword">new</span> QLCDNumber<span class="token punctuation">;</span>lcd_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setMinimumHeight</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>sp_test<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lcd_test<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>lcd_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/d9f1b6d165ee4155b4f0169611977db5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置范围<br><img src="https://img-blog.csdnimg.cn/ec64d617a92c495cad7fc228780a7337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">sp_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setRange</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置取值范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==旋扭==<br><img src="https://img-blog.csdnimg.cn/04c3f1f9003746db866d7d1ccda1a681.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a11f9f440e994a8ca4c6d3ba684046bc.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b232228522b34ac384b2f222ac7264b9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDial></span></span><span class="token comment" spellcheck="true">//旋钮</span>QDial <span class="token operator">*</span>dl_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/04db18b886a641d49f1ff10afe12df47.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/43480cf539654eb583827c32db96d4e2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//旋钮使用示例</span>dl_test <span class="token operator">=</span> <span class="token keyword">new</span> QDial<span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>dl_test<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lcd_test<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>dl_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0ed00af89ed64cb1b3e94ad130a1a79f.png" alt="在这里插入图片描述"><br>==滚动条==<br><img src="https://img-blog.csdnimg.cn/77ce1669b0d143afb60619918dc434ab.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cddd1e587deb4af0a5f85d17b5f0a575.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7f036062cc15428586a65ca434ad3220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QScrollBar></span></span><span class="token comment" spellcheck="true">//滚动条</span>QScrollBar <span class="token operator">*</span>sbr_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/19f114e46d0b409cb87de49d65520801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/332c8009fc784202b209418fae39fe74.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//滚动条使用示例</span>sbr_test <span class="token operator">=</span> <span class="token keyword">new</span> QScrollBar<span class="token punctuation">;</span>sbr_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//设置水平方向</span><span class="token function">connect</span><span class="token punctuation">(</span>sbr_test<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lcd_test<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>sbr_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/5681f174a4b547f3a78c93651b057959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==滑动杆==<br><img src="https://img-blog.csdnimg.cn/a857b61fb16d4b4bab796ed0eea37de3.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/edc2e286780c475aabcdccb723846272.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a5f45f87eff64df3a6754164944ef0c7.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSlider></span></span><span class="token comment" spellcheck="true">//滑动杆儿</span>QSlider <span class="token operator">*</span>sd_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/263e22628c1a4942a04f329d9ba51749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//滑动杆儿使用示例</span>sd_test <span class="token operator">=</span> <span class="token keyword">new</span> QSlider<span class="token punctuation">;</span>sd_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//设置水平方向</span><span class="token function">connect</span><span class="token punctuation">(</span>sd_test<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lcd_test<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>sd_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/d39f1577866346d0a026770d33b62438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-3-4、输出部件类"><a href="#2-3-4、输出部件类" class="headerlink" title="2.3.4、输出部件类"></a>2.3.4、输出部件类</h3><blockquote><p>==实现输入部件类链接_文件名：output==：<a href="https://pan.baidu.com/s/1vDEm5QuXe2R360GXtRWqsg">https://pan.baidu.com/s/1vDEm5QuXe2R360GXtRWqsg</a><br>提取码：14td</p></blockquote><p>==标签-显示文字-照片==<br><img src="https://img-blog.csdnimg.cn/635c0ad7140345488c20377def120041.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token comment" spellcheck="true">//标签（文字提示， 图片显示，动画显示。。。）</span>QLabel <span class="token operator">*</span>lb_text<span class="token punctuation">;</span>QLabel <span class="token operator">*</span>lb_pix<span class="token punctuation">;</span>QLabel <span class="token operator">*</span>lb_gif<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f4d209f73c944b2a81c1ba64603173e9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//标签显示文字示例</span>lb_text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"我是文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lb_text<span class="token operator">-</span><span class="token operator">></span><span class="token function">setAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignCenter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置对齐方式</span><span class="token comment" spellcheck="true">//标签显示图片示例</span>lb_pix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"我是图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lb_pix<span class="token operator">-</span><span class="token operator">></span><span class="token function">setScaledContents</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置标签自动缩放上面的图片</span>lb_pix<span class="token operator">-</span><span class="token operator">></span><span class="token function">setPixmap</span><span class="token punctuation">(</span><span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//标签显示图片</span>lb_pix<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//布局</span>QVBoxLayout <span class="token operator">*</span>vbox1 <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>lb_text<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>lb_pix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/dc6cc621aa934a838481ebb215290dce.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==标签-显示动画==<br>需要一张gif动图<br><img src="https://img-blog.csdnimg.cn/38537d1b334240faa83a6f2294766c65.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/32342db9a03343a6865901e8e9fa7fc0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMovie></span></span><span class="token comment" spellcheck="true">//标签显示动画示例</span>lb_gif <span class="token operator">=</span> <span class="token keyword">new</span> QLabel<span class="token punctuation">;</span>lb_gif<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lb_gif<span class="token operator">-</span><span class="token operator">></span><span class="token function">setScaledContents</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lb_gif<span class="token operator">-</span><span class="token operator">></span><span class="token function">setAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>QMovie <span class="token operator">*</span>m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMovie</span><span class="token punctuation">(</span><span class="token string">"1.gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标签显示动画</span>lb_gif<span class="token operator">-</span><span class="token operator">></span><span class="token function">setMovie</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vbox1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>lb_gif<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ef15f20e98834648aaee6367b17fea36.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/df6d4f77fc024eadad45c42e71733572.png" alt="在这里插入图片描述"><br>==文本浏览器==<br><img src="https://img-blog.csdnimg.cn/30d18b914cde4d298c391c6d127450db.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ac68a32f3242420e8ee5b191f3e857b3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextBrowser></span></span><span class="token comment" spellcheck="true">//文本浏览器（解释html5）</span>QTextBrowser <span class="token operator">*</span>tb_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/3dd9cf3006d9439fbfa209b926e39b70.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a9ae8c7cd73d43a2aa56e7c4d45f7861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//文本浏览器显示html文本</span>tb_test <span class="token operator">=</span> <span class="token keyword">new</span> QTextBrowser<span class="token punctuation">;</span>tb_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setHtml</span><span class="token punctuation">(</span><span class="token string">"&lt;!DOCTYPE html>\                 &lt;html>\                 &lt;head>\                 &lt;meta charset=\"utf-8\">\                 &lt;title>菜鸟教程(runoob.com)&lt;/title>\                 &lt;/head>\                 &lt;body>\                     &lt;h1>我的第一个标题&lt;/h1>\                     &lt;p>我的第一个段落。&lt;/p>\                 &lt;/body>\                 &lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vbox1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>tb_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/d9468f8623f34119a0233f72446eff40.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/56cc2984aed5410489b6dafa725ebfe2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">lb_pix<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lb_gif<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lb_gif<span class="token operator">-</span><span class="token operator">></span><span class="token function">setScaledContents</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/499128f50d7a47dd80950d4ffa4d9ffa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==图形视图框架==</p><p>==日历==<br><img src="https://img-blog.csdnimg.cn/147e77420b6b41d1a7b0d0a093aff187.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/b4261557eb894b239d62738f9f4a40fd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cdae9ec51cfb40b1a59918963632dd04.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCalendarWidget></span></span><span class="token comment" spellcheck="true">//日历</span>QCalendarWidget <span class="token operator">*</span>cl_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/b54053d791e64e7e83b9dcb418618d52.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">cl_test <span class="token operator">=</span> <span class="token keyword">new</span> QCalendarWidget<span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addwidget</span><span class="token punctuation">(</span>cl_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2f61e0b570304e689279cc01dfaeb374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1046e9b6158f4b778062b77da05ffa56.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7e3b3cf02f434dbabb58c625dd672fee.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDate></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token comment" spellcheck="true">//日历示例</span>cl_test <span class="token operator">=</span> <span class="token keyword">new</span> QCalendarWidget <span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>cl_test<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QCalendarWidget<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>QDate x<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>     lcd_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vbox2<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>cl_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f3e538a1fd68472298bcc94c013633e0.png" alt="在这里插入图片描述"><br>==七段数码管==<br><img src="https://img-blog.csdnimg.cn/94b5bace071241f88b645d6e0a8f4297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/dd2f8bb61d734136ae2054afa1f8841e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLCDNumber></span></span><span class="token comment" spellcheck="true">//七段数码管</span>QLCDNumber <span class="token operator">*</span>lcd_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/dbeb04ed32d4410fb800b6aed4d05615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a12f4946973c458bb87115cdf465e85c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//7段数码管显示示例</span>lcd_test <span class="token operator">=</span> <span class="token keyword">new</span> QLCDNumber<span class="token punctuation">;</span>lcd_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setDigitCount</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lcd_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">setMinimumSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lcd_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日历示例</span>cl_test <span class="token operator">=</span> <span class="token keyword">new</span> QCalendarWidget <span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>cl_test<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QCalendarWidget<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>QDate x<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>     lcd_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1502b11fba5e4efab155eeb406bad8d4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==进度条==<br><img src="https://img-blog.csdnimg.cn/743fda0830e14581a118cfcfbd4bc6e2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7f18437371f74521ba17ad45627f5c13.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ca620256cd584d85b1b9f4f8471845a4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QProgressBar></span></span><span class="token comment" spellcheck="true">//进度条</span>QProgressBar <span class="token operator">*</span>pbr_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/effb1049d2974493b4f17a9514e97a76.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3351cd5231924c4ea84070c0ce8e3b0e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="?"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//进度条示例</span>pbr_test <span class="token operator">=</span> <span class="token keyword">new</span> QProgressBar<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pbr_test->setValue(60);</span>vbox2<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>pbr_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ffb84b2907ec443a8428e5e391447db4.png" alt="在这里插入图片描述"></p><p>==定时器类 QTimer==<br><img src="https://img-blog.csdnimg.cn/7c1554c7322443249a5a5d2e7b1604f9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2ab9417962854824a63f9f4d4e754778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTimer></span>        </span><span class="token comment" spellcheck="true">//定时器</span>QTimer <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token keyword">new</span> QTimer<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//定时器类</span><span class="token function">connect</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTimer<span class="token operator">::</span>timeout<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//捕获定时器timeout信号</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pbr_schedule<span class="token operator">-</span><span class="token operator">></span><span class="token function">setValue</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在进度条上显示一个数据</span>    lcd_time<span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//在7段数码管上显示一个数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//开启定时器（周期性的产生timeout信号）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/00b8092a526d430f975d0d1f38457406.png" alt="在这里插入图片描述"></p><h3 id="2-3-5、QT组合部件"><a href="#2-3-5、QT组合部件" class="headerlink" title="2.3.5、QT组合部件"></a>2.3.5、QT组合部件</h3><p>QColorDialog, QErrorMessage, QFileDialog, QFontDialog, QInputDialog, QMessageBox, QProgressDialog, and QWizard。</p><h3 id="2-3-6、容器类"><a href="#2-3-6、容器类" class="headerlink" title="2.3.6、容器类"></a>2.3.6、容器类</h3><blockquote><p>源码地址==文件名containor== 链接：<a href="https://pan.baidu.com/s/1NOilm4D4UfOwGQwR9TH0ow">https://pan.baidu.com/s/1NOilm4D4UfOwGQwR9TH0ow</a><br>取件码：9iy1</p></blockquote><p>==容器类GroupBox-组合框 ==<br><img src="https://img-blog.csdnimg.cn/5b934173baa64c1ab80b55f7755026ee.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b11ff40d80784ff4a48da68ff2a6cbfe.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QGroupBox></span></span>QGroupBox <span class="token operator">*</span>gb1<span class="token punctuation">;</span>QGroupBox <span class="token operator">*</span>gb2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/d59fe7c38780403c8c48886636bbbd4e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d4a10d6dba2a48089119b5e3ca6dc37b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QRadioButton></span>     </span><span class="token comment" spellcheck="true">//容器</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span>   </span><span class="token comment" spellcheck="true">//排版的垂直类</span><span class="token comment" spellcheck="true">//第一个容器</span>QGroupBox <span class="token operator">*</span>gb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QGroupBox</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Exclusive Radio Buttons"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QRadioButton <span class="token operator">*</span>radio1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QRadioButton</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"&amp;Radio button 1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QRadioButton <span class="token operator">*</span>radio2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QRadioButton</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"R&amp;adio button 2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QRadioButton <span class="token operator">*</span>radio3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QRadioButton</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Ra&amp;dio button 3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>radio1<span class="token operator">-</span><span class="token operator">></span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>radio1<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>radio2<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>radio3<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addStretch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gb1<span class="token operator">-</span><span class="token operator">></span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个容器</span>QGroupBox <span class="token operator">*</span>gb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QGroupBox</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Exclusive Radio Buttons"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QRadioButton <span class="token operator">*</span>radio11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QRadioButton</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"&amp;Radio button 11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QRadioButton <span class="token operator">*</span>radio12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QRadioButton</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"R&amp;adio button 12"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QRadioButton <span class="token operator">*</span>radio13 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QRadioButton</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Ra&amp;dio button 13"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>radio11<span class="token operator">-</span><span class="token operator">></span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QVBoxLayout <span class="token operator">*</span>vbox1 <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>vbox1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>radio11<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>radio12<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>radio13<span class="token punctuation">)</span><span class="token punctuation">;</span>vbox1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addStretch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gb2<span class="token operator">-</span><span class="token operator">></span><span class="token function">setLayout</span><span class="token punctuation">(</span>vbox1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/e62a4c3529484e7b9cee3c511e6df97e.png" alt="在这里插入图片描述"><br>==Scroll Area-滚动窗口容器==<br><img src="https://img-blog.csdnimg.cn/a5fa74cb090a4fac9654ce9b96885447.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QLabel <span class="token operator">*</span>lb_pix<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QScrollArea></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    lb_pix <span class="token operator">=</span> <span class="token keyword">new</span> QLabel<span class="token punctuation">;</span>    lb_pix<span class="token operator">-</span><span class="token operator">></span><span class="token function">setPixmap</span><span class="token punctuation">(</span><span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    lb_pix->setFixedSize(640, 480);</span>    QScrollArea <span class="token operator">*</span>sl <span class="token operator">=</span> <span class="token keyword">new</span> QScrollArea<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//滚动区域容器</span>    sl<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sl<span class="token operator">-</span><span class="token operator">></span><span class="token function">setWidget</span><span class="token punctuation">(</span>lb_pix<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//将其他对象放入此容器</span>    QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>sl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f4728ceeef1145ef91a9ca57c01f2d8a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>==Tool Box-工具箱==<br><img src="https://img-blog.csdnimg.cn/8005f7b8f4354a6dbeafc423b178396b.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>te_test1<span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>te_test2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QToolBox></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    te_test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxxxxxxxxx\nxxxxxxxxxx\nxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    te_test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token string">"yyyyyyyyyyyyy\nyyyyyyyyyy\nyyyyyyyyyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QToolBox <span class="token operator">*</span>tb <span class="token operator">=</span> <span class="token keyword">new</span> QToolBox<span class="token punctuation">;</span>    tb<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span>te_test1<span class="token punctuation">,</span> <span class="token string">"xxxxx1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tb<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span>te_test2<span class="token punctuation">,</span> <span class="token string">"xxxxx2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/71ec7eaaf6ec450489c3f9efff21730b.png" alt="在这里插入图片描述"><br>==TabWidget-选项卡-分页显示==<br><img src="https://img-blog.csdnimg.cn/23cb8f33b9ec471f8403cd6d13c02353.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>te_test1<span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>te_test2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTabWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    te_test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxxxxxxxxx\nxxxxxxxxxx\nxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    te_test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token string">"yyyyyyyyyyyyy\nyyyyyyyyyy\nyyyyyyyyyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTabWidget <span class="token operator">*</span>tb <span class="token operator">=</span> <span class="token keyword">new</span> QTabWidget<span class="token punctuation">;</span>    tb<span class="token operator">-</span><span class="token operator">></span><span class="token function">setTabsClosable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tb<span class="token operator">-</span><span class="token operator">></span><span class="token function">addTab</span><span class="token punctuation">(</span>te_test1<span class="token punctuation">,</span> <span class="token string">"1.c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tb<span class="token operator">-</span><span class="token operator">></span><span class="token function">addTab</span><span class="token punctuation">(</span>te_test2<span class="token punctuation">,</span> <span class="token string">"2.c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>tb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTabWidget<span class="token operator">::</span>tabCloseRequested<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"xxx"</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/9893b062e7f3492893a4539b2e1aa13f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>==QStackedWidget-堆栈窗口类==<br><img src="https://img-blog.csdnimg.cn/65c66e98265b42e7a1bd95c35f77878d.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QComboBox></span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>te_test1<span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>te_test2<span class="token punctuation">;</span>    QComboBox <span class="token operator">*</span>cb_test<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QStackedWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    te_test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxxxxxxxxx\nxxxxxxxxxx\nxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    te_test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token string">"yyyyyyyyyyyyy\nyyyyyyyyyy\nyyyyyyyyyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QStackedWidget <span class="token operator">*</span>tb <span class="token operator">=</span> <span class="token keyword">new</span> QStackedWidget<span class="token punctuation">;</span>    tb<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>te_test1<span class="token punctuation">)</span><span class="token punctuation">;</span>    tb<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>te_test2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cb_test <span class="token operator">=</span> <span class="token keyword">new</span> QComboBox<span class="token punctuation">;</span>    cb_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"1.c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cb_test<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"2.c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>cb_test<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tb<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">setCurrentIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>cb_test<span class="token punctuation">)</span><span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/656e7b6a5fa34271975729e756069a46.png" alt="在这里插入图片描述"><br>==MdiArea-多媒体窗口==<br><img src="https://img-blog.csdnimg.cn/3e0572c1fbea45b3a250a3ee0a5cc402.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>te_test1<span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>te_test2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//widget.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMdiArea></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    te_test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxxxxxxxxx\nxxxxxxxxxx\nxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    te_test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token string">"yyyyyyyyyyyyy\nyyyyyyyyyy\nyyyyyyyyyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QMdiArea <span class="token operator">*</span>mdi <span class="token operator">=</span> <span class="token keyword">new</span> QMdiArea<span class="token punctuation">;</span>    mdi<span class="token operator">-</span><span class="token operator">></span><span class="token function">addSubWindow</span><span class="token punctuation">(</span>te_test1<span class="token punctuation">)</span><span class="token punctuation">;</span>    mdi<span class="token operator">-</span><span class="token operator">></span><span class="token function">addSubWindow</span><span class="token punctuation">(</span>te_test2<span class="token punctuation">)</span><span class="token punctuation">;</span>    QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>mdi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0299c10245664358b79cf87008120728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-3-7、练习-qq登录界面、图片浏览器-抽奖系统、实现串口助手。"><a href="#2-3-7、练习-qq登录界面、图片浏览器-抽奖系统、实现串口助手。" class="headerlink" title="2.3.7、练习-qq登录界面、图片浏览器/抽奖系统、实现串口助手。"></a>2.3.7、练习-qq登录界面、图片浏览器/抽奖系统、实现串口助手。</h3><p><img src="https://img-blog.csdnimg.cn/10c5343f549c409fa7dffd44e6d81856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==图片浏览器/抽奖系统==<br><img src="https://img-blog.csdnimg.cn/c349cfec5038400a89a9eeb0db048e39.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/46c9e628b1584a6a9c87af1aade83b3e.gif" alt="请添加图片描述"></p><blockquote><p>图片浏览器/抽奖系统对应文件：==pix_reader.rar== 链接：<a href="https://pan.baidu.com/s/1X-OROiiBIdhICkIWPc6tFA">https://pan.baidu.com/s/1X-OROiiBIdhICkIWPc6tFA</a><br>提取码：dvp0 </p></blockquote><p><img src="https://img-blog.csdnimg.cn/1cab6f53982b4e3082e8eac080f4886b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-4、实现一个简易的考试系统"><a href="#2-4、实现一个简易的考试系统" class="headerlink" title="2.4、实现一个简易的考试系统"></a>2.4、实现一个简易的考试系统</h2><p><img src="https://img-blog.csdnimg.cn/77f377361e4e4be2bd3f02b78c960e1a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a68ad38683d74bf399ca7108bbc3381c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b5d372ee11a045dd97c77080a870d5a0.gif" alt="请添加图片描述"><br>简易版，界面待优化。</p><blockquote><p>实现一个简易的考试系统代码链接：<a href="https://pan.baidu.com/s/1QAme6p-QHSCmN-e3nuw2rg">https://pan.baidu.com/s/1QAme6p-QHSCmN-e3nuw2rg</a><br>提取码：b2k9</p></blockquote><h1 id="三、主窗口"><a href="#三、主窗口" class="headerlink" title="三、主窗口"></a>三、主窗口</h1><h2 id="3-1、基础窗口部件-QWidget"><a href="#3-1、基础窗口部件-QWidget" class="headerlink" title="3.1、基础窗口部件( QWidget)"></a>3.1、基础窗口部件( QWidget)</h2><ul><li>基础窗口部件主要用于自定义窗<br>QWidge堤提供一个基础窗口,窗口并没有任何图形部件。通过指定图形部件的父对象来把图形部件放上基础窗口,或是通过自动布局工具把图形部件放上基<br>础窗口。<h2 id="3-2、布局管理器"><a href="#3-2、布局管理器" class="headerlink" title="3.2、布局管理器"></a>3.2、布局管理器</h2></li></ul><p><strong>布局管理器主要常用的三个类: QHBoXLayout、 QVBoxLayout、 QGridLayout</strong></p><ul><li>QHBOXLayout:水平布局</li><li>QVBoxLayout:垂直布局</li><li>QGrid Layout:网格布<h2 id="3-3、主窗口-QMain-Window"><a href="#3-3、主窗口-QMain-Window" class="headerlink" title="3.3、主窗口( QMain Window)"></a>3.3、主窗口( QMain Window)</h2>QMain Window类提供了一个典型应用程序的主窗口框架,对于小屏幕设备使用Q图形设计器定义标准 Qwidget模板比使用主窗口类更好一些典型模板包含有菜单栏 QMenuBar,工具栏 TOolbAr和状态栏 STatus Bar。</li></ul><p><strong>3.3.1、创建工程</strong><br><img src="https://img-blog.csdnimg.cn/c66f68b7dfb8428ebad02a060afe01b3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>==QMain Window==示例代码链接：<a href="https://pan.baidu.com/s/1w99gg-lmuxaywJP1byFDTA">https://pan.baidu.com/s/1w99gg-lmuxaywJP1byFDTA</a><br>提取码：7vkv</p></blockquote><h2 id="3-4、菜单"><a href="#3-4、菜单" class="headerlink" title="3.4、菜单"></a>3.4、菜单</h2><p><img src="https://img-blog.csdnimg.cn/f7eb7e950c8d442e8d7c4b3af77eff85.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QAction <span class="token operator">*</span>actopen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actopen<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/open.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actopen<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"Ctrl+O"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QMenu <span class="token operator">*</span>fileMenu <span class="token operator">=</span> <span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"&amp;File"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actnew<span class="token punctuation">)</span><span class="token punctuation">;</span>fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actopen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1eb2370d5d394272ba3f022f84fd75f2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a3ade14e27ff474c9f0aabf365de89f9.png" alt="？"><br><img src="https://img-blog.csdnimg.cn/45e1a01234af40beb168f21e56bcf3ee.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">openfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span><span class="token function">connect</span><span class="token punctuation">(</span>actopen<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">openfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> MainWindow<span class="token operator">::</span><span class="token function">openfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QFileDialog<span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ee83c79bcf1240d89ddc4b4ce9b2863c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="?"><br>==资源文件的添加==<br>先自己创建一个文件夹用于保存照片路径<br><img src="https://img-blog.csdnimg.cn/57fc544df760479091bf73f2f0103430.png" alt="在这里插入图片描述"><br>qt界面 右键 添加新文件<br><img src="https://img-blog.csdnimg.cn/d47302bbb34b49d1a5a55f7f377278a1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8fa54e137c384d5489483db430be604f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/83eb01efb5b046bab4d7dbc5ab4b051d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a6bd52843097441bba5e374ecd87479a.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">actnew<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/new.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==文本编辑器==<br><img src="https://img-blog.csdnimg.cn/455f3137bede4b31969bc69ed6b146da.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QAction <span class="token operator">*</span>actnew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"新建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actnew<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/new.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actnew<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"Ctrl+N"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QAction <span class="token operator">*</span>actopen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actopen<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/open.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actopen<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"Ctrl+O"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QAction <span class="token operator">*</span>actsave <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"保存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actsave<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/save.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actsave<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"Ctrl+S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QAction <span class="token operator">*</span>actsaveas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"另存为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actsaveas<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/saveas.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actsaveas<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"Ctrl+Shift+S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实现文件菜单</span>QMenu <span class="token operator">*</span>fileMenu <span class="token operator">=</span> <span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"&amp;File"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actnew<span class="token punctuation">)</span><span class="token punctuation">;</span>fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actopen<span class="token punctuation">)</span><span class="token punctuation">;</span>fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actsave<span class="token punctuation">)</span><span class="token punctuation">;</span>fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actsaveas<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/5ef40f76b689412d86eb82f411925de8.png" alt="?"><br><img src="https://img-blog.csdnimg.cn/e58bab1c250a4e0a857c2cb748a88675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QAction <span class="token operator">*</span>actcopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"复制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actcopy<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/copy.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actcopy<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"Ctrl+C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QAction <span class="token operator">*</span>actcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"剪切"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actcut<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/cut.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actcut<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"Ctrl+X"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QAction <span class="token operator">*</span>actpaste <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"粘贴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actpaste<span class="token operator">-</span><span class="token operator">></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/img/paste.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actpaste<span class="token operator">-</span><span class="token operator">></span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"Ctrl+V"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QMenu <span class="token operator">*</span>editMenu <span class="token operator">=</span> <span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"&amp;Edit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actcopy<span class="token punctuation">)</span><span class="token punctuation">;</span>editMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actcut<span class="token punctuation">)</span><span class="token punctuation">;</span>editMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actpaste<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0e26e683e6634485bdb79b9544a3671c.png" alt="在这里插入图片描述"></p><h2 id="3-5、工具栏"><a href="#3-5、工具栏" class="headerlink" title="3.5、工具栏"></a>3.5、工具栏</h2><p><img src="https://img-blog.csdnimg.cn/3e6f3849d29344b3950fbfeaa7f64512.png" alt="头文件"><br><img src="https://img-blog.csdnimg.cn/d146141dacfa4e69aa27b737aaa9b8f3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QToolBar></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFontComboBox></span></span><span class="token comment" spellcheck="true">// 添加工具栏</span>QToolBar <span class="token operator">*</span>filetool <span class="token operator">=</span> <span class="token function">addToolBar</span><span class="token punctuation">(</span><span class="token string">"文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filetool<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actnew<span class="token punctuation">)</span><span class="token punctuation">;</span>filetool<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actopen<span class="token punctuation">)</span><span class="token punctuation">;</span>QToolBar <span class="token operator">*</span>edittool <span class="token operator">=</span> <span class="token function">addToolBar</span><span class="token punctuation">(</span><span class="token string">"编辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>edittool<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actcopy<span class="token punctuation">)</span><span class="token punctuation">;</span>edittool<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>actpaste<span class="token punctuation">)</span><span class="token punctuation">;</span>QToolBar <span class="token operator">*</span>settool <span class="token operator">=</span> <span class="token function">addToolBar</span><span class="token punctuation">(</span><span class="token string">"设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QFontComboBox <span class="token operator">*</span>fc <span class="token operator">=</span> <span class="token keyword">new</span> QFontComboBox<span class="token punctuation">;</span>settool<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>actopen<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">openfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/48314123aa704b238c6425d8dc7e5f05.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5b69e1555e7d443c9562505306581b50.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/68f3d4909c7846a68c24274aa95125ca.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QToolBar></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFontComboBox></span></span>QToolBar <span class="token operator">*</span>settool <span class="token operator">=</span> <span class="token function">addToolBar</span><span class="token punctuation">(</span><span class="token string">"设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QFontComboBox <span class="token operator">*</span>fc <span class="token operator">=</span> <span class="token keyword">new</span> QFontComboBox<span class="token punctuation">;</span>settool<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f7dad48c08b84429b2e99662999ae6a6.png" alt="在这里插入图片描述"><br>添加照片<br><img src="https://img-blog.csdnimg.cn/35026f1311af459c9a427f29684c78cd.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b04191bae9fc49a1b75bf9037aaf9092.png" alt="在这里插入图片描述"></p><h2 id="3-6、状态栏"><a href="#3-6、状态栏" class="headerlink" title="3.6、状态栏"></a>3.6、状态栏</h2><p>==中央部件==<br><img src="https://img-blog.csdnimg.cn/c4f45f05aac94a3ba7c5c6a55d9501cd.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d1f1a66c4a2348a68e4034f185e1723d.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token comment" spellcheck="true">// 添加中央部件</span>te <span class="token operator">=</span> <span class="token keyword">new</span> QTextEdit<span class="token punctuation">;</span>te<span class="token operator">-</span><span class="token operator">></span><span class="token function">setMinimumSize</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCentralWidget</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>actopen<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">openfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/09a5945cee9448d3960aa3a16b305d02.png" alt="在这里插入图片描述"><br>==状态栏==<br><img src="https://img-blog.csdnimg.cn/5fc96dea975843668b46e5b3a73f0982.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9f9db9e5f1a540e0bab22c82ca1e5373.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token comment" spellcheck="true">// 添加状态栏</span>QLabel <span class="token operator">*</span>lb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">statusBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>lb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>actopen<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">openfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/66a2dfbe2c804e8aa90b858ad631983b.png" alt="在这里插入图片描述"><br>==操作文件==<br><img src="https://img-blog.csdnimg.cn/26340970145d4ec0b7a1d85ba06ef0b3.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d5019fb3ac254153a803b143e23e5939.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c47732209ba34612949ed652bf85bee3.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span><span class="token keyword">void</span> <span class="token function">openfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> MainWindow<span class="token operator">::</span><span class="token function">openfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QString filename <span class="token operator">=</span> QFileDialog<span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QFile <span class="token function">f</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>    QByteArray buf <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    te<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/765c76fb5ef145b4b0c310b7706a288c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-7、动作"><a href="#3-7、动作" class="headerlink" title="3.7、动作"></a>3.7、动作</h2><p>一般的,菜单项和工具栏按钮,往往执行一样的功能,所以Qt设讠 ACtion来管理其共有的显示图标、提示信息、热键、槽函数,等等。</p><h2 id="3-8、补充练习：QMain-Window"><a href="#3-8、补充练习：QMain-Window" class="headerlink" title="3.8、补充练习：QMain Window"></a>3.8、补充练习：QMain Window</h2><p><img src="https://img-blog.csdnimg.cn/1181f8055b12424ab47a283d32d16b97.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c2ef0d6b78064f2692c31c87af152d41.gif" alt="请添加图片描述"></p><blockquote><p>练习：QMain Window 代码链接：<a href="https://pan.baidu.com/s/1YrqnFoYerSH2k8mWSnaG-Q">https://pan.baidu.com/s/1YrqnFoYerSH2k8mWSnaG-Q</a><br>提取码：ziyu </p></blockquote><h1 id="四、事件及图形系统"><a href="#四、事件及图形系统" class="headerlink" title="四、事件及图形系统"></a>四、事件及图形系统</h1><h2 id="4-1、事件处理"><a href="#4-1、事件处理" class="headerlink" title="4.1、事件处理"></a>4.1、事件处理</h2><p>Qt的事件由窗口系统或是Q自身产生,用于响应各种需要处理的事务。</p><ol><li>特定事件处理器</li><li>QObject对象事件处理器</li><li>事件过滤器</li></ol><p>发送事件</p><p>处理事件</p><p>定时事件</p><blockquote><p>4.1事件及图形代码文件名:==event_test== 链接：<a href="https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg">https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg</a><br>提取码：ziyu</p></blockquote><p>==处理鼠标事件==<br><img src="https://img-blog.csdnimg.cn/5c92b99d6ff4435b91b2be9c5e5cb021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">public</span><span class="token operator">:</span>       <span class="token comment" spellcheck="true">//处理鼠标事件的虚函数---------------------------------</span>       <span class="token comment" spellcheck="true">//鼠标点击事件</span>       <span class="token keyword">void</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/b65069e02a984963a661b1cd1e991c6c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f4fe764827764ecf89b6e555690da3fe.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QMouseEvent"</span></span><span class="token comment" spellcheck="true">//鼠标点击</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">qDebug</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"mouse pos"</span> <span class="token operator">&lt;&lt;</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">qDebug</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"mouse button"</span> <span class="token operator">&lt;&lt;</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//按键，左键1，右键2，中键4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2f880d17371c4f1089faa4dc4b1588cb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//处理鼠标事件的虚函数---------------------------------</span> <span class="token comment" spellcheck="true">//鼠标点击事件</span> <span class="token keyword">void</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//鼠标双击</span> <span class="token keyword">void</span> <span class="token function">mouseDoubleClickEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//鼠标释放</span> <span class="token keyword">void</span> <span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//鼠标移动事件</span> <span class="token keyword">void</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/de373f7da3ec4fb5a825919f9f040aa3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d4718cca16534487859e640c0321e8b3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//使能鼠标事件追踪（不需长按鼠标键）</span><span class="token comment" spellcheck="true">//this->setMouseTracking(true);</span><span class="token comment" spellcheck="true">//处理鼠标事件的虚函数---------------------------------</span><span class="token comment" spellcheck="true">//鼠标双击</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mouseDoubleClickEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"mouse double"</span> <span class="token operator">&lt;&lt;</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印:mouse double</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鼠标释放</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"mouse release"</span> <span class="token operator">&lt;&lt;</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鼠标移动事件</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"mouse move:"</span> <span class="token operator">&lt;&lt;</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//左右键都可以</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==滚轮事件==<br><img src="https://img-blog.csdnimg.cn/79ef97ec80b6449d8fef092a553a91dd.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/36f0908a89254a1da6090fd0abc21994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//滚轮事件-----------------------------------------------</span><span class="token keyword">void</span> <span class="token function">wheelEvent</span><span class="token punctuation">(</span>QWheelEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QWheelEvent"</span></span><span class="token comment" spellcheck="true">//滚轮事件-----------------------------------------------</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">wheelEvent</span><span class="token punctuation">(</span>QWheelEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">qDebug</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">angleDelta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==键盘事件==<br><img src="https://img-blog.csdnimg.cn/573d87b1fdcf4c5a896ce82d8a855716.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e193134821e1481ea88c85c427e02681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">//键盘事件-----------------------------------------------</span> <span class="token keyword">void</span> <span class="token function">keyPressEvent</span><span class="token punctuation">(</span>QKeyEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">keyReleaseEvent</span><span class="token punctuation">(</span>QKeyEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QKeyEvent"</span></span><span class="token comment" spellcheck="true">//键盘事件-----------------------------------------------</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">keyPressEvent</span><span class="token punctuation">(</span>QKeyEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">keyReleaseEvent</span><span class="token punctuation">(</span>QKeyEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==窗口关闭事件==<br><img src="https://img-blog.csdnimg.cn/2b6b6a1e2a6348c289b58cf59e136414.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cfd47445abc048df81c193a51e7708b6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//窗口关闭事件</span><span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"xxxxxxxxxxxxxxxxxxx"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2、2D绘图基础"><a href="#4-2、2D绘图基础" class="headerlink" title="4.2、2D绘图基础"></a>4.2、2D绘图基础</h2><p>Qt的2D绘图系统主要是由于三个基本的类构成: QPainter、 QPaintEngine、 QPaintDevice。<br><img src="https://img-blog.csdnimg.cn/5f976010dda84f6aa998d8d745d401a6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==绘图事件==<br><img src="https://img-blog.csdnimg.cn/311f905a93bc426e907054fb4e0ec22e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/52c119d15608414d99e35a0c90b76919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//绘图事件</span><span class="token keyword">void</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"ddddddddddddddddddddd"</span><span class="token operator">&lt;&lt;</span>pos<span class="token operator">&lt;&lt;</span>posend<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==画点==<br><img src="https://img-blog.csdnimg.cn/e7c4f30b04b741c9acc5b1908a1852df.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f56133d52ea046bba98c920e9bf393f8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPainter></span></span>QPoint pos<span class="token punctuation">;</span>QPoint posend<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/145bf0203098462ca193aa6082203088.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/601151e3b6854afbbd57776a5b122173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    pos <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    update(); //手动激发一次界面重绘事件paintEvent</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"mouse press: "</span><span class="token operator">&lt;&lt;</span>event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"mouse button: "</span><span class="token operator">&lt;&lt;</span>event<span class="token operator">-</span><span class="token operator">></span><span class="token function">button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用户想要的绘制</span>QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//请出一个画家在this（当前面板）上画</span>QPen pen<span class="token punctuation">;</span>pen<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//给画家一支笔</span>p<span class="token punctuation">.</span><span class="token function">drawPoint</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//画点</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"ddddddddddddddddddddd"</span><span class="token operator">&lt;&lt;</span>pos<span class="token operator">&lt;&lt;</span>posend<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/df3b5280b8a34d618d94d64bce9a9180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==画线==<br><img src="https://img-blog.csdnimg.cn/37f31e66fbff42e6b4afb88a608d9a19.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">p<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1a10f7fc264049cfacee10b3d986a339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a0594efe6ee4bb08d0d8b8993ec1532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QPoint posend<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/b584489e01fe47c28813d724ea0df8e1.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a80f5d2a2ef4b2a8877b453ae9f2792.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/14e08f0ca7dd406ab9e7c8d4b43f9391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    pos <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    update(); //手动激发一次界面重绘事件paintEvent</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"mouse press: "</span><span class="token operator">&lt;&lt;</span>event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"mouse button: "</span><span class="token operator">&lt;&lt;</span>event<span class="token operator">-</span><span class="token operator">></span><span class="token function">button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    posend <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"mouse move:"</span> <span class="token operator">&lt;&lt;</span>event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>p<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> posend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"ddddddddddddddddddddd"</span><span class="token operator">&lt;&lt;</span>pos<span class="token operator">&lt;&lt;</span>posend<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c7939b56d2404ef3b8ac2aa361f3887b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==画椭圆==<br><img src="https://img-blog.csdnimg.cn/dda42d45ccbf493185927a151c38638c.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">p<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span>posend<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/89334a760e9445b898ffc5dfa0a92a93.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/86101cb70ace46e79c4c0b43eb71d458.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">p<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>posend<span class="token punctuation">,</span> <span class="token function">QPoint</span><span class="token punctuation">(</span>posend<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">200</span><span class="token punctuation">,</span> posend<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/208220032b5c4a939ff3e8f1b66671b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==画矩形==<br><img src="https://img-blog.csdnimg.cn/567ca55feb3b471bbc263f7a7ef24654.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">p<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>posend<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> posend<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/7b41989b48e447bb914ddfb1a0e868c2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==画刷子==<br><img src="https://img-blog.csdnimg.cn/7cff94935bb844789ecea226543b6819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QBrush brush<span class="token punctuation">;</span>brush<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>brush<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>DiagCrossPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setBrush</span><span class="token punctuation">(</span>brush<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//给画家一个刷子</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/342baa1fa831433c874ebc0c96e8c964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==画照片==<br><img src="https://img-blog.csdnimg.cn/5870c9df83844753ae9544e3dab2425e.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">p<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span>posend<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> posend<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\29507\\Desktop\\car.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ae8b1f04c7a44da192e331bad04fd191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-3、坐标系统"><a href="#4-3、坐标系统" class="headerlink" title="4.3、坐标系统"></a>4.3、坐标系统</h2><p>==画家动作==<br><img src="https://img-blog.csdnimg.cn/7dcb66964e58474c8ac81abb54de8e9a.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//移动画家</span>p<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//缩放作画</span>p<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//相对画家的坐标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/65be9f9bcc6d4a3991f5025c9893fc14.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6e3f66b5d1e44143a06467a76ec06d08.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b73c8f722acb4a198c855df44083c519.png" alt="在这里插入图片描述"><br>==时钟==<br><img src="https://img-blog.csdnimg.cn/7c56fd50d87d4302a3dcca0a8cdd4dc7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTimer></span></span>angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>QTimer <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token keyword">new</span> QTimer<span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTimer<span class="token operator">::</span>timeout<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   angle<span class="token operator">+</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>   <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ec48fcda948b476781c9518038841597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">if</span> 1   </span><span class="token comment" spellcheck="true">//理解坐标系+画家的移动、缩放、旋转</span>QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//移动画家</span>p<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//缩放作画</span>p<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//相对画家的坐标</span>p<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPoint</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//相对画家的坐标</span>p<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0934f62f36624e4da693b1caa04ff1d9.png" alt="在这里插入图片描述"></p><blockquote><p>4.1事件及图形代码文件名:==event_test== 链接：<a href="https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg">https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg</a><br>提取码：ziyu</p></blockquote><p>==双缓冲绘图==</p><blockquote><p>双缓冲绘图代码文件名:==doubleBuff== 链接：<a href="https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg">https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg</a><br>提取码：ziyu</p></blockquote><p><img src="https://img-blog.csdnimg.cn/89b3fa7cf0c64208a46a317b869f428d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/90257056b42942b7a55a8e6f82dfb579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/04098bd0bfbc42b48cc3d31cc627903d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/382690b9f3e64e53926f4e9083968229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7c497d3fff6741d29d6817248a10ade2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3336e060294141578b6c87a8d5b66d60.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ebbb471355ab4c709ef80eecdcf3dcb6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==按空格保存==</p><p><img src="https://img-blog.csdnimg.cn/b809ebfad78449c396d8f5c6237de2a8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7d230c77d59b454ca2fa7b919ab90d87.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/29537e46c7f449da9e6070fef48ee42c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6a1732dc8f5f42a6b7a5f468555b9be8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ccb3e2fe992c4af29231a715691bb5af.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>照片保存在：build-doubleBuff-Desktop_Qt_5_10_1_MinGW_32bit-Debug 路径<br><img src="https://img-blog.csdnimg.cn/5a2ab8deb3a84d8fbeefd32e8339f306.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e70a0fbd53034290bd793451a7bd58c3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b14238fad9424d57ad24afb76f18db53.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/94c0051ec57c4f5fa6e6d1d5cf21ff4c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/40deecf3b4ea41d7a04fcd4c234018bb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/be96c953bd974f6191f6852a860b7c29.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0be3b7b4fe3846d99e737508ce004594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/702e72d2f2d140cda8ef44ae551f9bb7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0d05fd09750a4616912b63583d888b99.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==画矩形==<br><img src="https://img-blog.csdnimg.cn/2cb28a0c82e84709a9462cdc1c3bfb29.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/aa6541cd06cf4b578a758ffa22ea0c49.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">keyPressEvent</span><span class="token punctuation">(</span>QKeyEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    QPoint posstart<span class="token punctuation">;</span>    QPoint posend<span class="token punctuation">;</span>    QPixmap <span class="token operator">*</span>pix<span class="token punctuation">;</span>    <span class="token keyword">bool</span> ismoving<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMouseEvent></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPainter></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    pix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pix<span class="token operator">-</span><span class="token operator">></span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ismoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    QPainter <span class="token function">p2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p2<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token operator">*</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//p2.drawLine(posstart, posend);</span>    p2<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span>posstart<span class="token punctuation">,</span> posend<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QPainter <span class="token function">p1</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ismoving<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//p1.drawLine(posstart, posend);</span>        p1<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span>posstart<span class="token punctuation">,</span> posend<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    posstart <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    posend <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ismoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    ismoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">keyPressEvent</span><span class="token punctuation">(</span>QKeyEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    pix<span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>双缓冲绘图代码文件名:==doubleBuff== 链接：<a href="https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg">https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg</a><br>提取码：ziyu</p></blockquote><p>==模仿一个按钮出来==</p><blockquote><p>模仿一个按钮事列代码文件名:==mybutton==链接：<a href="https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg">https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg</a><br>提取码：ziyu</p></blockquote><p><img src="https://img-blog.csdnimg.cn/7b7894b3a4624441b53bb473b85da49d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/dab5f161b4d74baf97783b20550f9f04.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b4e1d94038404e7e92171806b852c17d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0902cae8e3de4abebaba4b497a028e3d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8f894eedbaca46e38fae31620b5884a4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d842bfa867a34c5d87673026c0503fca.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8125a2b679e642a980c77f19d5c2eb6d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1969d172280d48ffa0ada6714cdaa096.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5d2724f78e7d41cab9db31cc3f659376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7c405d5cab384c85bfdebc7dc68515ed.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7fa0d6ec735a480aa271b9249417362f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c66cf97e2fea449b98ddaa8ab52d039f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a631b7d9382f4162b4e641369dd97980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7adf59e3ad184999b848e257e306b4bb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/10383857131e4e199b93d1e50ac36e74.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5c55533b28ec4a1788be8e712b942730.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fcb9a017acf44d66a555cb0b19c816a6.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/975f9605ce594210868afd037134bf6e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e0fee72b3112454d8626680cb0100410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4f2b0725d7374621ab36db5a12fc0c76.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9d796804715d4c6a825080ef739bfbfa.png" alt="在这里插入图片描述"><br>点击按钮关闭<br><img src="https://img-blog.csdnimg.cn/bf440feb2f534129ad0e417d813f119f.png" alt="在这里插入图片描述"><br>文件代码：<br><img src="https://img-blog.csdnimg.cn/ab309a0125a04dc3890b0e8f6356288a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> MYPUSHBUTTON_H</span><span class="token macro property">#<span class="token directive keyword">define</span> MYPUSHBUTTON_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token comment" spellcheck="true">//设计一个自己的按钮</span><span class="token keyword">class</span> <span class="token class-name">myPushButton</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">myPushButton</span><span class="token punctuation">(</span>QString text<span class="token punctuation">,</span> QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>signals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> drawblack<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否画背景（模拟点击动作）</span>    QString textt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// MYPUSHBUTTON_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f9ac9771c61a450790894283b86768b3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mypushbutton.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myPushButton <span class="token operator">*</span>bt_test<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/84855e430961418d9b1755b88afd7693.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mypushbutton.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPainter></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>myPushButton<span class="token operator">::</span><span class="token function">myPushButton</span><span class="token punctuation">(</span>QString text<span class="token punctuation">,</span> QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">textt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span>    drawblack <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setMinimumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> myPushButton<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"ppppppppppppppppp"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//调试</span>    drawblack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    emit <span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> myPushButton<span class="token operator">::</span><span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    drawblack <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> myPushButton<span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>drawblack<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"dddddddddddd"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//调试</span>        QBrush brush<span class="token punctuation">;</span>        brush<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>        brush<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>DiagCrossPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setBrush</span><span class="token punctuation">(</span>brush<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//给画家一个刷子</span>        p<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> textt<span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">setPen</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> textt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/e00fe96f6256423ebe37c327cf3b33c3.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用自己的按钮</span>    bt_test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">myPushButton</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>bt_test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>bt_test<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模仿一个按钮事列代码文件名:==mybutton==链接：<a href="https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg">https://pan.baidu.com/s/1wyp-89-8HvHXOefqE5_ACg</a><br>提取码：ziyu</p></blockquote><h2 id="4-4、Graphics-View（图形视图）"><a href="#4-4、Graphics-View（图形视图）" class="headerlink" title="4.4、Graphics View（图形视图）"></a>4.4、Graphics View（图形视图）</h2><p>Graphics View支持同 QPainter-样的几何变换:缩放、平移、旋转、扭转等等功能。也可以通过 QMatrix完成几何变换的值设置。</p><h2 id="4-5、事件过滤"><a href="#4-5、事件过滤" class="headerlink" title="4.5、事件过滤"></a>4.5、事件过滤</h2><p>==事件过滤传统处理方式==</p><blockquote><p>事件过滤传统处理方式==textZoom==链接：<a href="https://pan.baidu.com/s/1TbWztC0ZAru5qKBbMiF5PA">https://pan.baidu.com/s/1TbWztC0ZAru5qKBbMiF5PA</a><br>提取码：ziyu </p></blockquote><p><img src="https://img-blog.csdnimg.cn/4b153484e0dc4fac98748659da768512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mytextedit.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myTextEdit <span class="token operator">*</span>te<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/423975f936ab484d86384a118f009093.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    te <span class="token operator">=</span> <span class="token keyword">new</span> myTextEdit<span class="token punctuation">;</span>    QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a9135d69eae3454e90cbb78175d05336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/83a4fc4e5e274f37b965b64f70d5025c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> MYTEXTEDIT_H</span><span class="token macro property">#<span class="token directive keyword">define</span> MYTEXTEDIT_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWheelEvent></span></span><span class="token keyword">class</span> <span class="token class-name">myTextEdit</span> <span class="token operator">:</span> <span class="token keyword">public</span> QTextEdit<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">myTextEdit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">wheelEvent</span><span class="token punctuation">(</span>QWheelEvent <span class="token operator">*</span>e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>           <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setFontPointSize</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">else</span><span class="token punctuation">{</span>           size <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> size<span class="token punctuation">)</span>               size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setFontPointSize</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// MYTEXTEDIT_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/deaac008e856464b9f3d1ba002ae10af.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mytextedit.h"</span></span>myTextEdit<span class="token operator">::</span><span class="token function">myTextEdit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/efff3557a17c4b54ae40133e52eb9f47.gif" alt="请添加图片描述"></p><p>==事件过滤==</p><blockquote><p>事件过滤代码文件名==textoom_pro==链接：<a href="https://pan.baidu.com/s/1TbWztC0ZAru5qKBbMiF5PA">https://pan.baidu.com/s/1TbWztC0ZAru5qKBbMiF5PA</a><br>提取码：ziyu </p></blockquote><p><img src="https://img-blog.csdnimg.cn/12a08604b43544878aa8dba06dd17e8e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QEvent></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWheelEvent></span></span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//专门处理过滤出来的事件（别人的事件）</span>    <span class="token keyword">bool</span> <span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>watched<span class="token punctuation">,</span> QEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>watched <span class="token operator">==</span> te<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//专门处理来自于文本编辑框的事件</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QEvent<span class="token operator">::</span>Wheel<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//滚轮事件</span>            <span class="token punctuation">{</span>                QWheelEvent <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>QWheelEvent <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                    te<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFontPointSize</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    size <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> size<span class="token punctuation">)</span>                        size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    te<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFontPointSize</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     QTextEdit <span class="token operator">*</span>te<span class="token punctuation">;</span>     <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/19ce2ca76ec041b3ae567df02e7d07c3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QVBoxLayout></span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    te <span class="token operator">=</span> <span class="token keyword">new</span> QTextEdit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将事件交给其他的对象！！！！！！！</span>    te<span class="token operator">-</span><span class="token operator">></span><span class="token function">installEventFilter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//te将自己的事件先交给this处理</span>    QVBoxLayout <span class="token operator">*</span>vbox <span class="token operator">=</span> <span class="token keyword">new</span> QVBoxLayout<span class="token punctuation">;</span>    vbox<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setLayout</span><span class="token punctuation">(</span>vbox<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ff9c3c3d25214516a38bf8879706226b.gif" alt="请添加图片描述"></p><h2 id="4-6、练习自制一个表盘、画图工具。"><a href="#4-6、练习自制一个表盘、画图工具。" class="headerlink" title="4.6、练习自制一个表盘、画图工具。"></a>4.6、练习自制一个表盘、画图工具。</h2><p><img src="https://img-blog.csdnimg.cn/e958731ac9d44ab996020b64634bd348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="4.6.1、"><br><img src="https://img-blog.csdnimg.cn/c6fd102dcffb44a886d309d51504e59d.gif" alt="请添加图片描述"></p><blockquote><p>自制一个表盘代码链接：<a href="https://pan.baidu.com/s/1EcrlF9igClUsiBtdgVoppw">https://pan.baidu.com/s/1EcrlF9igClUsiBtdgVoppw</a><br>提取码：ziyu </p></blockquote><p><img src="https://img-blog.csdnimg.cn/9c7a376ca71740c7a1ec8acb7889671d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5566b06d6f0642e293254a83e05f7627.gif" alt="请添加图片描述"></p><blockquote><p>画图工具代码链接：<a href="https://pan.baidu.com/s/1LixaVNtv5KjJaEc4iw89lA">https://pan.baidu.com/s/1LixaVNtv5KjJaEc4iw89lA</a><br>提取码：ziyu </p></blockquote><h1 id="五、文件处理"><a href="#五、文件处理" class="headerlink" title="五、文件处理"></a>五、文件处理</h1><h2 id="5-1、QFiIe"><a href="#5-1、QFiIe" class="headerlink" title="5.1、QFiIe"></a>5.1、QFiIe</h2><p><img src="https://img-blog.csdnimg.cn/020931fdcad64fe28e9fdaabf3dd28c4.png" alt="在这里插入图片描述"><br><strong>5.1.1、文件加密工具案例</strong><br>==新建文件==<br><img src="https://img-blog.csdnimg.cn/4030f320bf1145d489d890b96eccf883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0a7d9715be74ea6a08ad07636e341ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fe9108148bd94e619a79c2c9f1ba65d0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ef6b53ddb0384534b7d1c527ec695ff9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/10ecf6233f4c4a9883c0fcc6389c9d2d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==项目案例==<br><img src="https://img-blog.csdnimg.cn/499bdcb2dae94874bba87384b3bfce7f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a4711e34d20149e3952e5981fcfea246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/da33eaac2b8e4dbfa65f3e864a2bfc27.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/60f9f188e99b4324bc44341213dd61bb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f18e5bfb88ee49098daece3e683b0ab9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f91f5a7af5cb4e8194d5f06a1dcd86bb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">void</span> <span class="token function">on_view_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_encode_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_exit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Ui<span class="token operator">::</span>Widget <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QString filename<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f6698144bdc34d38aba56df99da2c1dc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ui_widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">on_view_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ui->progressBar->setValue(0);</span>    filename <span class="token operator">=</span> QFileDialog<span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-</span><span class="token operator">></span>lineEdit<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/271b88156caf42fc90f72f407d079daf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/94c55483255242e8925f6663bb95084b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6035b7d53107490d96295fa522010c02.gif" alt="请添加图片描述"></p><blockquote><p>文件加密工具案例链接地址：<a href="https://pan.baidu.com/s/1Ij9mb-5x0sQNT46ODWvmTQ">https://pan.baidu.com/s/1Ij9mb-5x0sQNT46ODWvmTQ</a><br>提取码：ziyu</p></blockquote><h2 id="5-2、读写方式"><a href="#5-2、读写方式" class="headerlink" title="5.2、读写方式"></a>5.2、读写方式</h2><p>在 linux系统下,一切皆是文件,当打开的是设备对象时候,就会存在阻塞读写方式</p><ul><li>阻塞</li><li>非阻塞</li><li>超时<blockquote><p>详情可参考博主链接：<a href="https://www.cnblogs.com/flowingwind/p/8336159.html">https://www.cnblogs.com/flowingwind/p/8336159.html</a></p></blockquote><h2 id="5-3、文本流"><a href="#5-3、文本流" class="headerlink" title="5.3、文本流"></a>5.3、文本流</h2><img src="https://img-blog.csdnimg.cn/e8e0d582f1554c168df8c6b804e08c21.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote><p>Qt文本流和数据详情可参考博主链接：<a href="https://www.cnblogs.com/hjxzjp/p/12339751.html">https://www.cnblogs.com/hjxzjp/p/12339751.html</a></p></blockquote><h2 id="5-4、数据流"><a href="#5-4、数据流" class="headerlink" title="5.4、数据流"></a>5.4、数据流</h2>QData Stream用于处理 QIODevice和 QByteArray管理的数据流。<blockquote><p>Qt文本流和数据详情可参考博主链接：<a href="https://www.cnblogs.com/hjxzjp/p/12339751.html">https://www.cnblogs.com/hjxzjp/p/12339751.html</a></p></blockquote><h2 id="5-5、临时文件"><a href="#5-5、临时文件" class="headerlink" title="5.5、临时文件"></a>5.5、临时文件</h2><img src="https://img-blog.csdnimg.cn/f6144fc6e3224174b9a29477fd588830.png" alt="在这里插入图片描述"></li></ul><h2 id="5-6、目录"><a href="#5-6、目录" class="headerlink" title="5.6、目录"></a>5.6、目录</h2><p><img src="https://img-blog.csdnimg.cn/2b86d6fd74ef4c1db4557b590559485c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-7、文件信息"><a href="#5-7、文件信息" class="headerlink" title="5.7、文件信息"></a>5.7、文件信息</h2><p><img src="https://img-blog.csdnimg.cn/450b940887e9422f97f464f19735d163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-8、文件监测"><a href="#5-8、文件监测" class="headerlink" title="5.8、文件监测"></a>5.8、文件监测</h2><p><img src="https://img-blog.csdnimg.cn/d46ee51721314c42832b7f396a9be247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="六、线程及同步互斥"><a href="#六、线程及同步互斥" class="headerlink" title="六、线程及同步互斥"></a>六、线程及同步互斥</h1><h2 id="6-1、线程-QThread"><a href="#6-1、线程-QThread" class="headerlink" title="6.1、线程 QThread"></a>6.1、线程 QThread</h2><p><img src="https://img-blog.csdnimg.cn/e789c656aec1450d97e2c73fdcb08e1b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/dd9d9e9e9bf74934ab31d301420fe4c0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>6.1.1、线程案例：</strong><br>==(1)新建文件==<br><img src="https://img-blog.csdnimg.cn/4030f320bf1145d489d890b96eccf883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0a7d9715be74ea6a08ad07636e341ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fe9108148bd94e619a79c2c9f1ba65d0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ef6b53ddb0384534b7d1c527ec695ff9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/10ecf6233f4c4a9883c0fcc6389c9d2d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==(2)项目案例 - qt一个线程==<br><img src="https://img-blog.csdnimg.cn/d630cadbee1d453bb1766dcdeaf259cd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b9939eb1504242e9ab30747d79962dcc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">{</span><span class="token keyword">class</span> <span class="token class-name">Widget</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_pushButton_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>Widget <span class="token operator">*</span>ui<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/e7e72ee8c94f4e52bf6c31e12bc92470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/721f19499a2943e9ae41a2271625f418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ui_widget.h"</span></span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//耗时任务一</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2000000</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-</span><span class="token operator">></span>progressBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">setValue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//耗时任务二</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4000000</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-</span><span class="token operator">></span>progressBar_2<span class="token operator">-</span><span class="token operator">></span><span class="token function">setValue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//耗时任务三</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5000000</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-</span><span class="token operator">></span>progressBar_3<span class="token operator">-</span><span class="token operator">></span><span class="token function">setValue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">on_pushButton_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    work();</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/cc9fd361dff64823b9948d8d134e9443.gif" alt="请添加图片描述"><br>==(3)项目案例 - 多线程程序设计==<br><img src="https://img-blog.csdnimg.cn/7999e6dd76db4e6da3411fa77f4b4d02.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fc794de830ff4536a65f8ac62c04ff33.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f1df49b7b49a484da3620a31c1432698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1d1fbbb0ba9b4b8fa8f59d6ee3b6312f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/18272c6467ff4c91979f4405790a3094.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> MYTASK_H</span><span class="token macro property">#<span class="token directive keyword">define</span> MYTASK_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QThread></span></span><span class="token keyword">class</span> <span class="token class-name">myTask</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread<span class="token punctuation">{</span>    Q_OBJECTsignals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">progress</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进度</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">myTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//线程工作函数需要用户重写！！！！</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//耗时任务</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> time<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emit <span class="token function">progress</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> time<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//模拟耗时</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// MYTASK_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/39357c7fa9d84de38c1e563929472f6c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mytask.h"</span></span>myTask<span class="token operator">::</span><span class="token function">myTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> delay<span class="token punctuation">)</span>    <span class="token operator">:</span><span class="token function">time</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/70ec971e96d94c58866771b9576d2dc4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8ee55c7d2051442c8575796e3bd30222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ui_widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mytask.h"</span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>Widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token operator">-</span><span class="token operator">></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建线程</span>    myTask <span class="token operator">*</span>t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">myTask</span><span class="token punctuation">(</span><span class="token number">20000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myTask <span class="token operator">*</span>t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">myTask</span><span class="token punctuation">(</span><span class="token number">50000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myTask <span class="token operator">*</span>t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">myTask</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ui<span class="token operator">-</span><span class="token operator">></span>progressBar<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ui<span class="token operator">-</span><span class="token operator">></span>progressBar_2<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ui<span class="token operator">-</span><span class="token operator">></span>progressBar_3<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//启动线程</span>    t1<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t3<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/7279f9133c724c1893811aa2c1835332.gif" alt="请添加图片描述"></p><blockquote><p>QT多线程案例链接地址：<a href="https://pan.baidu.com/s/1FTN_onqboDz9tOSpHXzGoQ">https://pan.baidu.com/s/1FTN_onqboDz9tOSpHXzGoQ</a><br>提取码：ziyu</p></blockquote><h2 id="6-2、线程同步互斥"><a href="#6-2、线程同步互斥" class="headerlink" title="6.2、线程同步互斥"></a>6.2、线程同步互斥</h2><p><img src="https://img-blog.csdnimg.cn/a1561e0db7184782ba0e04df3b292621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>6.2.1、互斥锁 MUtex、 QMutexLocker</strong><br><img src="https://img-blog.csdnimg.cn/34518a4bc5874760b794a334ae0f341c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==(1)新建文件==<br><img src="https://img-blog.csdnimg.cn/145548e266a743b8a3c425c1a7bf8cd8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0a7d9715be74ea6a08ad07636e341ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fe9108148bd94e619a79c2c9f1ba65d0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/10ecf6233f4c4a9883c0fcc6389c9d2d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==(2)创建第1个线程==<br><img src="https://img-blog.csdnimg.cn/ac4071f0f6eb4f8a8bd08082a20ba589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cc9a1e987eba4405985f0c4def0b95ce.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/480d0187f994492db68876d986b47bc9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/97cf671952c54a518b7bc19e2fdb11f8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"printarrthread.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reversarrthread.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMutex></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QCoreApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>    QMutex lock<span class="token punctuation">;</span>    printArrThread <span class="token function">t</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reversArrThread <span class="token function">t1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1f0f5ebbdae8415a9cd4f1736f50c4a9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> PRINTARRTHREAD_H</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINTARRTHREAD_H</span><span class="token comment" spellcheck="true">/*线程*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QThread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMutex></span></span><span class="token keyword">class</span> <span class="token class-name">printArrThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">printArrThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> QMutex <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打印</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            l<span class="token operator">-</span><span class="token operator">></span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>t<span class="token punctuation">;</span>            l<span class="token operator">-</span><span class="token operator">></span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>    QMutex <span class="token operator">*</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// PRINTARRTHREAD_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/df25786af15b470db34fe18f5b86a964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"printarrthread.h"</span></span>printArrThread<span class="token operator">::</span><span class="token function">printArrThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> QMutex <span class="token operator">*</span>lock<span class="token punctuation">)</span>    <span class="token operator">:</span><span class="token function">t</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">l</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/05cf7a50f0e145d2b6b05b720f69b118.gif" alt="请添加图片描述"><br>==(2)创建第2个线程==<br><img src="https://img-blog.csdnimg.cn/ac4071f0f6eb4f8a8bd08082a20ba589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cc9a1e987eba4405985f0c4def0b95ce.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2c07a987d3d341f7b32a658d3fadc2f9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"printarrthread.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reversarrthread.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMutex></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QCoreApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>    QMutex lock<span class="token punctuation">;</span>    printArrThread <span class="token function">t</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reversArrThread <span class="token function">t1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/db34a76610ad464aaec6459731decce1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> REVERSARRTHREAD_H</span><span class="token macro property">#<span class="token directive keyword">define</span> REVERSARRTHREAD_H</span><span class="token comment" spellcheck="true">/*倒序的线程*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QThread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMutex></span></span><span class="token keyword">class</span> <span class="token class-name">reversArrThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">reversArrThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> QMutex <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            l<span class="token operator">-</span><span class="token operator">></span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 t<span class="token punctuation">[</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                 t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             l<span class="token operator">-</span><span class="token operator">></span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>    QMutex <span class="token operator">*</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// REVERSARRTHREAD_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/552c0946f1f5419490ecd555446cb056.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reversarrthread.h"</span></span>reversArrThread<span class="token operator">::</span><span class="token function">reversArrThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> QMutex <span class="token operator">*</span>lock<span class="token punctuation">)</span>    <span class="token operator">:</span><span class="token function">t</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">l</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f32ed1f84ce94a00a67359ae61e6d732.gif" alt="请添加图片描述"></p><blockquote><p>QT互斥锁案例链接地址：<a href="https://pan.baidu.com/s/1XPk4yyW6LTAJ_gjlR8n67g">https://pan.baidu.com/s/1XPk4yyW6LTAJ_gjlR8n67g</a><br>提取码：ziyu</p></blockquote><p><strong>6.2.2、读写锁 QReadWriteLock</strong><br><img src="https://img-blog.csdnimg.cn/328fa3c415b048888a0e3925f61f5f16.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Qt的读写锁QReadWriteLock参考链接：<a href="https://www.fearlazy.com/index.php/post/99.html">https://www.fearlazy.com/index.php/post/99.html</a></p></blockquote><p><strong>6.2.3、条件变量 QWait Condition</strong><br><img src="https://img-blog.csdnimg.cn/026548309fa440839e18825a088d86d8.png" alt="在这里插入图片描述"></p><blockquote><p>QWaitCondition 条件变量参考链接：<a href="https://blog.csdn.net/Amnes1a/article/details/70226207">https://blog.csdn.net/Amnes1a/article/details/70226207</a></p></blockquote><p><strong>6.2.4、信号量 SEmaphore</strong><br><img src="https://img-blog.csdnimg.cn/4b668ad8e1574ca2989ed2a781734768.png" alt="在这里插入图片描述"></p><blockquote><p>信号量 SEmaphore参考链接：<a href="https://www.cnblogs.com/venow/archive/2012/10/15/2724943.html">https://www.cnblogs.com/venow/archive/2012/10/15/2724943.html</a></p></blockquote><h2 id="6-3、线程同步"><a href="#6-3、线程同步" class="headerlink" title="6.3、线程同步"></a>6.3、线程同步</h2><p><strong>6.3.1、QT线程同步案例</strong><br>==(1)新建文件==<br><img src="https://img-blog.csdnimg.cn/145548e266a743b8a3c425c1a7bf8cd8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0a7d9715be74ea6a08ad07636e341ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fe9108148bd94e619a79c2c9f1ba65d0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/10ecf6233f4c4a9883c0fcc6389c9d2d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==(2)同步实现==</p><p><img src="https://img-blog.csdnimg.cn/a6878fd9058f45db901eb468690bbe92.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"printarrthread.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reversarrthread.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSemaphore></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QCoreApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>    QSemaphore sem<span class="token punctuation">;</span>    printArrThread <span class="token function">t</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reversArrThread <span class="token function">t1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/75f314649e7048c98c8f35e37abe4fd0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> PRINTARRTHREAD_H</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINTARRTHREAD_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QThread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSemaphore></span></span><span class="token keyword">class</span> <span class="token class-name">printArrThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">printArrThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> QSemaphore <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token operator">-</span><span class="token operator">></span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//qDebug()&lt;&lt;t;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>    QSemaphore <span class="token operator">*</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// PRINTARRTHREAD_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1a1b7108467044ca90b32cb65ac85936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"printarrthread.h"</span></span>printArrThread<span class="token operator">::</span><span class="token function">printArrThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> QSemaphore <span class="token operator">*</span>sem<span class="token punctuation">)</span>    <span class="token operator">:</span><span class="token function">t</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s</span><span class="token punctuation">(</span>sem<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ad39c143e82e4ba9a843f19e33e3b2af.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> REVERSARRTHREAD_H</span><span class="token macro property">#<span class="token directive keyword">define</span> REVERSARRTHREAD_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QThread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSemaphore></span></span><span class="token keyword">class</span> <span class="token class-name">reversArrThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">reversArrThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> QSemaphore <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                t<span class="token punctuation">[</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             s<span class="token operator">-</span><span class="token operator">></span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>    QSemaphore <span class="token operator">*</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// REVERSARRTHREAD_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/aaf7968b30094c6dbe256b2e0a6b9da5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reversarrthread.h"</span></span>reversArrThread<span class="token operator">::</span><span class="token function">reversArrThread</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> QSemaphore <span class="token operator">*</span>sem<span class="token punctuation">)</span>    <span class="token operator">:</span><span class="token function">t</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s</span><span class="token punctuation">(</span>sem<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/3fcb368dd0ed43b58c557191a4a395de.gif" alt="请添加图片描述"></p><blockquote><p>QT线程同步案例代码链接地址：<a href="https://pan.baidu.com/s/1FjXuqsgPLZet8TH8WREVcA">https://pan.baidu.com/s/1FjXuqsgPLZet8TH8WREVcA</a><br>提取码：ziyu</p></blockquote><h1 id="七、进程与进程间的通信"><a href="#七、进程与进程间的通信" class="headerlink" title="七、进程与进程间的通信"></a>七、进程与进程间的通信</h1><h2 id="7-1、进程-Qprocess"><a href="#7-1、进程-Qprocess" class="headerlink" title="7.1、进程 Qprocess"></a>7.1、进程 Qprocess</h2><p><img src="https://img-blog.csdnimg.cn/95e768ed83bb4eb3b08134615c983edd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==Qt 进程 QProcess==</p><blockquote><p>如有侵权请联系博主删除！<br>可参考博主链接：<a href="https://blog.csdn.net/chy555chy/article/details/53119551">https://blog.csdn.net/chy555chy/article/details/53119551</a></p></blockquote><h2 id="7-2、共享内存-Shared-Memory"><a href="#7-2、共享内存-Shared-Memory" class="headerlink" title="7.2、共享内存( Shared Memory)"></a>7.2、共享内存( Shared Memory)</h2><p><img src="https://img-blog.csdnimg.cn/396eec8a83c14bd7a3fe84b390825e03.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==共享内存（Shared Memory）介绍==</p><blockquote><p>如有侵权请联系博主删除！<br>可参考博主链接：<a href="https://blog.csdn.net/WAN_EXE/article/details/56484664">https://blog.csdn.net/WAN_EXE/article/details/56484664</a></p></blockquote><h2 id="7-3、Qt网络编程"><a href="#7-3、Qt网络编程" class="headerlink" title="7.3、Qt网络编程"></a>7.3、Qt网络编程</h2><p><img src="https://img-blog.csdnimg.cn/84f303c1af33416baddb2bc752f5a84f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>==Qt网络编程例子：==<a href="https://blog.csdn.net/m0_37357063/article/details/80744011">https://blog.csdn.net/m0_37357063/article/details/80744011</a></p></blockquote><p><strong>7.3.1、qt实现客户端</strong><br>==(1)新建文件==<br><img src="https://img-blog.csdnimg.cn/4030f320bf1145d489d890b96eccf883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0a7d9715be74ea6a08ad07636e341ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fe9108148bd94e619a79c2c9f1ba65d0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ef6b53ddb0384534b7d1c527ec695ff9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/10ecf6233f4c4a9883c0fcc6389c9d2d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==(2)客户端实现==<br><img src="https://img-blog.csdnimg.cn/026108ebb80a488e8fbcd9153b8b082b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2a3e8156493440049147b4df3db0695b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">QT       <span class="token operator">+</span><span class="token operator">=</span> core gui network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/15c576b1cc0c40d6ae20a648b85a668b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WIDGET_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTcpSocket></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">{</span><span class="token keyword">class</span> <span class="token class-name">Widget</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_pushButton_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>Widget <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QTcpSocket <span class="token operator">*</span>mysock<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// WIDGET_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/af87282c06d749f995abf220fcb4331a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/bf261da7b15a46338760050539471b99.gif" alt="请添加图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    Widget w<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/7f2ac6c979094800819354603f38ca49.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ui_widget.h"</span></span>Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>Widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token operator">-</span><span class="token operator">></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构建套接字</span>    mysock <span class="token operator">=</span> <span class="token keyword">new</span> QTcpSocket<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连通服务器</span>    mysock<span class="token operator">-</span><span class="token operator">></span><span class="token function">connectToHost</span><span class="token punctuation">(</span><span class="token string">"192.168.7.109"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//连接服务器ip地址</span>    <span class="token function">connect</span><span class="token punctuation">(</span>mysock<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回信号</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//接收函数</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.收</span>    QByteArray buf <span class="token operator">=</span> mysock<span class="token operator">-</span><span class="token operator">></span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.显示</span>    ui<span class="token operator">-</span><span class="token operator">></span>textEdit<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">on_pushButton_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//按钮</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.提取待发送文字</span>    QString str <span class="token operator">=</span> ui<span class="token operator">-</span><span class="token operator">></span>lineEdit<span class="token operator">-</span><span class="token operator">></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.发送至服务器</span>    mysock<span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>qt实现客户端代码链接地址：<a href="https://pan.baidu.com/s/1c5et4bRr1DbBfzL9JPYIRw">https://pan.baidu.com/s/1c5et4bRr1DbBfzL9JPYIRw</a><br>提取码：ziyu</p></blockquote><p><strong>7.3.2、qt实现服务器端</strong><br>==(1)新建文件==<br><img src="https://img-blog.csdnimg.cn/145548e266a743b8a3c425c1a7bf8cd8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0a7d9715be74ea6a08ad07636e341ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fe9108148bd94e619a79c2c9f1ba65d0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/10ecf6233f4c4a9883c0fcc6389c9d2d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==(2)实现服务器端==<br>10:00</p><p><img src="https://img-blog.csdnimg.cn/e9e6ed6c7c274a00ad76e868ebe70287.gif" alt="请添加图片描述"></p><h2 id="7-4、QTcpSocket"><a href="#7-4、QTcpSocket" class="headerlink" title="7.4、QTcpSocket"></a>7.4、QTcpSocket</h2><p><img src="https://img-blog.csdnimg.cn/b8ceba72ddb94eb7835c22bb28fc33fd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b999be09eea4420b8f6299a56a1b72a5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==Qt-网络编程之QTCPSocket和QTCPServer(实现简易网络调试助手)==</p><blockquote><p>如有侵权请联系博主删除！<br>可参考博主链接：<a href="https://www.cnblogs.com/lifexy/p/11317662.html">https://www.cnblogs.com/lifexy/p/11317662.html</a></p></blockquote><h2 id="7-5、QUdpSocket"><a href="#7-5、QUdpSocket" class="headerlink" title="7.5、QUdpSocket"></a>7.5、QUdpSocket</h2><p>数据报套接字是一种没有连接不可靠网络通讯接口<br><img src="https://img-blog.csdnimg.cn/df9370d281ec479ab31946ed14352e9d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==QUdpSocket-Qt使用Udp通讯实现服务端和客户端==</p><blockquote><p>如有侵权请联系博主删除！<br>可参考博主链接：<a href="https://blog.csdn.net/pingis58/article/details/82977335">https://blog.csdn.net/pingis58/article/details/82977335</a></p></blockquote><h2 id="7-6、Qt数据库编程-QSqlDatabase"><a href="#7-6、Qt数据库编程-QSqlDatabase" class="headerlink" title="7.6、Qt数据库编程 QSqlDatabase"></a>7.6、Qt数据库编程 QSqlDatabase</h2><p><img src="https://img-blog.csdnimg.cn/4d510058fae54da5bd33c7afbd5fe527.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f0593327ab234cf7aba11e58e7106b32.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0958f6bdf16245f99017a46792d7f5b1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>QT 的数据库操作（QSqlDatabase、QSqlQuery）可参考链接：<a href="https://blog.csdn.net/Zzhouzhou237/article/details/79459320">https://blog.csdn.net/Zzhouzhou237/article/details/79459320</a></p><h1 id="八、补充必备"><a href="#八、补充必备" class="headerlink" title="八、补充必备"></a>八、补充必备</h1></blockquote><h2 id="8-1、国际化"><a href="#8-1、国际化" class="headerlink" title="8.1、国际化"></a>8.1、国际化</h2><blockquote><p>Qt 加载翻译文件基本方法推荐链接：<a href="https://blog.csdn.net/weixin_38293850/article/details/89680575">https://blog.csdn.net/weixin_38293850/article/details/89680575</a></p></blockquote><h2 id="8-2、应用程序图标"><a href="#8-2、应用程序图标" class="headerlink" title="8.2、应用程序图标"></a>8.2、应用程序图标</h2><p><img src="https://img-blog.csdnimg.cn/c31096321e654798b49b428414a37eb1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c58c460380184e7a99a2ddb7891b95fe.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/747ab6d91f2d446fb1880f366bd495ce.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-cpp"><code class="language-cpp">RC_ICONS <span class="token operator">=</span> mycless<span class="token punctuation">.</span>ico<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>==QT 设置程序图标可参考1：== <a href="https://blog.csdn.net/weixin_38293850/article/details/88420242">https://blog.csdn.net/weixin_38293850/article/details/88420242</a><br> ==QT 设置程序图标可参考2：== <a href="https://blog.csdn.net/xiezhongyuan07/article/details/79320523">https://blog.csdn.net/xiezhongyuan07/article/details/79320523</a></p></blockquote><blockquote><p>==:-1: error: [Makefile.Debug:72: debug/QtIcon_resource_res.o] Error 1 原因与彻底解决方案_转载：==<a href="https://blog.csdn.net/weixin_42126427/article/details/106686824">https://blog.csdn.net/weixin_42126427/article/details/106686824</a></p></blockquote><blockquote><p>==推荐在线制作ico图标，ico图标转换工具：==<a href="https://www.bitbug.net/">https://www.bitbug.net/</a></p></blockquote><h2 id="8-3、QSS"><a href="#8-3、QSS" class="headerlink" title="8.3、QSS"></a>8.3、QSS</h2><blockquote><p>==【QT】QSS美化——基础知识：==<a href="https://blog.csdn.net/qq_40602000/article/details/104652131">https://blog.csdn.net/qq_40602000/article/details/104652131</a></p></blockquote><h2 id="8-4、应用程序打包"><a href="#8-4、应用程序打包" class="headerlink" title="8.4、应用程序打包"></a>8.4、应用程序打包</h2><p><img src="https://img-blog.csdnimg.cn/9199b2e5e6d9470fb852c6a3868c049f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2888b7c9ebd64fdeb4a24b185fa45e09.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/60fbce9d3b614bbcaed035a540ecac5b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9839495013404b2ea8e207f0c206b69e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0c7d3bca24934bf1bd92fd5d2fc26dea.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b48e27e8869947a4940dcd6d4ec9095d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7966713a6dd9468192a392f47990529e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在终端里面，【ctrl】+【insert】相当于复制，【shift】+【insert】相当于粘贴，在其他操作系统的终端一样试用，例如linux</p><p>==QT加载库程序 + 自己文件名==</p><pre class="line-numbers language-cpp"><code class="language-cpp">windeployqt<span class="token punctuation">.</span>exe untitled4<span class="token punctuation">.</span>exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/45ea0857802d4aeeb96cfd82f7c762c8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>这时候我们需要一个大包软件将多个文件打包成一个可执行的应用程序！<br>==Enigma Virtual Box是一款免费的单文件封包工具，他可以一个应用程序的多个文件打包成一个可执行的应用程序：==<a href="https://blog.csdn.net/qq_28368039/article/details/115482209">https://blog.csdn.net/qq_28368039/article/details/115482209</a><br>百度云盘==Enigma Virtual Box==分享链接：<a href="https://pan.baidu.com/s/1uvddkRywzW3gxCPnqebtEA">https://pan.baidu.com/s/1uvddkRywzW3gxCPnqebtEA</a><br>提取码：ziyu</p></blockquote><p><img src="https://img-blog.csdnimg.cn/31b88af01eb541da901fc15efe1c90eb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6da4bd3ee4384de6aa12a0f51e29c502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c930412965bb4ab28606d7d931619a2b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/69bd360c0eb24c22adc052dbcf4fe726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6d2e85bb596c4a929b728f172255af2c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/db1f9a54f3904ec0b97883f854fc5305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0818044e8604411faeba2508f9c43c3f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fd9463025a0a40208591abf8ed3f5ca0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5d92179e64f94494b91b8962cb370771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="8-5、实现一个五子棋"><a href="#8-5、实现一个五子棋" class="headerlink" title="8.5、实现一个五子棋"></a>8.5、实现一个五子棋</h2><p><img src="https://img-blog.csdnimg.cn/7ffe9ca3517149fdad585af21879d153.gif" alt="请添加图片描述"></p><blockquote><p>五子棋源代码链接：<a href="https://pan.baidu.com/s/1LJkVEoVhq2rmg9nNYRpvdA">https://pan.baidu.com/s/1LJkVEoVhq2rmg9nNYRpvdA</a><br>提取码：ziyu</p></blockquote><h1 id="九、QT编写项目作品大全！"><a href="#九、QT编写项目作品大全！" class="headerlink" title="九、QT编写项目作品大全！"></a>九、QT编写项目作品大全！</h1><blockquote><p>Qt编写项目作品大全推荐链接：<a href="https://zhuanlan.zhihu.com/p/75489053">https://zhuanlan.zhihu.com/p/75489053</a></p></blockquote><blockquote><p>Qt项目视频展示bilbil推荐链接：<a href="https://www.bilibili.com/video/BV1Hr4y1T7y1?p=4">https://www.bilibili.com/video/BV1Hr4y1T7y1?p=4</a></p></blockquote><h1 id="跳转：上一篇、C-编程！"><a href="#跳转：上一篇、C-编程！" class="headerlink" title="跳转：上一篇、C++编程！"></a>跳转：上一篇、C++编程！</h1><blockquote><p><a href="https://blog.csdn.net/qq_43498137/article/details/119042136">跳转：上一篇、C++编程！</a></p></blockquote><h1 id="跳转：下一篇、ARM体系结构！"><a href="#跳转：下一篇、ARM体系结构！" class="headerlink" title="跳转：下一篇、ARM体系结构！"></a>跳转：下一篇、ARM体系结构！</h1><blockquote><p><a href="https://blog.csdn.net/qq_43498137/article/details/119761322">下一篇、ARM体系结构！</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/qq_43498137/article/details/119278690">跳转：开头</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4.LinuxC语言高级专题 &lt;朱有鹏&gt;</title>
      <link href="/2021/11/01/linuxc-yu-yan-gao-ji-zhuan-ti/"/>
      <url>/2021/11/01/linuxc-yu-yan-gao-ji-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="4-LinuxC语言高级专题-lt-朱有鹏-gt"><a href="#4-LinuxC语言高级专题-lt-朱有鹏-gt" class="headerlink" title="4.LinuxC语言高级专题 <朱有鹏>"></a>4.LinuxC语言高级专题 &lt;朱有鹏&gt;</h1><h2 id="第一节-4-1-内存这个大话题。"><a href="#第一节-4-1-内存这个大话题。" class="headerlink" title="第一节    4.1.内存这个大话题。"></a>第一节    4.1.内存这个大话题。</h2><h3 id="4-1-1-程序运行为什么需要内存-1"><a href="#4-1-1-程序运行为什么需要内存-1" class="headerlink" title="4.1.1.程序运行为什么需要内存 1"></a>4.1.1.程序运行为什么需要内存 1</h3><h4 id="4-1-1-1、计算机程序运行的目的"><a href="#4-1-1-1、计算机程序运行的目的" class="headerlink" title="4.1.1.1、计算机程序运行的目的"></a>4.1.1.1、计算机程序运行的目的</h4><p>计算机为什么需要编程？编程已经很多年了，已经写了很多程序，为什么还需要另外写程序？计算机有这个新的目的是为了去运行到底为什么？<br>程序的目的为了去运行，程序运行是为了得到一定的结果。计算机就是用来计算的，所有的计算机程序其实都是在做计算。计算计算计算数据。<br>所以计算机程序中很重要的部分就是数据。<br><code>计算机程序 = 代码 + 数据</code>，就是说 代码 + 数据 （经过运行后） = 结果。</p><p>从宏观来理解，代码就是动作，就是加工数据的动作；数据就是数字就是代码加工的东西。<br>那么可以得到结论：程序运行的目的不外乎2个：结果、过程。</p><p>用函数类类比：函数的形参就是加工的数据（函数还需要一些临时数据，就是局部变量），函数本体就是就是代码，函数的返回值就是结果，函数体的执行过程就是过程。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这个函数的执行就是为了得到结果</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这个函数的执行重在过程（重点在过程中的printf）返回值不需要。</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这个函数又重结果又重过程。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-1-2、计算机程序运行过程"><a href="#4-1-1-2、计算机程序运行过程" class="headerlink" title="4.1.1.2、计算机程序运行过程"></a>4.1.1.2、计算机程序运行过程</h4><p>计算机程序的运行过程，其实就是程序中很多个函数相续运行的过程。程序是由很多个函数组成的，程序的本质就是函数。函数的本质是加工数据的动作。</p><h4 id="4-1-1-3、冯诺依曼结构和哈佛结构"><a href="#4-1-1-3、冯诺依曼结构和哈佛结构" class="headerlink" title="4.1.1.3、冯诺依曼结构和哈佛结构"></a>4.1.1.3、冯诺依曼结构和哈佛结构</h4><p><code>冯诺依曼结构：数据和代码放在一起。</code><br><code>哈佛结构：      数据和代码分开存在。</code><br>什么是代码：  函数。<br>什么是数据：  全局变量、局部变量。            </p><p>在s5pv210中运行Linux系统上，运行应用程序时：这时所有的应用程序的代码和数据都是DRAM，<br>所以这种结构就是冯诺依曼结构：在单片机中，我们把程序代码烧写到flash（norflash）中，然后程序在flash中原地运行，<br>程序中所涉及到的数据（全局变量、局部变量）不能放在flash中，必须放在RAM（SRAM）中，这种就叫哈佛结构。            </p><h4 id="4-1-1-4、动态内存DRAM和静态内存SRAM"><a href="#4-1-1-4、动态内存DRAM和静态内存SRAM" class="headerlink" title="4.1.1.4、动态内存DRAM和静态内存SRAM"></a>4.1.1.4、动态内存DRAM和静态内存SRAM</h4><p><code>DRAM是动态内存，SRAM是静态内存</code>，详细细节自己百度</p><h4 id="4-1-1-5、总结：为什么需要内存呢"><a href="#4-1-1-5、总结：为什么需要内存呢" class="headerlink" title="4.1.1.5、总结：为什么需要内存呢"></a>4.1.1.5、总结：为什么需要内存呢</h4><p>内存是用来储存可变数据的，数据在程序中表现为全局变量、局部变量（在gcc中，其实常量也是储存在内存中的）（单片机中大部分，<code>常量是储存在flash中的，也就是在代码段</code>），对我们来说非常重要，对程序运行更是本质相关。</p><p>所以内存对程序来说几乎是本质需求，越简单的程序需要越少内存，而庞大复杂的程序需要更多的内存。内存管理是我们写程序时很重要的话题。<br>我们之前学过的了解过的很多程序的关键其实都是为了内存，比如说数据结构（数据结构是研究数据如何组织的，数据放在内存中）和算法（算法是为了用更优秀更有效的方法来加工数据，既然跟数据有关就离不开内存）。</p><h4 id="4-1-1-6、深入思考：如何管理内存（无os时，有os时）"><a href="#4-1-1-6、深入思考：如何管理内存（无os时，有os时）" class="headerlink" title="4.1.1.6、深入思考：如何管理内存（无os时，有os时）"></a>4.1.1.6、深入思考：如何管理内存（无os时，有os时）</h4><p>对于计算机来说，内存容量越大则可能性越大，所以大家都希望自己电脑内存更大。<br>我们写程序时，如何管理内存？如果管理不善，可能会造成程序运行消耗过多内存，这样迟早内存都被你这个程序吃光了，当没有内存时程序就会奔溃。所以内存对程序来说是一种资源，所以管理内存对程序来说是从一个重要技术和话题。</p><p><strong>先从操作系统角度来讲：</strong><br>操作系统掌握所有的硬件内存，因为内存很大，所以操作系统把内存分成一个一个的页面（其实就是一块，一般4kb），然后以页面为单位来管理。<br>页面内用更细小的方式来以字节单位管理。操作系统内存管理的原理非常麻烦、非常复杂、非常不人性化。那么对我们这些使用操作系统的人来说，其实不需要了解这些细节。操作系统为我们提供了内存管理的一些接口，我们只需要用API即可管理内存。<br>比如说在C语言中使用malloc free这些接口来管理内存。</p><p><strong>没有操作系统时：</strong>在没有操作系统（其实就是裸机程序）中，程序需要直接操作内存，编程者需要自己计算内存的使用和安排。<br>如果编程者不小心把内存用错了，错误结果需要自己承担。            </p><p><strong>再从语言角度来讲：</strong>不同的语言提供了不同的操作内存接口。<br>比如汇编：根本没有任何内存管理，内存管理全靠程序员自己，汇编中操作内存直接使用内存地址（比如 0xd0020010），非常麻烦：<br>比如C语言：C语言中编译器帮我们管理直接内存地址，我们都是通过编译器提供的变量名等来访问内存的，操作系统下如果需要大块内存，可以通过API（mallocfree）来访问系统内存。裸机程序中需要大块的内存需要自己来定义数组来解决。</p><p><strong>比如c++语言：</strong>c++语言对内存的使用进一步封装。我们可以用new来创建对象（其实就是为对象分配内存），然后使用完了用deldete来删除对象（其实就是释放内存）。<br>所以c++语言对内存的管理比c要高级一些，容易一些，但是c++中内存的管理还是靠程序员自己来做。<br>如果程序员new了一个对象，但是完了忘记deldete就会造成这个对象占用的内存不能释放，这就是内存泄漏。</p><p><strong>java/c#等语言：</strong>这些语言不直接操作内存，而是通过虚拟机来操作内存。这样虚拟机作为我们程序员的代理，来帮我们处理内存的释放工作。<br>如果我的程序申请了内存，忘记了释放，虚拟机帮我们释放内存。听起来视乎c#/ava等语言比c/c++有优势，但是这个虚拟机回收内存是需要一定的代价的。<br>所以语言没有好坏，只有适应不适用。当我们程序对性能非常在乎的时候（操作系统内核）就会用c/c++语言；当我们对开发程序的速度非常在乎的时候，就会用java/C#语言。        </p><p>​                            </p><h3 id="4-1-2-程序运行为什么需要内存-2"><a href="#4-1-2-程序运行为什么需要内存-2" class="headerlink" title="4.1.2.程序运行为什么需要内存 2"></a>4.1.2.程序运行为什么需要内存 2</h3><p>同上：</p><h3 id="4-1-3-位、字节、半字、字的概念和内存位宽"><a href="#4-1-3-位、字节、半字、字的概念和内存位宽" class="headerlink" title="4.1.3.位、字节、半字、字的概念和内存位宽"></a>4.1.3.位、字节、半字、字的概念和内存位宽</h3><h4 id="4-1-3-1-什么是内存？（硬件和逻辑两个角度）"><a href="#4-1-3-1-什么是内存？（硬件和逻辑两个角度）" class="headerlink" title="4.1.3.1.什么是内存？（硬件和逻辑两个角度）"></a>4.1.3.1.什么是内存？（硬件和逻辑两个角度）</h4><p><strong>从硬件角度：</strong>内存实际上是电脑的一个配件（一般叫内存条）。<br>根据不同的硬件实现的原理分为SRAM和DRAM（DRAM又有好多代，比如更早的SDRAM，后来DDR1、DDR2、…LPDDR）。                </p><p><strong>从逻辑角度：</strong>内存是这样一种东西，它可以随机访问（随机访问的意思是只要给一个地址，就可以访问这个内存地址）、并且可以读写（当然了逻辑上也可以限制其为只读者只写）；内存在编译中天然是用来存放变量的（就是因为有了内存，C语言才能定义变量，C语言中的一个变量，实际就对应内存中的一个单元）。</p><h4 id="4-1-3-2-内存的逻辑抽象图（内存的编程模型）内存"><a href="#4-1-3-2-内存的逻辑抽象图（内存的编程模型）内存" class="headerlink" title="4.1.3.2.内存的逻辑抽象图（内存的编程模型）内存"></a>4.1.3.2.内存的逻辑抽象图（内存的编程模型）内存</h4><p><strong>从逻辑角度上讲：</strong>内存实际上是由无数个内存单元组成的，每个单元格有一个固定的地址叫内存地址，这个地址和这个内存单元唯一对应且永久绑定。<br>以大楼来类比内存是最合适的。逻辑上的内存就好像是一栋大楼，内存的单元格就好像大楼中的一个个小房间，每个单元格地址就好像一个个小房间的房间号。<br>内存中储存内容就好像住在房间中的人一样。</p><p><strong>逻辑上讲</strong>：内存可以无限大（因为数学上的编号永远可以增加，无尽头）。但是现实中，实际内存是有限制的，比如32位的系统（32系统指定是32位数据线，一般地址也是32位，这个地址32位决定内存做32位二进制，逻辑上大小为2的32次方）内存限制就为4G。<br>实际上32位系统中可以用的内存小于4G的（比如32位CPU装32位windows，实际上内存只有512M）。            </p><h4 id="4-1-3-2-位和字节"><a href="#4-1-3-2-位和字节" class="headerlink" title="4.1.3.2.位和字节"></a>4.1.3.2.位和字节</h4><p>内存单元的大小单位有4个：<code>位（1bit）、字节（8bit）、半字（一般是16bit）、字（一般是32bit）</code>。<br>在所以计算机，所以的机器中（不管16、32、64位系统），<code>永远都是1bit，字节永远是8bit。</code>        </p><h4 id="4-1-3-4-字和半字"><a href="#4-1-3-4-字和半字" class="headerlink" title="4.1.3.4.字和半字"></a>4.1.3.4.字和半字</h4><p>历史上曾经出现过16位、32位、64位系统三种，而且操作系统还有windoes、Linux、ios、等很多，所以很多的概率在历史上曾经被混乱的定义过。<br>建议大家对字、半字、双字这些概念不要详细区分，只要知道这些单位具体有多少位是依赖平台的。<br>实际工作中每种平台先去搞清楚这些平台的定义（字是多少位，半字永远是字的一半、双字永远是字的2倍大小）。                </p><p>编程时一般用不到字这个概念，那我们区分这个概念主要是因为有些文档中会用到这些概念，如果不区分可能对你程序的误解。<br>在Linux + ARM 这个硬件平台上（我们嵌入式核心课的所有课程中），字是32位的。</p><h4 id="4-1-3-5-内存位宽（硬件和逻辑两个角度）"><a href="#4-1-3-5-内存位宽（硬件和逻辑两个角度）" class="headerlink" title="4.1.3.5.内存位宽（硬件和逻辑两个角度）"></a>4.1.3.5.内存位宽（硬件和逻辑两个角度）</h4><p><strong>从硬件角度讲：</strong>硬件内存的实现本身是有宽度的，也就是说有些内存条就是8位的，而有些就是16位的。<br>那么需要强调的是内存芯片之间是可以并联的，可以通过并联即使8位的内存芯片也可以做出来16位或32位的硬件内存。</p><p><strong>从逻辑角度讲：</strong>内存位宽在逻辑上是任意的，甚至逻辑上存在位宽是24位的内存（但是实际上这种硬件是买不到的，也没有实际意义）。<br>从逻辑角度来讲不管内存位宽是多少，我就直接操作即可，对我的操作不构成影响。但是因为你的操作不是纯逻辑而是需要硬件去执行的，所以不能为所欲为，<br>所以我们实际的很多操作都是受限于硬件的特性的。譬如24位的内存逻辑上和32位的内存没有任何区别，但实际硬件都是32位的，都要按照32位硬件的特性和限制来干活。</p><h3 id="4-1-4-内存编址和寻址、内存对齐"><a href="#4-1-4-内存编址和寻址、内存对齐" class="headerlink" title="4.1.4.内存编址和寻址、内存对齐"></a>4.1.4.内存编址和寻址、内存对齐</h3><h4 id="4-1-4-1、内存编址方法"><a href="#4-1-4-1、内存编址方法" class="headerlink" title="4.1.4.1、内存编址方法"></a>4.1.4.1、内存编址方法</h4><p>内存在逻辑上就是一个一个格子，这些格子可以用来装东西（里面装的东西就是内存中存储的数），每个格子有一个编号，这个编号就是内存地址，这个内存地址（一个数）和这个格子的空间（实质上是一个空间）是一一对应永久绑定的。这就是内存编址的方法。<br>在程序运行时，计算机CPU实际只认识内存地址，而不关心这个地址所代表的空间在哪里，怎么分布这些实体问题。因为硬件设计保证了按照这个地址就一定能找到这个格子，所以说内存单元的2个概念：<code>地址和空间是内存单元的两个方面。</code>        </p><h4 id="4-1-4-2、关键：内存编址是以字节为单位的"><a href="#4-1-4-2、关键：内存编址是以字节为单位的" class="headerlink" title="4.1.4.2、关键：内存编址是以字节为单位的"></a>4.1.4.2、关键：内存编址是以字节为单位的</h4><p>我随便给一个数字（7），然后说这个数是一个内存地址，然后问你这个地址对应空间多大？<br>这个大小是固定的，就是一个字节（8bit）。</p><p>如果把内存比喻一栋大楼，那么这个楼的一个一个内存格子，这个格子的大小是固定的8bit，就好像这个大楼里面所有的房间户型是一样的。        </p><h4 id="4-1-4-3、内存和数据类型的关系"><a href="#4-1-4-3、内存和数据类型的关系" class="headerlink" title="4.1.4.3、内存和数据类型的关系"></a>4.1.4.3、内存和数据类型的关系</h4><p><code>C语言中基本数据类型有： char short int long float double 。</code><br>int 整型（整数类型，这个整就体现它和CPU本身的数据位宽是一样的）比如32位的CPU，整型就是32位，int就是32位。<br><strong>数据类型和内存关系在于:</strong><br>数据类型是来定义变量的，而这些变量需要存储、运算在内存中。所以说数据类型必须和内存相匹配才能获得最好性能，否则可能不工作或者效率低下。</p><p><code>在32位系统中定义变量最好用int，因为这样效率高</code>，原因就在于32位系统本身配合内存也是32位，这样的硬件配置天生适合定义32位int类型变量，效率最高。    ***<br>也能定义8位的char类型变量或者16位short类型变量，但是实际上访问效率不高。</p><p>在很多32位环境下，我们实际定义boll类型变量（实际只需要1个bit就够了）都是用int来实现boll的。也就是说我们定义一个boll b1时，编译器实际帮我们分配了32位的内存来储存这个boll变量b1，编译器实际上浪费了31位内存，但是好处是效率高。</p><p>问题：实际编程时要以内存为大还是运行效率为重？答案是不定的，看具体情况。<br>很多年前，内存很贵，那时写代码以省内存为主。现在随着半导体的发展内存变得便宜，现在的机器都是高配，不在乎省一点内存，而效率和用户体验变成了关键。<br><code>所以现在写程序以效率为重。</code>                </p><h4 id="4-1-4-4、内存对齐"><a href="#4-1-4-4、内存对齐" class="headerlink" title="4.1.4.4、内存对齐"></a>4.1.4.4、内存对齐</h4><p>在c中 int a; 定义一个int 类型变量，在内存中必须分配4字节来储存这个a。有那么2种不同内存分配思路和策略：<br>第一种： 0 1 2 3                                        //对齐访问<br>第二种： 1 2 3 4    或者 2 3 4 5    或者 3 4 5 6         //非对齐访问<br>内存的对齐访问不是逻辑的问题，是硬件的问题。从硬件角度来说，32位内存它 0 1 2 3 四个单元本身逻辑上就有相关性，这4字节组合起来当作一个 int 硬件上合适，效率就高。</p><p><code>对齐访问很对齐硬件，所以效率高；非对齐访问因为和硬件本身不搭配，所以效率不高。</code>（因为兼容性的问题，一般硬件也都提供非对齐访问，但是效率要低很多。）    </p><h4 id="4-1-4-5、从内存编址看数组的意义。"><a href="#4-1-4-5、从内存编址看数组的意义。" class="headerlink" title="4.1.4.5、从内存编址看数组的意义。"></a>4.1.4.5、从内存编址看数组的意义。</h4><p>0 1 2 3定义的是32位系统的地址，不是数组。<br>元素    {0 1 2 3}        括号里面的就是元素<br>首地址     0 1 2 3         0 就是数组首地址</p><h3 id="4-1-5-C语言如何操作内存"><a href="#4-1-5-C语言如何操作内存" class="headerlink" title="4.1.5.C语言如何操作内存"></a>4.1.5.C语言如何操作内存</h3><h4 id="4-1-5-1、C语言对内存地址的封装（用变量名来访问内存、数据类型的含义、函数名的含义）"><a href="#4-1-5-1、C语言对内存地址的封装（用变量名来访问内存、数据类型的含义、函数名的含义）" class="headerlink" title="4.1.5.1、C语言对内存地址的封装（用变量名来访问内存、数据类型的含义、函数名的含义）"></a>4.1.5.1、C语言对内存地址的封装（用变量名来访问内存、数据类型的含义、函数名的含义）</h4><p>比如在C语言中 int a; a = 5; a += 4;            //a == 9</p><p><strong>结合内存来解析C语言语句的本质：</strong>        ***<br>int a;    //编译器帮我们申请了一个int类型的内存格子（长度是4字节，地址只有编译器知道，地址是确定的），并且把符号a和这个格子。<br>a = 5;    //编译器发现我们要给a赋值，就会把这个值5丢到符号a绑定的那个内存格子中。<br>a += 4;    //编译器发现我们要给a赋值，a += a 等效于 a = a + 4; 编译器会把a原理的值读出来，然后给这个值 +4 ,再把之后的和写入a里面去。</p><p>C语言中数据类型的本质含义是：表示一个内存格子长度和解析方法。    </p><p>数据类型决定长度含义：我们一个内存地址（0x30000000），本来这个地址只代表1字节的长度，但是实际上我们可以通过给他一个类型(int)，让他有了长度(4)，这样这个代表内存地址的数字（0x30000000）就表示从这个数字（0x30000000）开头的连续的n(4)个字节的内存格子了 （ 0x30000000 + 0x30000001 + 0x30000002 + 0x30000003）。            </p><p>数据类型决定解析方法的含义：比如我们有一个内存地址（0x30000001），我们可以通过给这个内存地址不同的类型指定这个内存单元格子中二进制数的解析方法。<br>比如我 (int)0x30000000,含义就是（ 0x30000000 + 0x30000001 + 0x30000002 + 0x30000003 ）这4个字节连起来共同储存的是一个int型数据；那么我（float）0x30000000，含义就是（ 0x30000000 + 0x30000001 + 0x30000002 + 0x30000003 ）这4个字节连起来共同储存的是一个float型数据。<br>之前讲的一个很重要的概念：<code>内存单元格子的编址单位是字节。</code><br>(int *)0;<br>(float *)0;<br>(short)0;<br>(char)0;</p><p>int a;        //int a;时编译器会自动给a分配一个内存地址，比如说是0x12345678<br>(int *)a;    //等价于(int *)0x12345678<br>(float *)a;</p><p>C语言中，函数就是一段代码的封装。函数名的实质就是这一段代码的首地址。所以说函数名的本质也是一个内存地址。    </p><h4 id="4-1-5-2、用指针来间接访问内存"><a href="#4-1-5-2、用指针来间接访问内存" class="headerlink" title="4.1.5.2、用指针来间接访问内存"></a>4.1.5.2、用指针来间接访问内存</h4><p>关于这个类型，（不管是普通变量类型 int float 等，还是指针类型 int *     float * 等），只要记住：<br>类型只是对后面数字或者符号（代表的是内存地址）所表征的内存一种长度规定和解析方法规定而已。</p><p>C语言中的指针，全名叫指针变量，指针变量和普通变量没有任何区别。比如数 int a 和 int *p 其实没有任何区别，a和b都代表一个内存地址（比如是0x20000000），但是这个内存地（0x20000000）的长度和解析方法不同。<br>a是 int 型所以a的长度是4字节，解析方法是按照int的规定来的；p是int *类型，所以长度是4字节，解析方法是int *来规定的（0x20000000开头的连续4字节存储了1个地址，这个地址所代表的内存单元存放的是一个int类型的数）。                                    </p><h4 id="4-1-5-3、指针类型的含义"><a href="#4-1-5-3、指针类型的含义" class="headerlink" title="4.1.5.3、指针类型的含义"></a>4.1.5.3、指针类型的含义</h4><p>同上：</p><h4 id="4-1-5-4、用数组来管理内存"><a href="#4-1-5-4、用数组来管理内存" class="headerlink" title="4.1.5.4、用数组来管理内存"></a>4.1.5.4、用数组来管理内存</h4><p>数组管理内存和变量其实没有本质的区别，只是符号的解析方法不同。（普通变量、数组、指针变量其实都没有本质差别，都是对内存地址的解析，只是解析的方法不一样）。</p><p>int a;        //编译器分配4字节给a，并且把首地址和符号a绑定起来。<br>int b[10];    //编译器分配40个字节长度给b，并且把首元素    </p><p>数组中第一个元素（a[0]）就称为首元素：每一个元素元素类型都是int，所以长度都是4，其中第一个字节就称为首地址；首元素a[0]的首地址就称为首元素的首地址。        </p><h3 id="4-1-6-内存管理之结构体"><a href="#4-1-6-内存管理之结构体" class="headerlink" title="4.1.6.内存管理之结构体"></a>4.1.6.内存管理之结构体</h3><h4 id="4-1-6-1、数据结构这门学问的意义。"><a href="#4-1-6-1、数据结构这门学问的意义。" class="headerlink" title="4.1.6.1、数据结构这门学问的意义。"></a>4.1.6.1、数据结构这门学问的意义。</h4><p>简单来说，就是研究数据如何组织（在内存中排布），如何加工的学问。</p><h4 id="4-1-6-2、最简单的数据结构：数组"><a href="#4-1-6-2、最简单的数据结构：数组" class="headerlink" title="4.1.6.2、最简单的数据结构：数组"></a>4.1.6.2、最简单的数据结构：数组</h4><p>为什么要有数组？因为程序中有好多个类型相同、意义相关的变量需要管理，这时如果用单独变量来做程序看起来比较乱，用数组来会更好的管理。<br>比如 int ages[20];</p><h4 id="4-1-6-3、数组的优劣和缺陷。"><a href="#4-1-6-3、数组的优劣和缺陷。" class="headerlink" title="4.1.6.3、数组的优劣和缺陷。"></a>4.1.6.3、数组的优劣和缺陷。</h4><p><code>优势：数组比较简单，访问用下标来访问，可以随机访问。 缺陷：数组元素类型必须相同；数组的大小必须在定义时给出一但确定大小不能改变。</code>        </p><h4 id="4-1-6-4、结构体隆重登场。"><a href="#4-1-6-4、结构体隆重登场。" class="headerlink" title="4.1.6.4、结构体隆重登场。"></a>4.1.6.4、结构体隆重登场。</h4><p>结构体发明处理就是为了解决数组第一个缺陷；所有元素必须相同<br>我们要管理3个学生的年龄（int类型），怎么办。<br>第一种解法：数组    int ages[3];<br>第二种解法：结构体。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> ages<span class="token punctuation">{</span>    <span class="token keyword">int</span> age1<span class="token punctuation">;</span>    <span class="token keyword">int</span> age2<span class="token punctuation">;</span>    <span class="token keyword">int</span> age3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> ages age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析总结:在这个示例中，数组比结构体好。但是不能得出结论数组比结构体好，在元素类型不同时只能使用结构体而不能使用数组。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> pople<span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">int</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//身高</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> ages age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-6-5、题外话：结构体内嵌指针实现面向对象。"><a href="#4-1-6-5、题外话：结构体内嵌指针实现面向对象。" class="headerlink" title="4.1.6.5、题外话：结构体内嵌指针实现面向对象。"></a>4.1.6.5、题外话：结构体内嵌指针实现面向对象。</h4><p><strong>面向过程与面向对象。</strong><br>总的来说：C语言是面向过程的，但是C语言写出的Linux系统是面向对象的。<br>非面向对象语言，不一定不能实现面向对象的代码。只是说用面向对象的语言来实现面向对象更加简单一些，直观一些，无脑一些。</p><p>用c++、java 等面向对象的语言来实现面向对象简单一些，因为语言本身帮我们做了很多事情；但是c来实现面向对象很麻烦，看起来也不容易理解，这是为什么大多数学过C语言却看不懂Linux内核代码原因。            </p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sbrk<span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//普通变量</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//函数指针，指向void (*pFunc)(void)这类的函数。</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用这样结构体就可以实现面向对象。<br>这样包含了函数指针结构体，类似于面向对象中的class，结构体中变量类似于class的成员变量，结构体中的函数指针类似于class中成员方法。</p><h3 id="4-1-7-内存管理之栈"><a href="#4-1-7-内存管理之栈" class="headerlink" title="4.1.7.内存管理之栈"></a>4.1.7.内存管理之栈</h3><h4 id="4-1-7-1、什么是栈。"><a href="#4-1-7-1、什么是栈。" class="headerlink" title="4.1.7.1、什么是栈。"></a>4.1.7.1、什么是栈。</h4><p><code>栈是一种数据结构，C语言中使用栈来保存局部变量。栈是被发明出来管理内存的。    </code>    </p><h4 id="4-1-7-2、栈管理内存的特点（小内存，自动化）。"><a href="#4-1-7-2、栈管理内存的特点（小内存，自动化）。" class="headerlink" title="4.1.7.2、栈管理内存的特点（小内存，自动化）。"></a>4.1.7.2、栈管理内存的特点（小内存，自动化）。</h4><p><strong>栈的特点：</strong><code>先进后出</code>    FILO     first in last out    栈入口即出口，只有一个口，另一口是堵死的。所以先进去必须后出来。<br><strong>队列特点：</strong><code>先进先出</code>    FIFP     first in first out    队列入口和出口都有，必须从入口进去，出口出来，先进去必须先出来，否则就堵住后面的。    </p><h4 id="4-1-7-3、栈的应用举例：局部变量。"><a href="#4-1-7-3、栈的应用举例：局部变量。" class="headerlink" title="4.1.7.3、栈的应用举例：局部变量。"></a>4.1.7.3、栈的应用举例：局部变量。</h4><p>C语言中的局部变量就是栈实现的，我们定义一个局部变量（int a），编译器会在栈中分配一段空间（4字节）给这个局部变量用（分配时栈顶指针会移动给出空间，给局部变量a用的意思就是，将这4字节的栈内存的内存地址和我们定义的局部变量a给关联起来）。</p><p><strong>注意：</strong>这里栈指针移动和内存分配是自动的（栈自己完成，不用我们写代码去操作），然后等我们函数退出时，局部变量要消亡。对应的栈的操作是弹栈（出栈）。<br>出栈时也是栈顶指针移动将栈空间中与a关联的那4个字节空间释放。这个动作也是自动的，也不用写代码干预。</p><p><strong>栈的优点：</strong><code>栈管理内存，好处是方便，分配和最后回收都不要程序员操心，C语言自动完成。</code>        ***</p><p><strong>分析一个细节：</strong>C语言中，定义局部变量未初始化，值是随机的，为什么？<br>定义局部变量，其实就是栈中通过移动栈指针来给程序提供一个内存空间和这个局部变量名绑定。因为这段内存空间在栈上，而栈内存是反复使用的（脏的，上次用完没清零的），所以说使用栈来实现的局部变量定义时如果不显示初始化，值就是脏的。如果你显示初始化怎么样？<br>C语言是通过一个小手段来实现局部变量的初始化。<br>int a = 15;        //局部变量定义时初始化<br>C语言编译器自动转成：<br>int a;            //局部变量定义<br>a = 15;            //普通赋值语句                                                </p><h4 id="4-1-7-4、栈的约束（预定栈的大小不灵活，怕溢出）。"><a href="#4-1-7-4、栈的约束（预定栈的大小不灵活，怕溢出）。" class="headerlink" title="4.1.7.4、栈的约束（预定栈的大小不灵活，怕溢出）。"></a>4.1.7.4、栈的约束（预定栈的大小不灵活，怕溢出）。</h4><p><code>首先栈是有长度的。所以栈内存不太灵活，如果太小怕溢出，太大怕浪费内存。</code>（这个特点有点像数组）        ***<br>栈的溢出危害很大，一定要避免。所以我们在C语言中定义局部变量时，不能太多，太大（不能定义局部变量如：int a[10000]；使用递归解决问题时一定要注意收敛）。</p><h3 id="4-1-8-内存管理之堆"><a href="#4-1-8-内存管理之堆" class="headerlink" title="4.1.8.内存管理之堆"></a>4.1.8.内存管理之堆</h3><h4 id="4-1-8-1、什么是堆。"><a href="#4-1-8-1、什么是堆。" class="headerlink" title="4.1.8.1、什么是堆。"></a>4.1.8.1、什么是堆。</h4><p>堆（heap）是一种内存管理方式。内存管理对操作系统来说是很复杂的事情，因为内存容量很大，其次内存需求在时间和大小块没有规律（操作系统运行着几十，几百，几千个进程随时都会申请或者释放内存，申请需求在时间和大小块上没有随意）。</p><p><code>堆这种内存管理方式特点就是自由（随时申请，释放；大小块随意）。</code>堆内存是操作系统规划给堆管理器（操作系统中的一段代码，属于操作系统的内存管理单元）来管理，然后向使用者（用户进程）提供API（malloc和free）来使用堆内存。</p><p>我们什么时候需要使用堆内存？<br>需要内存容量比较大，需要反复使用和释放时，需要反复使用及释放时，很多数据结构（如链表）的表现都要使用堆内存。<br>int a[10000]；</p><h4 id="4-1-8-2、堆管理内存的特点（大块内存、手工分配-amp-使用-amp-释放）。"><a href="#4-1-8-2、堆管理内存的特点（大块内存、手工分配-amp-使用-amp-释放）。" class="headerlink" title="4.1.8.2、堆管理内存的特点（大块内存、手工分配&amp;使用&amp;释放）。"></a>4.1.8.2、堆管理内存的特点（大块内存、手工分配&amp;使用&amp;释放）。</h4><p><strong>特点一：</strong>容量不限（常规使用的需求容量都能满足）</p><p><strong>特点二：</strong>申请和释放都需要手工进行（需要程序员写代码明确申请malloc及释放free）。如果程序员申请内存使用未释放，这段内存就丢失了（在堆管理器的记录中，这段内存任然属于你这个进程，但是进程自己又以为这段内存已经不用了，再用的时候又去申请新的内存块，这就叫吃内存），称为内存泄漏。在c/c++语言中，内存泄漏是严重的程序bug，这也是别人认为java/c#等语言比c/c++优秀的地方。        </p><h4 id="4-1-8-3、C语言操作堆内存的接口（malloc-free）。"><a href="#4-1-8-3、C语言操作堆内存的接口（malloc-free）。" class="headerlink" title="4.1.8.3、C语言操作堆内存的接口（malloc free）。"></a>4.1.8.3、C语言操作堆内存的接口（malloc free）。</h4><p><code>堆内存释放时简单，直接free释放即可。    void free(void *ptr);</code><br><code>堆申请内存时，有3个可选择的类似功能的函数：malloc，calloc，realloc</code><br>void *malloc(size_t size);<br>void *calloc(size_t nmemb, size_t size);    //nmemb个单元，每个单元size字节<br>void *realloc(void *ptr, size_t size);        //改变原来申请空间大小的。</p><p>比如申请10个int元素的内存：<br>malloc(40);        malloc(10*sizeof(int));<br>calloc(10,4);    calloc(10,sizeof(int));        </p><p>数组在定义时必须同时给出数组元素个数（数组大小），而且一旦定义再无法更改。在Java等高级语言中，一些语法技巧可以更改数组大小，但其实这只是一种障眼法。<br>他的工作原理是：先重新创建一个新的数组大小为要更改的数组，然后将原数组的所有元素复制进新的数组，然后释放原数组，最后返回新的数组给用户。</p><p>堆内存申请时必须给定大小，然后一旦申请完成大小不变，如果要变只能通过realloc接口。realloc的实现原理类似于java中的可变大小数组的方式。                        </p><h4 id="4-1-8-4、堆的优势和劣势（管理大块内存、灵活、容易内存泄漏）。"><a href="#4-1-8-4、堆的优势和劣势（管理大块内存、灵活、容易内存泄漏）。" class="headerlink" title="4.1.8.4、堆的优势和劣势（管理大块内存、灵活、容易内存泄漏）。"></a>4.1.8.4、堆的优势和劣势（管理大块内存、灵活、容易内存泄漏）。</h4><p><strong>优势：</strong>灵活。<br><strong>劣势：</strong>需要程序员去处理工作细节，所以容易出错，严重依赖于程序员的水平。</p><h3 id="4-1-9-复杂数据结构"><a href="#4-1-9-复杂数据结构" class="headerlink" title="4.1.9.复杂数据结构"></a>4.1.9.复杂数据结构</h3><h4 id="4-1-9-1、链表、哈希表、二叉树、图等。"><a href="#4-1-9-1、链表、哈希表、二叉树、图等。" class="headerlink" title="4.1.9.1、链表、哈希表、二叉树、图等。"></a>4.1.9.1、链表、哈希表、二叉树、图等。</h4><p><strong>链表是最重要的：</strong>链表在Linux中使用特别多，在驱动和应用在编写时都需要使用链表，所以链表必须掌握。<br><strong>掌握到：</strong>会自己定义结构体来实现链表，会写链表的节点插入（前插、后插）、节点删除、节点查找、节点遍历。（至于像逆序这些很少用，掌握了前面那几个这个也不难）。</p><p>哈希表不是很常用，一般不需要自己实现，而直接使用别人实现的哈希表比较多。对我们来说重要明白哈希表原理，从而知道哈希表，当看到别人用了哈希表就要明白别人为什么要用哈希表，合适不合适？有没有更好的选择。</p><p>二叉树、图。对于这些复杂数据结构、不要太当回事。这些复制数据结构用到的概率很小（在嵌入式开发中），其实这些数据结构被发明出来就是为了解决特定的问题的，你不处理特定问题根本用不到这些，没必要去研究。                            </p><h4 id="4-1-9-2、为什么需要复杂的数据结构。"><a href="#4-1-9-2、为什么需要复杂的数据结构。" class="headerlink" title="4.1.9.2、为什么需要复杂的数据结构。"></a>4.1.9.2、为什么需要复杂的数据结构。</h4><p>因为现实中的问题是多种多样的，问题的复杂度不同需要解决的问题的算法和数据结构也不同的。<br>所以当你处理什么复杂度的问题，就去研究针对性解决问题的数据结构和算法；当你没有遇到此类问题（或者你工作的领域根本跟这个就没关系）时就不要管了。    </p><h4 id="4-1-9-3、数据结构和算法的关系。"><a href="#4-1-9-3、数据结构和算法的关系。" class="headerlink" title="4.1.9.3、数据结构和算法的关系。"></a>4.1.9.3、数据结构和算法的关系。</h4><p>数据结构的发明都是为了配合一定的算法；算法是为了处理具体问题，算法的实现依赖于相应的数据结构。</p><p>当前我们说的算法和纯数学是不同的（算法是基于数学，大学计算机系研究生博士很多本科都是数学相关专业的），因为计算机算法要求以数学为指导，并且结合计算机本身的特点来改进，最终实现一个在计算机上可以运行的算法（意思就是用代码可以表示的算法）。</p><h4 id="4-1-9-4、应该怎样学习这部分。"><a href="#4-1-9-4、应该怎样学习这部分。" class="headerlink" title="4.1.9.4、应该怎样学习这部分。"></a>4.1.9.4、应该怎样学习这部分。</h4><p><strong>从上面表述大家应该明白以下事实：</strong><br>(1)、数据结构和算法是相辅相成的，要一起研究。<br>(2)、数据结构和算法来说不全是重点，不要盲目的跑去研究这个。<br>(3)、一般在实际应用中，实现数据结构和算法的人和使用数据结构和算法的人是分开的。实际中一部分人的工作就是研究数据结构算法，并且试图用代码来实现这些算法（表现为库）；<br>                        其他做真正工作的人要做的就是理解、明白这些算法和数据结构的意义、优劣、特征、然后在合适的时候选择合适的数据结构和算法来解决自己碰到的实际问题。</p><p><strong>例子：</strong>Linux内核在字符设备驱动管理时，使用了哈希表（hash table，散列表）。所以字符设备驱动的很多特点都和哈希表的特点有关。            </p><h2 id="第二节-4-2-C语言位操作。"><a href="#第二节-4-2-C语言位操作。" class="headerlink" title="第二节    4.2.C语言位操作。"></a>第二节    4.2.C语言位操作。</h2><h2 id="第三节-4-3-指针才是C的精髓。"><a href="#第三节-4-3-指针才是C的精髓。" class="headerlink" title="第三节    4.3.指针才是C的精髓。"></a>第三节    4.3.指针才是C的精髓。</h2><h2 id="第四节-4-4-C语言复杂表达式与指针高级应用。"><a href="#第四节-4-4-C语言复杂表达式与指针高级应用。" class="headerlink" title="第四节    4.4.C语言复杂表达式与指针高级应用。"></a>第四节    4.4.C语言复杂表达式与指针高级应用。</h2><h2 id="第五节-4-5-数组-amp-字符串-amp-结构体-amp-共用体-amp-枚举。"><a href="#第五节-4-5-数组-amp-字符串-amp-结构体-amp-共用体-amp-枚举。" class="headerlink" title="第五节    4.5.数组&amp;字符串&amp;结构体&amp;共用体&amp;枚举。"></a>第五节    4.5.数组&amp;字符串&amp;结构体&amp;共用体&amp;枚举。</h2><h2 id="第六节-4-6-C语言宏定义与预处理、函数和函数库。"><a href="#第六节-4-6-C语言宏定义与预处理、函数和函数库。" class="headerlink" title="第六节    4.6.C语言宏定义与预处理、函数和函数库。"></a>第六节    4.6.C语言宏定义与预处理、函数和函数库。</h2><h2 id="第七节-4-7-存储类-amp-作用域-amp-生命周期-amp-链接属性。"><a href="#第七节-4-7-存储类-amp-作用域-amp-生命周期-amp-链接属性。" class="headerlink" title="第七节    4.7.存储类&amp;作用域&amp;生命周期&amp;链接属性。"></a>第七节    4.7.存储类&amp;作用域&amp;生命周期&amp;链接属性。</h2><h2 id="第八节-4-8-一些杂散但值得讨论的问题。"><a href="#第八节-4-8-一些杂散但值得讨论的问题。" class="headerlink" title="第八节    4.8.一些杂散但值得讨论的问题。"></a>第八节    4.8.一些杂散但值得讨论的问题。</h2><h2 id="第九节-4-9-链表-amp-状态机与多线程。"><a href="#第九节-4-9-链表-amp-状态机与多线程。" class="headerlink" title="第九节    4.9.链表&amp;状态机与多线程。"></a>第九节    4.9.链表&amp;状态机与多线程。</h2><h2 id="第十节-4-10-番外篇-程序员和编译器之间的暧昧。"><a href="#第十节-4-10-番外篇-程序员和编译器之间的暧昧。" class="headerlink" title="第十节    4.10.番外篇-程序员和编译器之间的暧昧。"></a>第十节    4.10.番外篇-程序员和编译器之间的暧昧。</h2>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4.LinuxC语言高级专题 &lt;朱有鹏&gt;</title>
      <link href="/2021/11/01/di-0-bu-fen-qian-yan-ji-chu-yu-ke/"/>
      <url>/2021/11/01/di-0-bu-fen-qian-yan-ji-chu-yu-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="第-0-部分、-前言-基础预科"><a href="#第-0-部分、-前言-基础预科" class="headerlink" title="第 0 部分、 前言-基础预科"></a>第 0 部分、 前言-基础预科</h1><h2 id="0-1-嵌入式软件工程师完全学习指南"><a href="#0-1-嵌入式软件工程师完全学习指南" class="headerlink" title="0.1.嵌入式软件工程师完全学习指南"></a>0.1.嵌入式软件工程师完全学习指南</h2><h3 id="0-1-1-课程大纲"><a href="#0-1-1-课程大纲" class="headerlink" title="0.1.1.课程大纲"></a>0.1.1.课程大纲</h3><h3 id="0-1-2-为什么要学习嵌入式"><a href="#0-1-2-为什么要学习嵌入式" class="headerlink" title="0.1.2.为什么要学习嵌入式"></a>0.1.2.为什么要学习嵌入式</h3><h3 id="0-1-3-什么人适合学嵌入式"><a href="#0-1-3-什么人适合学嵌入式" class="headerlink" title="0.1.3 什么人适合学嵌入式"></a>0.1.3 什么人适合学嵌入式</h3><h3 id="0-1-4-完整的嵌入式学习路线图"><a href="#0-1-4-完整的嵌入式学习路线图" class="headerlink" title="0.1.4.完整的嵌入式学习路线图"></a>0.1.4.完整的嵌入式学习路线图</h3><h3 id="0-1-5-嵌入式与物联网、云计算、大数据的关系"><a href="#0-1-5-嵌入式与物联网、云计算、大数据的关系" class="headerlink" title="0.1.5.嵌入式与物联网、云计算、大数据的关系"></a>0.1.5.嵌入式与物联网、云计算、大数据的关系</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="0-2-朱老师带你零基础学-Linux"><a href="#0-2-朱老师带你零基础学-Linux" class="headerlink" title="0.2.朱老师带你零基础学 Linux"></a>0.2.朱老师带你零基础学 Linux</h2><h3 id="0-2-1-当前主流操作系统及其特点"><a href="#0-2-1-当前主流操作系统及其特点" class="headerlink" title="0.2.1.当前主流操作系统及其特点"></a>0.2.1.当前主流操作系统及其特点</h3><p>windows：    傻瓜式、易学习、工资低。<br>Linux：         Linux认为每个用户都是专业人士，操作麻烦，学习比较难，<br>                        免费的，开源的，性能好，可移植好，好的设计理念。<br>Android：    移动操作系统，Android基于Linux。<br>iOS：         很优秀，创造性，走钢丝。<br>harmonyOS:    智能终端操作系统。</p><p>嵌入式操作系统：Linux + winCE<br>当前：消费电子Android，工业Linux</p><h3 id="0-2-2-多机开发：双系统与虚拟机"><a href="#0-2-2-多机开发：双系统与虚拟机" class="headerlink" title="0.2.2.多机开发：双系统与虚拟机"></a>0.2.2.多机开发：双系统与虚拟机</h3><p>开发嵌入式程序，需要Linux环境。但因为windows中有很多好用的软件，如notepad++    sourceinsight，所以需要windows。<br>第一种：双系统。<br>第二种：虚拟机，方便，损失性能，与真机微小差异<br>第三种：两台电脑。<br>现实中：<br>个人开发者：虚拟机<br>大公司：服务器+客户端</p><h3 id="0-2-3-搭建-linux-开发环境"><a href="#0-2-3-搭建-linux-开发环境" class="headerlink" title="0.2.3.搭建 linux 开发环境"></a>0.2.3.搭建 linux 开发环境</h3><p>虚拟机软件+Linux系统<br>虚拟机软件：就是一个单纯在windows中运行的软件，跟office，360没有本质区别，运行之后相当于一台虚拟机电脑。</p><h3 id="0-2-4-隐藏文件与非隐藏文件"><a href="#0-2-4-隐藏文件与非隐藏文件" class="headerlink" title="0.2.4.隐藏文件与非隐藏文件"></a>0.2.4.隐藏文件与非隐藏文件</h3><p>windows中：文件隐藏与不隐藏在文件属性设置。<br>            Linux中：    Linux下隐藏文件是点“.”开头的，跟文件属性无关。查看隐藏文件：ls -a 显示隐藏文件。</p><h3 id="0-2-5-相对路径与绝对路径"><a href="#0-2-5-相对路径与绝对路径" class="headerlink" title="0.2.5.相对路径与绝对路径"></a>0.2.5.相对路径与绝对路径</h3><h3 id="0-2-6-简介-linux-内核-and-发行版"><a href="#0-2-6-简介-linux-内核-and-发行版" class="headerlink" title="0.2.6.简介 linux 内核 and 发行版"></a>0.2.6.简介 linux 内核 and 发行版</h3><h3 id="0-2-7-GUI（图形用户界面）和-cmdline（命令行）"><a href="#0-2-7-GUI（图形用户界面）和-cmdline（命令行）" class="headerlink" title="0.2.7.GUI（图形用户界面）和 cmdline（命令行）"></a>0.2.7.GUI（图形用户界面）和 cmdline（命令行）</h3><h3 id="0-2-8-linux-常用命令-1：ls"><a href="#0-2-8-linux-常用命令-1：ls" class="headerlink" title="0.2.8.linux 常用命令 1：ls"></a>0.2.8.linux 常用命令 1：ls</h3><h3 id="0-2-9-linux-常用命令-2：cd"><a href="#0-2-9-linux-常用命令-2：cd" class="headerlink" title="0.2.9.linux 常用命令 2：cd"></a>0.2.9.linux 常用命令 2：cd</h3><h3 id="0-2-10-linux-常用命令-3：pwd-mkdir-mv-touch-cp"><a href="#0-2-10-linux-常用命令-3：pwd-mkdir-mv-touch-cp" class="headerlink" title="0.2.10.linux 常用命令 3：pwd_mkdir_mv_touch_cp"></a>0.2.10.linux 常用命令 3：pwd_mkdir_mv_touch_cp</h3><h3 id="0-2-11-linux-常用命令-4：rm-cat-rmdir"><a href="#0-2-11-linux-常用命令-4：rm-cat-rmdir" class="headerlink" title="0.2.11.linux 常用命令 4：rm_cat_rmdir"></a>0.2.11.linux 常用命令 4：rm_cat_rmdir</h3><h3 id="0-2-12-linux-常用命令-5：ln（软连接与硬连接）"><a href="#0-2-12-linux-常用命令-5：ln（软连接与硬连接）" class="headerlink" title="0.2.12.linux 常用命令 5：ln（软连接与硬连接）"></a>0.2.12.linux 常用命令 5：ln（软连接与硬连接）</h3><h3 id="0-2-13-linux-中的文件类型标记方法"><a href="#0-2-13-linux-中的文件类型标记方法" class="headerlink" title="0.2.13.linux 中的文件类型标记方法"></a>0.2.13.linux 中的文件类型标记方法</h3><h3 id="0-2-14-linux-常用命令-6：man"><a href="#0-2-14-linux-常用命令-6：man" class="headerlink" title="0.2.14.linux 常用命令 6：man"></a>0.2.14.linux 常用命令 6：man</h3><h3 id="0-2-15-linux-常用命令-7：apt-get"><a href="#0-2-15-linux-常用命令-7：apt-get" class="headerlink" title="0.2.15.linux 常用命令 7：apt-get"></a>0.2.15.linux 常用命令 7：apt-get</h3><h3 id="0-2-16-什么是编辑器-vi-和-vim-的关系"><a href="#0-2-16-什么是编辑器-vi-和-vim-的关系" class="headerlink" title="0.2.16.什么是编辑器_vi 和 vim 的关系"></a>0.2.16.什么是编辑器_vi 和 vim 的关系</h3><h3 id="0-2-17-vi-的两种工作模式"><a href="#0-2-17-vi-的两种工作模式" class="headerlink" title="0.2.17.vi 的两种工作模式"></a>0.2.17.vi 的两种工作模式</h3><h3 id="0-2-18-vi-高级应用：查找-快速切换行-设置显示行号"><a href="#0-2-18-vi-高级应用：查找-快速切换行-设置显示行号" class="headerlink" title="0.2.18.vi 高级应用：查找_快速切换行_设置显示行号"></a>0.2.18.vi 高级应用：查找_快速切换行_设置显示行号</h3><h3 id="0-2-19-linux-命令行中一些符号的含义"><a href="#0-2-19-linux-命令行中一些符号的含义" class="headerlink" title="0.2.19.linux 命令行中一些符号的含义"></a>0.2.19.linux 命令行中一些符号的含义</h3><h3 id="0-2-20-vi-高级应用：行删除-行复制粘贴"><a href="#0-2-20-vi-高级应用：行删除-行复制粘贴" class="headerlink" title="0.2.20.vi 高级应用：行删除_行复制粘贴"></a>0.2.20.vi 高级应用：行删除_行复制粘贴</h3><h3 id="0-2-21-普通用户与特权用户-su-命令切换用户"><a href="#0-2-21-普通用户与特权用户-su-命令切换用户" class="headerlink" title="0.2.21.普通用户与特权用户 su 命令切换用户"></a>0.2.21.普通用户与特权用户 su 命令切换用户</h3><h3 id="0-2-22-rwx-与-linux-中权限表示"><a href="#0-2-22-rwx-与-linux-中权限表示" class="headerlink" title="0.2.22.rwx 与 linux 中权限表示"></a>0.2.22.rwx 与 linux 中权限表示</h3><h3 id="0-2-23-ubuntu-中使用-sudo-暂时获取-root-权限"><a href="#0-2-23-ubuntu-中使用-sudo-暂时获取-root-权限" class="headerlink" title="0.2.23.ubuntu 中使用 sudo 暂时获取 root 权限"></a>0.2.23.ubuntu 中使用 sudo 暂时获取 root 权限</h3><h3 id="0-2-24-linux-高阶命令-1：find"><a href="#0-2-24-linux-高阶命令-1：find" class="headerlink" title="0.2.24.linux 高阶命令 1：find"></a>0.2.24.linux 高阶命令 1：find</h3><h3 id="0-2-25-linux-高阶命令-2：grep-which-whereis"><a href="#0-2-25-linux-高阶命令-2：grep-which-whereis" class="headerlink" title="0.2.25.linux 高阶命令 2：grep_which_whereis"></a>0.2.25.linux 高阶命令 2：grep_which_whereis</h3><h3 id="0-2-26-linux-高阶命令-3：uname-关机重启命令"><a href="#0-2-26-linux-高阶命令-3：uname-关机重启命令" class="headerlink" title="0.2.26.linux 高阶命令 3：uname_关机重启命令"></a>0.2.26.linux 高阶命令 3：uname_关机重启命令</h3><h3 id="0-2-27-linux-高阶命令-4：tree-mount-df"><a href="#0-2-27-linux-高阶命令-4：tree-mount-df" class="headerlink" title="0.2.27.linux 高阶命令 4：tree_mount_df"></a>0.2.27.linux 高阶命令 4：tree_mount_df</h3><h3 id="0-2-28-linux-高阶命令-5：用户管理-权限管理"><a href="#0-2-28-linux-高阶命令-5：用户管理-权限管理" class="headerlink" title="0.2.28.linux 高阶命令 5：用户管理_权限管理"></a>0.2.28.linux 高阶命令 5：用户管理_权限管理</h3><h3 id="0-2-29-其他有可能用到的高阶命令"><a href="#0-2-29-其他有可能用到的高阶命令" class="headerlink" title="0.2.29.其他有可能用到的高阶命令"></a>0.2.29.其他有可能用到的高阶命令</h3><h3 id="0-2-30-补充-虚拟机上网的问题"><a href="#0-2-30-补充-虚拟机上网的问题" class="headerlink" title="0.2.30.补充-虚拟机上网的问题"></a>0.2.30.补充-虚拟机上网的问题</h3><h2 id="0-3-嵌入式-linux-C-编程基础"><a href="#0-3-嵌入式-linux-C-编程基础" class="headerlink" title="0.3.嵌入式 linux C 编程基础"></a>0.3.嵌入式 linux C 编程基础</h2><p>  0.2.1.当前主流操作系统及其特点<br>0.2.2.多机开发：双系统与虚拟机<br>0.2.3.搭建 linux 开发环境<br>0.2.4.隐藏文件与非隐藏文件<br>0.2.5.相对路径与绝对路径<br>0.2.6.简介 linux 内核 and 发行版<br>0.2.7.GUI（图形用户界面）和 cmdline（命令行）<br>0.2.8.linux 常用命令 1：ls<br>0.2.9.linux 常用命令 2：cd<br>0.2.10.linux 常用命令 3：pwd_mkdir_mv_touch_cp<br>0.2.11.linux 常用命令 4：rm_cat_rmdir<br>0.2.12.linux 常用命令 5：ln（软连接与硬连接）<br>0.2.13.linux 中的文件类型标记方法<br>0.2.14.linux 常用命令 6：man<br>0.2.15.linux 常用命令 7：apt-get<br>0.2.16.什么是编辑器_vi 和 vim 的关系<br>0.2.17.vi 的两种工作模式<br>0.2.18.vi 高级应用：查找_快速切换行_设置显示行号<br>0.2.19.linux 命令行中一些符号的含义<br>0.2.20.vi 高级应用：行删除_行复制粘贴<br>0.2.21.普通用户与特权用户 su 命令切换用户<br>0.2.22.rwx 与 linux 中权限表示<br>0.2.23.ubuntu 中使用 sudo 暂时获取 root 权限<br>0.2.24.linux 高阶命令 1：find<br>0.2.25.linux 高阶命令 2：grep_which_whereis<br>0.2.26.linux 高阶命令 3：uname_关机重启命令<br>0.2.27.linux 高阶命令 4：tree_mount_df<br>0.2.28.linux 高阶命令 5：用户管理_权限管理<br>0.2.29.其他有可能用到的高阶命令<br>0.2.30.补充-虚拟机上网的问题  </p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++核心编程</title>
      <link href="/2021/10/27/c-he-xin-bian-cheng/"/>
      <url>/2021/10/27/c-he-xin-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++<code>面向对象</code>编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​    在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p><p>​    <strong>代码区：</strong></p><p>​        存放 CPU 执行的机器指令</p><p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p><p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p>​    <strong>全局区：</strong></p><p>​        全局变量和静态变量存放在此.</p><p>​        全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p><p>​        ==该区域的数据在程序结束后由操作系统释放==.</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//全局变量</span><span class="token keyword">int</span> g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局常量</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//局部变量</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印地址</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_a地址为： "</span> <span class="token operator">&lt;&lt;</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_b地址为： "</span> <span class="token operator">&lt;&lt;</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> s_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> s_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局常量c_g_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局常量c_g_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> c_l_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> c_l_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部常量c_l_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部常量c_l_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/984c9e8bdo6737d5476f1653a9739b15?fid=1789975539-250528-576512834029179&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-U725xXMSaKz5psDE5QZCHqejPJs=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量  和 字符串常量</li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​    <strong>栈区：</strong></p><p>​        由编译器自动分配释放, 存放函数的参数值,局部变量等</p><p>​        注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>堆区：</strong></p><p>​        由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p><p>​        在C++中主要利用new在堆区开辟内存</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​    C++中利用==new==操作符在堆区开辟数据</p><p>​    堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p><p>​    语法：<code> new 数据类型</code></p><p>​    利用new创建的数据，会返回该数据对应的类型的指针</p><p><strong>示例1： 基本语法</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//利用delete释放堆区数据</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：开辟数组</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//堆区开辟数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放数组 delete 后加 []</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int &amp;c;     //错误，引用必须初始化</span>    <span class="token keyword">int</span> <span class="token operator">&amp;</span>c <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一旦初始化后，就不可以更改</span>    c <span class="token operator">=</span> b<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//这是赋值操作，不是更改引用</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c = "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//1. 值传递，形参不会修饰实参</span><span class="token keyword">void</span> <span class="token function">mySwap01</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2. 地址传递，形参会修饰实参</span><span class="token keyword">void</span> <span class="token function">mySwap02</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3. 引用传递，形参会修饰实参</span><span class="token keyword">void</span> <span class="token function">mySwap03</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">mySwap01</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">mySwap02</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">mySwap03</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//返回局部变量引用</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//局部变量存放在四区中的栈区</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回静态变量引用</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态变量,存放在全局区,全局区上的数据在程序结束后系统释放</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不能返回局部变量的引用</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref = "</span> <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第一次结果正确,是因为编译器做了保留</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref = "</span> <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第二次结果错误,因为a的内存己经释放</span>    <span class="token comment" spellcheck="true">//如果函数做左值，那么必须返回引用</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref2 <span class="token operator">=</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref2 = "</span> <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//:10</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref2 = "</span> <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//:10</span>    <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref2 = "</span> <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//:1000</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref2 = "</span> <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//:1000</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//发现是引用，转换为 int* const ref = &amp;a;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref<span class="token punctuation">)</span><span class="token punctuation">{</span>    ref <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ref是引用，转换为*ref = 100</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> a<span class="token punctuation">;</span>     ref <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref:"</span> <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：C++推荐用引用技术，因为语法方便，引用本质是<code>指针常量</code>，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//引用使用的场景，通常用来修饰形参，放在误操作</span><span class="token keyword">void</span> <span class="token function">showValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//v += 10;</span>    cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span>    <span class="token comment" spellcheck="true">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ref = 100;  //加入const后不可以修改变量</span>    cout <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//函数中利用常量引用防止误操作修改实参</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">showValue</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）{}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意事项</span><span class="token comment" spellcheck="true">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span><span class="token comment" spellcheck="true">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//:50</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//:120</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型){}</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//函数占位参数 ，占位参数也可以有默认参数</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is func"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//占位参数必须填补</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//函数重载需要函数都在同一个作用域下</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func 的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (int a) 的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (double a)的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (int a ,double b) 的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a <span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (double a ,int b)的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数返回值不可以作为函数重载条件</span><span class="token comment" spellcheck="true">//int func(double a, int b)</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; "func (double a ,int b)的调用！" &lt;&lt; endl;</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//函数重载注意事项</span><span class="token comment" spellcheck="true">//1、引用作为重载条件</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (int &amp;a) 调用 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (const int &amp;a) 调用 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2、函数重载碰到函数默认参数</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2(int a, int b = 10) 调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2(int a) 调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//调用无const</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用有const</span>    <span class="token comment" spellcheck="true">//func2(10); //碰到默认参数产生歧义，需要避免，报错</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：<code>封装、继承、多态</code></p><p>C++认为<code>万事万物都皆为对象</code>，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>​    人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​    车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p><p>​    具有相同性质的<code>对象</code>，我们可以抽象称为<code>类</code>，人属于人类，车属于车类</p><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><p>​    在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> <code>class 类名{   访问权限： 属性  / 行为  };</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//圆周率</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1、封装的意义</span><span class="token comment" spellcheck="true">//将属性和行为作为一个整体，用来表现生活中的事物</span><span class="token comment" spellcheck="true">//封装一个圆类，求圆的周长</span><span class="token comment" spellcheck="true">//class代表设计一个类，后面跟着的是类名</span><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//访问权限  公共的权限</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">int</span> m_r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//半径</span>    <span class="token comment" spellcheck="true">//行为</span>    <span class="token comment" spellcheck="true">//获取到圆的周长</span>    <span class="token keyword">double</span> <span class="token function">calculateZC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2 * pi  * r</span>        <span class="token comment" spellcheck="true">//获取圆的周长</span>        <span class="token keyword">return</span>  <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> m_r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过圆类，创建圆的对象</span>    <span class="token comment" spellcheck="true">// c1就是一个具体的圆</span>    Circle c1<span class="token punctuation">;</span>    c1<span class="token punctuation">.</span>m_r <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给圆对象的半径 进行赋值操作</span>    <span class="token comment" spellcheck="true">//2 * pi * 10 = = 62.8</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"圆的周长为： "</span> <span class="token operator">&lt;&lt;</span> c1<span class="token punctuation">.</span><span class="token function">calculateZC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//学生类</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setID</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">showStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span> m_name <span class="token operator">&lt;&lt;</span> <span class="token string">" ID:"</span> <span class="token operator">&lt;&lt;</span> m_id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    string m_name<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student stu<span class="token punctuation">;</span>    stu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"德玛西亚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span><span class="token function">setID</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span><span class="token function">showStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限  </li><li>protected 保护权限</li><li>private      私有权限</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//三种权限</span><span class="token comment" spellcheck="true">//公共权限  public     类内可以访问  类外可以访问</span><span class="token comment" spellcheck="true">//保护权限  protected  类内可以访问  类外不可以访问</span><span class="token comment" spellcheck="true">//私有权限  private    类内可以访问  类外不可以访问</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//姓名  公共权限</span><span class="token keyword">public</span><span class="token operator">:</span>    string m_Name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//汽车  保护权限</span><span class="token keyword">protected</span><span class="token operator">:</span>    string m_Car<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//银行卡密码  私有权限</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_Password<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_Name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>        m_Car <span class="token operator">=</span> <span class="token string">"拖拉机"</span><span class="token punctuation">;</span>        m_Password <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p<span class="token punctuation">;</span>    p<span class="token punctuation">.</span>m_Name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//p.m_Car = "奔驰";  //保护权限类外访问不到</span>    <span class="token comment" spellcheck="true">//p.m_Password = 123; //私有权限类外访问不到</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  m_A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认是私有权限</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> C2<span class="token punctuation">{</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//默认是公共权限</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    C1 c1<span class="token punctuation">;</span>    c1<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误，访问权限是私有</span>    C2 c2<span class="token punctuation">;</span>    c2<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正确，访问权限是公共</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//姓名设置可读可写</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取年龄 </span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置年龄</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">></span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"你个老妖精!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//情人设置为只写</span>    <span class="token keyword">void</span> <span class="token function">setLover</span><span class="token punctuation">(</span>string lover<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_Lover <span class="token operator">=</span> lover<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string m_Name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可读可写  姓名</span>        <span class="token keyword">int</span> m_Age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只读  年龄</span>    string m_Lover<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只写  情人</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//姓名设置</span>    p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//年龄设置</span>    p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//情人设置</span>    p<span class="token punctuation">.</span><span class="token function">setLover</span><span class="token punctuation">(</span><span class="token string">"苍井"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "情人： " &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/8d65c2579hbf5e96e2fa118928ea0aa9?fid=1789975539-250528-197692011109981&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-PT+yei01C6kvPbr4nWNR8PO4OCg=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/3e1aee13fr4257f8c8afe487e9ada947?fid=1789975539-250528-660614780180010&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-FPjopDk0SKWzNjJytK8q5jea2QY=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li> 生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li> C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p>​    一个对象或者变量没有初始状态，对其使用后果是未知</p><p>​    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名(){}</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名(){}</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person的构造函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person的析构函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><p>​    按参数分为： 有参构造和无参构造</p><p>​    按类型分为： 普通构造和拷贝构造</p><p>三种调用方式：</p><p>​    括号法</p><p>​    显示法</p><p>​    隐式转换法</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//1、构造函数分类</span><span class="token comment" spellcheck="true">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span><span class="token comment" spellcheck="true">// 按照类型分类分为 普通构造和拷贝构造</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//无参（默认）构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//拷贝构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2、构造函数的调用</span><span class="token comment" spellcheck="true">//调用无参构造函数</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用无参构造函数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用有参的构造函数</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.1  括号法，常用</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span>    <span class="token comment" spellcheck="true">//Person p2();</span>    <span class="token comment" spellcheck="true">//2.2 显式法</span>    Person p2 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Person p3 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span>    <span class="token comment" spellcheck="true">//2.3 隐式转换法</span>    Person p4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Person p4 = Person(10); </span>    Person p5 <span class="token operator">=</span> p4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Person p5 = Person(p4); </span>    <span class="token comment" spellcheck="true">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span>    <span class="token comment" spellcheck="true">//Person p5(p4);</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//test02();</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        mAge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        mAge <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        mAge <span class="token operator">=</span> p<span class="token punctuation">.</span>mAge<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数在释放内存之前调用</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person <span class="token function">man</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p对象已经创建完毕</span>    Person <span class="token function">newman</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用拷贝构造函数</span>    Person newman2 <span class="token operator">=</span> man<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拷贝构造</span>    <span class="token comment" spellcheck="true">//Person newman3;</span>    <span class="token comment" spellcheck="true">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2. 值传递的方式给函数参数传值</span><span class="token comment" spellcheck="true">//相当于Person p1 = p;</span><span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无参构造函数</span>    <span class="token function">doWork</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3. 以值方式返回局部对象</span>Person <span class="token function">doWork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person p1<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person p <span class="token operator">=</span> <span class="token function">doWork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//test01();</span>    <span class="token comment" spellcheck="true">//test02();</span>    <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li></ul><ul><li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li></ul><p>示例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//无参（默认）构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//拷贝构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为： "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span>    Person p1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时如果用户自己没有提供默认构造，会出错</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用户提供的有参</span>    Person <span class="token function">p3</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时如果用户没有提供拷贝构造，编译器会提供</span>    <span class="token comment" spellcheck="true">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span>    Person p4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时如果用户自己没有提供默认构造，会出错</span>    Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时如果用户自己没有提供有参，会出错</span>    Person <span class="token function">p6</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用户自己提供拷贝构造</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//无参（默认）构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age <span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        m_age <span class="token operator">=</span> age<span class="token punctuation">;</span>        m_height <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//拷贝构造函数  </span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span>        m_age <span class="token operator">=</span> p<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>        m_height <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>m_height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_height <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_age<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> m_height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄： "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高： "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p1<span class="token punctuation">.</span>m_height <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄： "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高： "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p2<span class="token punctuation">.</span>m_height <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... {}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">////传统方式初始化</span>    <span class="token comment" spellcheck="true">//Person(int a, int b, int c) {</span>    <span class="token comment" spellcheck="true">//    m_A = a;</span>    <span class="token comment" spellcheck="true">//    m_B = b;</span>    <span class="token comment" spellcheck="true">//    m_C = c;</span>    <span class="token comment" spellcheck="true">//}</span>    <span class="token comment" spellcheck="true">//初始化列表方式初始化</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_B</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_C</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">PrintPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mB:"</span> <span class="token operator">&lt;&lt;</span> m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mC:"</span> <span class="token operator">&lt;&lt;</span> m_C <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_B<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">PrintPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    A a；<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Phone</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_PhoneName <span class="token operator">=</span> name<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Phone构造"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Phone析构"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string m_PhoneName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//初始化列表可以告诉编译器调用哪一个构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> string pName<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_Name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_Phone</span><span class="token punctuation">(</span>pName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person构造"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person析构"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 使用"</span> <span class="token operator">&lt;&lt;</span> m_Phone<span class="token punctuation">.</span>m_PhoneName <span class="token operator">&lt;&lt;</span> <span class="token string">" 牌手机! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string m_Name<span class="token punctuation">;</span>    Phone m_Phone<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当类中成员是其他类对象时，我们称该成员为 对象成员</span>    <span class="token comment" spellcheck="true">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span>    <span class="token comment" spellcheck="true">//析构顺序与构造相反</span>    Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"张三"</span> <span class="token punctuation">,</span> <span class="token string">"苹果X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li> 所有对象共享同一份数据</li><li> 在编译阶段分配内存</li><li> 类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li> 所有对象共享同一个函数</li><li> 静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例1 ：</strong>静态成员变量</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态成员变量</span>    <span class="token comment" spellcheck="true">//静态成员变量特点：</span>    <span class="token comment" spellcheck="true">//1 在编译阶段分配内存</span>    <span class="token comment" spellcheck="true">//2 类内声明，类外初始化</span>    <span class="token comment" spellcheck="true">//3 所有对象共享同一份数据</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态成员变量也是有访问权限的</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token operator">::</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token operator">::</span>m_B <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态成员变量两种访问方式</span>    <span class="token comment" spellcheck="true">//1、通过对象</span>    Person p1<span class="token punctuation">;</span>    p1<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1.m_A = "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Person p2<span class="token punctuation">;</span>    p2<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1.m_A = "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//共享同一份数据</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2.m_A = "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、通过类名</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m_A = "</span> <span class="token operator">&lt;&lt;</span> Person<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "m_B = " &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>静态成员函数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//静态成员函数特点：</span>    <span class="token comment" spellcheck="true">//1 程序共享一个函数</span>    <span class="token comment" spellcheck="true">//2 静态成员函数只能访问静态成员变量</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//m_B = 100; //错误，不可以访问非静态成员变量</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//静态成员变量</span>    <span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// </span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//静态成员函数也是有访问权限的</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token operator">::</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态成员变量两种访问方式</span>    <span class="token comment" spellcheck="true">//1、通过对象</span>    Person p1<span class="token punctuation">;</span>    p1<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、通过类名</span>    Person<span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Person::func2(); //私有权限访问不到</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//非静态成员变量占对象空间</span>    <span class="token keyword">int</span> mA<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态成员变量不占对象空间</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> mB<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//函数也不占对象空间，所有函数共享一个函数实例</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>mA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态成员函数也不占对象空间</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li> 当形参和成员变量同名时，可用this指针来区分</li><li> 在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、当形参和成员变量同名时，可用this指针来区分</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Person<span class="token operator">&amp;</span> <span class="token function">PersonAddPerson</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回对象本身</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1.age = "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p2<span class="token punctuation">.</span><span class="token function">PersonAddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2.age = "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//空指针访问成员函数</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">ShowClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我是Person类!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">ShowPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> mAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">ShowClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空指针，可以调用成员函数</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">ShowPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//但是如果成员函数中用到了this指针，就不可以了</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_A <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_B <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//this指针的本质是一个指针常量，指针的指向不可修改</span>    <span class="token comment" spellcheck="true">//如果想让指针指向的值也不可以修改，需要声明常函数</span>    <span class="token keyword">void</span> <span class="token function">ShowPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//const Type* const pointer;</span>        <span class="token comment" spellcheck="true">//this = NULL; //不能修改指针的指向 Person* const this;</span>        <span class="token comment" spellcheck="true">//this->mA = 100; //但是this指针指向的对象的数据是可以修改的</span>        <span class="token comment" spellcheck="true">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_B <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//mA = 10000;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span>    <span class="token keyword">mutable</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可修改 可变的</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//const修饰对象  常对象</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> Person person<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//常量对象  </span>    cout <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span>    person<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//但是常对象可以修改mutable修饰成员变量</span>    <span class="token comment" spellcheck="true">//常对象访问成员函数</span>    person<span class="token punctuation">.</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//常对象不能调用const的函数</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  ==friend==</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">goodGay</span><span class="token punctuation">(</span>Building <span class="token operator">*</span> building<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_SittingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    string m_SittingRoom<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//客厅</span><span class="token keyword">private</span><span class="token operator">:</span>    string m_BedRoom<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//卧室</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">goodGay</span><span class="token punctuation">(</span>Building <span class="token operator">*</span> building<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问： "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-</span><span class="token operator">></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问： "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-</span><span class="token operator">></span>m_BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Building b<span class="token punctuation">;</span>    <span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">goodGay</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Building <span class="token operator">*</span>building<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">goodGay</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    string m_SittingRoom<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//客厅</span><span class="token keyword">private</span><span class="token operator">:</span>    string m_BedRoom<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//卧室</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Building<span class="token operator">::</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_SittingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>goodGay<span class="token operator">::</span><span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    building <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> goodGay<span class="token operator">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-</span><span class="token operator">></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-</span><span class="token operator">></span>m_BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    goodGay gg<span class="token punctuation">;</span>    gg<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">goodGay</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span>    <span class="token keyword">void</span> <span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    Building <span class="token operator">*</span>building<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> goodGay<span class="token operator">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    string m_SittingRoom<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//客厅</span><span class="token keyword">private</span><span class="token operator">:</span>    string m_BedRoom<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//卧室</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Building<span class="token operator">::</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_SittingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>goodGay<span class="token operator">::</span><span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    building <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> goodGay<span class="token operator">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-</span><span class="token operator">></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-</span><span class="token operator">></span>m_BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> goodGay<span class="token operator">::</span><span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-</span><span class="token operator">></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "好基友正在访问" &lt;&lt; building->m_BedRoom &lt;&lt; endl;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    goodGay  gg<span class="token punctuation">;</span>    gg<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_A <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_B <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员函数实现 + 号运算符重载</span>    Person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person temp<span class="token punctuation">;</span>        temp<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_A <span class="token operator">+</span> p<span class="token punctuation">.</span>m_A<span class="token punctuation">;</span>        temp<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_B <span class="token operator">+</span> p<span class="token punctuation">.</span>m_B<span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局函数实现 + 号运算符重载</span><span class="token comment" spellcheck="true">//Person operator+(const Person&amp; p1, const Person&amp; p2) {</span><span class="token comment" spellcheck="true">//    Person temp(0, 0);</span><span class="token comment" spellcheck="true">//    temp.m_A = p1.m_A + p2.m_A;</span><span class="token comment" spellcheck="true">//    temp.m_B = p1.m_B + p2.m_B;</span><span class="token comment" spellcheck="true">//    return temp;</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//运算符重载 可以发生函数重载 </span>Person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p2<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Person temp<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>m_A <span class="token operator">=</span> p2<span class="token punctuation">.</span>m_A <span class="token operator">+</span> val<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>m_B <span class="token operator">=</span> p2<span class="token punctuation">.</span>m_B <span class="token operator">+</span> val<span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员函数方式</span>    Person p3 <span class="token operator">=</span> p2 <span class="token operator">+</span> p1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//相当于 p2.operaor+(p1)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">" mB:"</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">.</span>m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Person p4 <span class="token operator">=</span> p3 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//相当于 operator+(p3,10)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> p4<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">" mB:"</span> <span class="token operator">&lt;&lt;</span> p4<span class="token punctuation">.</span>m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote><blockquote><p>总结2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_A <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_B <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span>    <span class="token comment" spellcheck="true">//void operator&lt;&lt;(Person&amp; p){</span>    <span class="token comment" spellcheck="true">//}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局函数实现左移重载</span><span class="token comment" spellcheck="true">//ostream对象只能有一个</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    out <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">" b:"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_B<span class="token punctuation">;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> p1 <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//链式编程</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyInteger</span> <span class="token punctuation">{</span>    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> MyInteger myint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_Num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//前置++</span>    MyInteger<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先++</span>        m_Num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//再返回</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置++</span>    MyInteger <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先返回</span>        MyInteger temp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span>        m_Num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_Num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> MyInteger myint<span class="token punctuation">)</span> <span class="token punctuation">{</span>    out <span class="token operator">&lt;&lt;</span> myint<span class="token punctuation">.</span>m_Num<span class="token punctuation">;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//前置++ 先++ 再返回</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyInteger myInt<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//后置++ 先返回 再++</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyInteger myInt<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> myInt<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//test02();</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator=, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将年龄数据开辟到堆区</span>        m_Age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重载赋值运算符 </span>    Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_Age<span class="token punctuation">;</span>            m_Age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//编译器提供的代码是浅拷贝</span>        <span class="token comment" spellcheck="true">//m_Age = p.m_Age;</span>        <span class="token comment" spellcheck="true">//提供深拷贝 解决浅拷贝的问题</span>        m_Age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回自身</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_Age<span class="token punctuation">;</span>            m_Age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//年龄的指针</span>    <span class="token keyword">int</span> <span class="token operator">*</span>m_Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p3 <span class="token operator">=</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//赋值操作</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄为："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p1<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p2<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p3的年龄为："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p3<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int a = 10;</span>    <span class="token comment" spellcheck="true">//int b = 20;</span>    <span class="token comment" spellcheck="true">//int c = 30;</span>    <span class="token comment" spellcheck="true">//c = b = a;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Name <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Age <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Name <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Age <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    string m_Name<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//int a = 0;</span>    <span class="token comment" spellcheck="true">//int b = 0;</span>    Person <span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyPrint</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string text<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> text <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//重载的（）操作符 也称为仿函数</span>    MyPrint myFunc<span class="token punctuation">;</span>    <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyAdd</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    MyAdd add<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret = "</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//匿名对象调用  </span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"MyAdd()(100,100) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">MyAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/05ba8549bhb353f169343fde9d7c09d8?fid=1789975539-250528-443520461479407&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-sJK/l6nrS0V2C81/3B61s4YpTNA=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Java页面</span><span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java,Python,C++...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"JAVA学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Python页面</span><span class="token keyword">class</span> <span class="token class-name">Python</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java,Python,C++...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Python学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//C++页面</span><span class="token keyword">class</span> <span class="token class-name">CPP</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java,Python,C++...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Java页面</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Java ja<span class="token punctuation">;</span>    ja<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ja<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ja<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ja<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Python页面</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Python下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Python py<span class="token punctuation">;</span>    py<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    py<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    py<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    py<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//C++页面</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    CPP cp<span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承实现：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//公共页面</span><span class="token keyword">class</span> <span class="token class-name">BasePage</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java,Python,C++...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Java页面</span><span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token operator">:</span> <span class="token keyword">public</span> BasePage<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"JAVA学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Python页面</span><span class="token keyword">class</span> <span class="token class-name">Python</span> <span class="token operator">:</span> <span class="token keyword">public</span> BasePage<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Python学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//C++页面</span><span class="token keyword">class</span> <span class="token class-name">CPP</span> <span class="token operator">:</span> <span class="token keyword">public</span> BasePage<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Java页面</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Java ja<span class="token punctuation">;</span>    ja<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ja<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ja<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ja<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Python页面</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Python下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Python py<span class="token punctuation">;</span>    py<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    py<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    py<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    py<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//C++页面</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    CPP cp<span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>继承的好处：==可以减少重复的代码==</p><p>class A : public B; </p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="https://thumbnail0.baidupcs.com/thumbnail/c0ab3f044mdc35a9f67f7cae706e153c?fid=1789975539-250528-389911216984073&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-3KIta9rae2f8Pxqa4fyyYA6snbA=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base1</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>     <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公共继承</span><span class="token keyword">class</span> <span class="token class-name">Son1</span> <span class="token operator">:</span><span class="token keyword">public</span> Base1<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可访问 public权限</span>        m_B<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可访问 protected权限</span>        <span class="token comment" spellcheck="true">//m_C; //不可访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Son1 s1<span class="token punctuation">;</span>    s1<span class="token punctuation">.</span>m_A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//其他类只能访问到公共权限</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//保护继承</span><span class="token keyword">class</span> <span class="token class-name">Base2</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son2</span><span class="token operator">:</span><span class="token keyword">protected</span> Base2<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可访问 protected权限</span>        m_B<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可访问 protected权限</span>        <span class="token comment" spellcheck="true">//m_C; //不可访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Son2 s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//s.m_A; //不可访问</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//私有继承</span><span class="token keyword">class</span> <span class="token class-name">Base3</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son3</span><span class="token operator">:</span><span class="token keyword">private</span> Base3<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可访问 private权限</span>        m_B<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可访问 private权限</span>        <span class="token comment" spellcheck="true">//m_C; //不可访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GrandSon3</span> <span class="token operator">:</span><span class="token keyword">public</span> Son3<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span>        <span class="token comment" spellcheck="true">//m_A;</span>        <span class="token comment" spellcheck="true">//m_B;</span>        <span class="token comment" spellcheck="true">//m_C;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_C<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//私有成员只是被隐藏了，但是还是会继承下去</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公共继承</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_D<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof Son = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Son<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用工具查看：</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/afb57398am745f98deb548dab56b6533?fid=1789975539-250528-874356390089158&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-7qSDkqKvENWIr2UYj5lbZT/T4Z0=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p><p>效果如下图：</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/49fdf4bcel2d53bf1a0601286ed33bd4?fid=1789975539-250528-271401809099336&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-D1d4NFNWL9+ekeF+t1vBjY7E5sU=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span>    Son s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - func()调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - func(int a)调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span>    <span class="token comment" spellcheck="true">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son - func()调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Son s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son下的m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base下的m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>Base<span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>Base<span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - static void func()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - static void func(int a)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Base<span class="token operator">::</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son - static void func()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Son<span class="token operator">::</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同名成员属性</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过对象访问</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过对象访问： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Son s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son  下 m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base 下 m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过类名访问</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过类名访问： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son  下 m_A = "</span> <span class="token operator">&lt;&lt;</span> Son<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base 下 m_A = "</span> <span class="token operator">&lt;&lt;</span> Son<span class="token operator">::</span>Base<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//同名成员函数</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过对象访问</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过对象访问： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Son s<span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>Base<span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过类名访问： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Son<span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Son<span class="token operator">::</span>Base<span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span>    Son<span class="token operator">::</span>Base<span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//test01();</span>    <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base1</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base2</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base2<span class="token punctuation">,</span> <span class="token keyword">public</span> Base1 <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_C <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>        m_D <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_C<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_D<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多继承容易产生成员同名的情况</span><span class="token comment" spellcheck="true">//通过使用类名作用域可以区分调用哪一个基类的成员</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Son s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof Son = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base1<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base2<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><p>​    两个派生类继承同一个基类</p><p>​    又有某个类同时继承者两个派生类</p><p>​    这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例：</strong></p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/a14cb4976ta8b456007fd23770780c9d?fid=1789975539-250528-788711464538409&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-rhyYmfZC2wsr+VApdDee4y5064w=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承前加virtual关键字后，变为虚继承</span><span class="token comment" spellcheck="true">//此时公共的父类Animal称为虚基类</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token operator">:</span> <span class="token keyword">virtual</span> <span class="token keyword">public</span> Animal <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tuo</span>   <span class="token operator">:</span> <span class="token keyword">virtual</span> <span class="token keyword">public</span> Animal <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SheepTuo</span> <span class="token operator">:</span> <span class="token keyword">public</span> Sheep<span class="token punctuation">,</span> <span class="token keyword">public</span> Tuo <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SheepTuo st<span class="token punctuation">;</span>    st<span class="token punctuation">.</span>Sheep<span class="token operator">::</span>m_Age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span>Tuo<span class="token operator">::</span>m_Age <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.Sheep::m_Age = "</span> <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span>Sheep<span class="token operator">::</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.Tuo::m_Age = "</span> <span class="token operator">&lt;&lt;</span>  st<span class="token punctuation">.</span>Tuo<span class="token operator">::</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.m_Age = "</span> <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//Speak函数就是虚函数</span>    <span class="token comment" spellcheck="true">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"动物在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span><span class="token keyword">public</span> Animal<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小猫在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">:</span><span class="token keyword">public</span> Animal<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小狗在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我们希望传入什么对象，那么就调用什么对象的函数</span><span class="token comment" spellcheck="true">//如果函数地址在编译阶段就能确定，那么静态联编</span><span class="token comment" spellcheck="true">//如果函数地址在运行阶段才能确定，就是动态联编</span><span class="token keyword">void</span> <span class="token function">DoSpeak</span><span class="token punctuation">(</span>Animal <span class="token operator">&amp;</span> animal<span class="token punctuation">)</span><span class="token punctuation">{</span>    animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//多态满足条件： </span><span class="token comment" spellcheck="true">//1、有继承关系</span><span class="token comment" spellcheck="true">//2、子类重写父类中的虚函数</span><span class="token comment" spellcheck="true">//多态使用：</span><span class="token comment" spellcheck="true">//父类指针或引用指向子类对象</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Cat cat<span class="token punctuation">;</span>    <span class="token function">DoSpeak</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>    Dog dog<span class="token punctuation">;</span>    <span class="token function">DoSpeak</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//普通实现</span><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span>string oper<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> m_Num1 <span class="token operator">-</span> m_Num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> m_Num1 <span class="token operator">*</span> m_Num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果要提供新的运算，需要修改源码</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//普通实现测试</span>    Calculator c<span class="token punctuation">;</span>    c<span class="token punctuation">.</span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" - "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" * "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多态实现</span><span class="token comment" spellcheck="true">//抽象计算器类</span><span class="token comment" spellcheck="true">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span><span class="token keyword">class</span> <span class="token class-name">AbstractCalculator</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加法计算器</span><span class="token keyword">class</span> <span class="token class-name">AddCalculator</span> <span class="token operator">:</span><span class="token keyword">public</span> AbstractCalculator<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//减法计算器</span><span class="token keyword">class</span> <span class="token class-name">SubCalculator</span> <span class="token operator">:</span><span class="token keyword">public</span> AbstractCalculator<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Num1 <span class="token operator">-</span> m_Num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//乘法计算器</span><span class="token keyword">class</span> <span class="token class-name">MulCalculator</span> <span class="token operator">:</span><span class="token keyword">public</span> AbstractCalculator<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Num1 <span class="token operator">*</span> m_Num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建加法计算器</span>    AbstractCalculator <span class="token operator">*</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> AddCalculator<span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span> abc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用完了记得销毁</span>    <span class="token comment" spellcheck="true">//创建减法计算器</span>    abc <span class="token operator">=</span> <span class="token keyword">new</span> SubCalculator<span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" - "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span> abc<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建乘法计算器</span>    abc <span class="token operator">=</span> <span class="token keyword">new</span> MulCalculator<span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" * "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span> abc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//test01();</span>    <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为==抽象类==</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//纯虚函数</span>    <span class="token comment" spellcheck="true">//类中只要有一个纯虚函数就称为抽象类</span>    <span class="token comment" spellcheck="true">//抽象类无法实例化对象</span>    <span class="token comment" spellcheck="true">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Base <span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//base = new Base; // 错误，抽象类无法实例化对象</span>    base <span class="token operator">=</span> <span class="token keyword">new</span> Son<span class="token punctuation">;</span>    base<span class="token operator">-</span><span class="token operator">></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得销毁</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/daf8e5f3cu12838eb654112dd3cbc293?fid=1789975539-250528-377012988074886&amp;time=1635577200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-pyKTqPSB8CBNQQKrG5AX9QS/79s=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=101636825182890125&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//抽象制作饮品</span><span class="token keyword">class</span> <span class="token class-name">AbstractDrinking</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//烧水</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//冲泡</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//倒入杯中</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加入辅料</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//规定流程</span>    <span class="token keyword">void</span> <span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//制作咖啡</span><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractDrinking <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//烧水</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮农夫山泉!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//冲泡</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡咖啡!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//倒入杯中</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将咖啡倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//加入辅料</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入牛奶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//制作茶水</span><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractDrinking <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//烧水</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮自来水!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//冲泡</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡茶叶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//倒入杯中</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将茶水倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//加入辅料</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入枸杞!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//业务函数</span><span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span>AbstractDrinking<span class="token operator">*</span> drink<span class="token punctuation">)</span> <span class="token punctuation">{</span>    drink<span class="token operator">-</span><span class="token operator">></span><span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> drink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token keyword">new</span> Coffee<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token keyword">new</span> Tea<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名(){}</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名(){}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//析构函数加上virtual关键字，变成虚析构函数</span>    <span class="token comment" spellcheck="true">//virtual ~Animal()</span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    cout &lt;&lt; "Animal虚析构函数调用！" &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//}</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Animal<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 纯虚析构函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span> <span class="token keyword">public</span> Animal <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        m_Name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>m_Name <span class="token operator">&lt;&lt;</span>  <span class="token string">"小猫在说话!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_Name<span class="token punctuation">;</span>            m_Name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token operator">*</span>m_Name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Animal <span class="token operator">*</span>animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    animal<span class="token operator">-</span><span class="token operator">></span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span>    <span class="token comment" spellcheck="true">//怎么解决？给基类增加一个虚析构函数</span>    <span class="token comment" spellcheck="true">//虚析构函数就是用来解决通过父类指针释放子类对象</span>    <span class="token keyword">delete</span> animal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​    1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p><p>​    2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p><p>​    3. 拥有纯虚析构函数的类也属于抽象类</p><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象CPU类</span><span class="token keyword">class</span> <span class="token class-name">CPU</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//抽象的计算函数</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象显卡类</span><span class="token keyword">class</span> <span class="token class-name">VideoCard</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//抽象的显示函数</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象内存条类</span><span class="token keyword">class</span> <span class="token class-name">Memory</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//抽象的存储函数</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//电脑类</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Computer</span><span class="token punctuation">(</span>CPU <span class="token operator">*</span> cpu<span class="token punctuation">,</span> VideoCard <span class="token operator">*</span> vc<span class="token punctuation">,</span> Memory <span class="token operator">*</span> mem<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>        m_vc <span class="token operator">=</span> vc<span class="token punctuation">;</span>        m_mem <span class="token operator">=</span> mem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提供工作的函数</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//让零件工作起来，调用接口</span>        m_cpu<span class="token operator">-</span><span class="token operator">></span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_vc<span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_mem<span class="token operator">-</span><span class="token operator">></span><span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提供析构函数 释放3个电脑零件</span>    <span class="token operator">~</span><span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放CPU零件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_cpu <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_cpu<span class="token punctuation">;</span>            m_cpu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放显卡零件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_vc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_vc<span class="token punctuation">;</span>            m_vc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放内存条零件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_mem <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_mem<span class="token punctuation">;</span>            m_mem <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    CPU <span class="token operator">*</span> m_cpu<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//CPU的零件指针</span>    VideoCard <span class="token operator">*</span> m_vc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显卡零件指针</span>    Memory <span class="token operator">*</span> m_mem<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内存条零件指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具体厂商</span><span class="token comment" spellcheck="true">//Intel厂商</span><span class="token keyword">class</span> <span class="token class-name">IntelCPU</span> <span class="token operator">:</span><span class="token keyword">public</span> CPU<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的CPU开始计算了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IntelVideoCard</span> <span class="token operator">:</span><span class="token keyword">public</span> VideoCard<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的显卡开始显示了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IntelMemory</span> <span class="token operator">:</span><span class="token keyword">public</span> Memory<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的内存条开始存储了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Lenovo厂商</span><span class="token keyword">class</span> <span class="token class-name">LenovoCPU</span> <span class="token operator">:</span><span class="token keyword">public</span> CPU<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的CPU开始计算了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LenovoVideoCard</span> <span class="token operator">:</span><span class="token keyword">public</span> VideoCard<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的显卡开始显示了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LenovoMemory</span> <span class="token operator">:</span><span class="token keyword">public</span> Memory<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的内存条开始存储了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一台电脑零件</span>    CPU <span class="token operator">*</span> intelCpu <span class="token operator">=</span> <span class="token keyword">new</span> IntelCPU<span class="token punctuation">;</span>    VideoCard <span class="token operator">*</span> intelCard <span class="token operator">=</span> <span class="token keyword">new</span> IntelVideoCard<span class="token punctuation">;</span>    Memory <span class="token operator">*</span> intelMem <span class="token operator">=</span> <span class="token keyword">new</span> IntelMemory<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一台电脑开始工作："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建第一台电脑</span>    Computer <span class="token operator">*</span> computer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Computer</span><span class="token punctuation">(</span>intelCpu<span class="token punctuation">,</span> intelCard<span class="token punctuation">,</span> intelMem<span class="token punctuation">)</span><span class="token punctuation">;</span>    computer1<span class="token operator">-</span><span class="token operator">></span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> computer1<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-----------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第二台电脑开始工作："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第二台电脑组装</span>    Computer <span class="token operator">*</span> computer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token keyword">new</span> LenovoCPU<span class="token punctuation">,</span> <span class="token keyword">new</span> LenovoVideoCard<span class="token punctuation">,</span> <span class="token keyword">new</span> LenovoMemory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    computer2<span class="token operator">-</span><span class="token operator">></span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> computer2<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-----------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第三台电脑开始工作："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第三台电脑组装</span>    Computer <span class="token operator">*</span> computer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token keyword">new</span> LenovoCPU<span class="token punctuation">,</span> <span class="token keyword">new</span> IntelVideoCard<span class="token punctuation">,</span> <span class="token keyword">new</span> LenovoMemory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    computer3<span class="token operator">-</span><span class="token operator">></span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> computer3<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件   </p><p>  #include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ofstream ofs<span class="token punctuation">;</span>    ofs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名：张三"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"性别：男"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄：18"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件   </p><p>  #include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ifstream ifs<span class="token punctuation">;</span>    ifs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"文件打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第一种方式</span>    <span class="token comment" spellcheck="true">//char buf[1024] = { 0 };</span>    <span class="token comment" spellcheck="true">//while (ifs >> buf)</span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    cout &lt;&lt; buf &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//}</span>    <span class="token comment" spellcheck="true">//第二种</span>    <span class="token comment" spellcheck="true">//char buf[1024] = { 0 };</span>    <span class="token comment" spellcheck="true">//while (ifs.getline(buf,sizeof(buf)))</span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    cout &lt;&lt; buf &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//}</span>    <span class="token comment" spellcheck="true">//第三种</span>    <span class="token comment" spellcheck="true">//string buf;</span>    <span class="token comment" spellcheck="true">//while (getline(ifs, buf))</span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    cout &lt;&lt; buf &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//}</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> ifs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ifs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件 </li></ul><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 ==ios::binary==</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> m_Name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二进制文件  写文件</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、包含头文件</span>    <span class="token comment" spellcheck="true">//2、创建输出流对象</span>    ofstream <span class="token function">ofs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、打开文件</span>    <span class="token comment" spellcheck="true">//ofs.open("person.txt", ios::out | ios::binary);</span>    Person p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span>  <span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4、写文件</span>    ofs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5、关闭文件</span>    ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> m_Name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"文件打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Person p<span class="token punctuation">;</span>    ifs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>看板娘</title>
      <link href="/2021/10/26/hexo-bo-ke-matery-zhu-ti-mei-hua-zhi-kan-ban-niang-neng-shuo-hua-neng-huan-zhuang-qie-huan-xiao-ren/"/>
      <url>/2021/10/26/hexo-bo-ke-matery-zhu-ti-mei-hua-zhi-kan-ban-niang-neng-shuo-hua-neng-huan-zhuang-qie-huan-xiao-ren/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-1、Live2D"><a href="#1-1、Live2D" class="headerlink" title="1.1、Live2D"></a>1.1、Live2D</h3><p><code>Live2D</code>是一种应用于电子游戏的绘图渲染技术，由日本<code>Cybernoids</code>公司开发，通过一系列的连续图像和人物建模来生成一种类似二维图像的三维模型，换句话说就是2D的素材实现一定程度的3D效果，但只能是一定程度3D，因为Live 2D人物无法大幅度转身。 </p><p> 很多知名的动漫都是<code>Live2D</code>游戏改编的或者反过来的，例如：《我的妹妹不可能有那么可爱》、《我的朋友很少》、《樱花庄的宠物女孩》等。 </p><p><code>ive2d</code>官方网站就是<code>live2d.com</code>，里面提供了<code>live2d</code>开发和编辑软件（如<code>Live2D Cubism editor和Live2D Euclideditor</code>），还有开发使用教程等，对相关制作感兴趣的可以看看。 </p><h3 id="2-1、看板娘"><a href="#2-1、看板娘" class="headerlink" title="2.1、看板娘"></a>2.1、看板娘</h3><p>看板娘是一种职业和习惯称呼，也是<code>ACGN</code>次文化中的萌属性之一。简而言之就是小店的女服务生，也有“吸引顾客，招揽生意，提高人气”等作用类似品牌形象代言人的含义。</p><p>模型预览：<a href="https://huaji8.top/post/live2d-plugin-2.0/">https://huaji8.top/post/live2d-plugin-2.0/</a> </p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/a2d201771h112b195e741490833a54b5?fid=1789975539-250528-445956090594144&amp;time=1635300000&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-O5K0hw6wIHrhtKlGDiGMV37IFX0=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=27632489292156135&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h2 id="二、小白水平"><a href="#二、小白水平" class="headerlink" title="二、小白水平"></a>二、小白水平</h2><p>hexo的官方是支持看板娘的，已经封装好了插件，但只是模型，不能说话、不能换装、功能较少。</p><h3 id="2-1、准备工作"><a href="#2-1、准备工作" class="headerlink" title="2.1、准备工作"></a>2.1、准备工作</h3><p> 检查博客主目录下的<code>package.json</code>是否有<code>"hexo-helper-live2d"</code>：“^3.0.3”，依赖：</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/eb0261ac5v7bff0824f136d6e30f449b?fid=1789975539-250528-968302098057694&amp;time=1635256800&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-XaxNmMsn54kr8I2e/5l4yVUGhoI=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=15713094858249023&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p> 有的话可以先卸载：</p><pre class="line-numbers language-html"><code class="language-html">npm uninstall hexo-helper-live2d <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2、安装依赖"><a href="#2-2、安装依赖" class="headerlink" title="2.2、安装依赖"></a>2.2、安装依赖</h3><pre class="line-numbers language-c++"><code class="language-c++">npm install --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 安装过程中可能遇到一些依赖性问题，按提示做就行 </p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/46e26f128p1102e33d0c97f0033b54e3?fid=1789975539-250528-267289330636601&amp;time=1635256800&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-KVTo9vrbXbq5/zCjpqEowo0GuFQ=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=15713094858249023&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p> 遇到这种就运行<code>npm audit fix</code>，如果还不成功，会提示你用<code>npm audit fix --force</code>，一般这个时候就成功了。 </p><p> 成功了之后可以看到当前目录的<code>node_modules/</code>下有个<code>live2d-widget</code>目录，这是动画的主配置： </p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/9b55bfdbeh4c00e8decb6128c58b1430?fid=1789975539-250528-146705711326910&amp;time=1635256800&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-P+tlauRrvviEcbuS0YWHC65GjUo=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=15713094858249023&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p>这个时候是没有模型文件的，所以下一步是下载模型文件。</p><h3 id="2-3、下载model文件"><a href="#2-3、下载model文件" class="headerlink" title="2.3、下载model文件"></a>2.3、下载model文件</h3><p>模型仓库 使用 <code>npm install {packagename}</code>命令进行下载</p><p>模型预览：<a href="https://huaji8.top/post/live2d-plugin-2.0/">https://huaji8.top/post/live2d-plugin-2.0/</a></p><p>模型下载：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a> </p><p>模型文件可直接用npm安装：如下</p><pre class="line-numbers language-html"><code class="language-html">npm install live2d-widget-model-shizuku        //注意：shizuku下载对应看板娘名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>model</code>名字可在<code>live2d-widget-models</code>中找到，也可点击<code>live2d</code>看板娘模型预览来选择你喜欢的模型进行安装。<br>安装完成可以在<code>node_modules/</code>下看到<code>live2d-widget-model-shizuku</code>文件夹 </p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/028511b36sc56a3d8f81fc8ba1162eb1?fid=1789975539-250528-314329912568235&amp;time=1635256800&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-1fcDPTCR05It+NPkF4JqYc7jqdw=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=15713094858249023&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h3 id="2-4、添加live2d看板娘到hexo"><a href="#2-4、添加live2d看板娘到hexo" class="headerlink" title="2.4、添加live2d看板娘到hexo"></a>2.4、添加live2d看板娘到hexo</h3><p>配置<code>Hexo</code>的主<code>_config.yml</code>或者使用的主题的<code>_config.yml</code><br>添加以下代码到配置文件中： </p><pre class="line-numbers language-html"><code class="language-html"># Live2D看板娘live2d:  enable: true  pluginModelPath: assets/  model:    #模板目录，在node_modules里    use: live2d-widget-model-shizuku      //注意：shizuku运行对应看板娘名称  display:    position: right    width: 300     height: 600  mobile:    # 在手机端显示    show: false     rect:    opacity:0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5、查看效果"><a href="#2-5、查看效果" class="headerlink" title="2.5、查看效果"></a>2.5、查看效果</h3><p> 使用<code>hexo g</code>生成文件，使用<code>hexo server</code>即可在本地查看效果： </p><pre class="line-numbers language-html"><code class="language-html"># 生成文件hexo g# 本地浏览hexo s -p 555<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://thumbnail0.baidupcs.com/thumbnail/0beac66e7tbd707ce2083513d3d452fb?fid=1789975539-250528-155082100884792&amp;time=1635260400&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-NuQCcWr/X43Xhi9dbTOrtp+1SbQ=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=16621584832736266&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/e22e5615btff4b453452ffdea2963488?fid=1789975539-250528-919694749079748&amp;time=1635256800&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-gA8goq1eTn1vDd0W1fv0pLHqCsE=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=15951498484334986&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p> 打开浏览器访问：<a href="http://localhost:5555/">http://localhost:5555</a> 即可看到效果： </p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/118fb79eegfee9e7c43349659ef749c7?fid=1789975539-250528-476488513659248&amp;time=1635300000&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-lxdyBG0YVplgH63MYjRhRoJpY3s=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=27632489292156135&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h3 id="2-6、发布"><a href="#2-6、发布" class="headerlink" title="2.6、发布"></a>2.6、发布</h3><p> 在本地找到满意的效果后，使用<code>hexo d</code>将其发布到你的hexo服务器上，即可在外网查看了。 </p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/9b274ffaesc17833773a69a6b34b5728?fid=1789975539-250528-461505817587311&amp;time=1635260400&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-s7gZHSU9qtmnqotEaAJb6odlX9o=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=17020312558506833&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/0e2e3141bl6bd9a65bb4aab19be2d66f?fid=1789975539-250528-206781905740853&amp;time=1635260400&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-6WrzZow06zNWny4cM8LKQzdMZNw=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=17020312558506833&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h2 id="三、大神水平"><a href="#三、大神水平" class="headerlink" title="三、大神水平"></a>三、大神水平</h2><p> 大神作品，功能齐全：能说话、能换装、能玩游戏、能拍照、自动切换板娘、还能自定义。 </p><h3 id="3-1、下载文件"><a href="#3-1、下载文件" class="headerlink" title="3.1、下载文件"></a>3.1、下载文件</h3><p>GitHub： <a href="https://github.com/stevenjoezhang/live2d-widget">张书樵大神的项目</a></p><p>百度云：<a href="https://pan.baidu.com/s/1sCkzBch1avDv0hkaw7B8wg">live2d-widget-master.zip</a>  提取码：ziqi</p><p>解压到本地博客目录的 <code>themes/matrey/source</code> 下，并修改文件夹名为 <code>live2d-widget</code>，修改项目中的 <code>autoload.js</code> 文件，如下：<br><code>将 ：</code></p><pre class="line-numbers language-html"><code class="language-html">//注销//const live2d_path = "https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>修改成：</code></p><pre class="line-numbers language-html"><code class="language-html">//打开const live2d_path = "/live2d-widget/";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://thumbnail0.baidupcs.com/thumbnail/c6f7ca150g01b53e28b224ea86ceee3b?fid=1789975539-250528-189886906370914&amp;time=1635249600&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Tb9kUzmrrwU42LpNCJqx+N5VjvQ=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=13264390367765744&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h3 id="3-2、新增内容"><a href="#3-2、新增内容" class="headerlink" title="3.2、新增内容"></a>3.2、新增内容</h3><p> 在<code>/themes/matrey/layout/layout.ejs</code>中，新增如下内容： </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/live2d-widget/autoload.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://thumbnail0.baidupcs.com/thumbnail/c6f7ca150g01b53e28b224ea86ceee3b?fid=1789975539-250528-189886906370914&amp;time=1635300000&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-cPbmtPZZmlFjfHmnmR02qa3G9Fw=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=27632168512831522&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h3 id="3-3、主题配置文件"><a href="#3-3、主题配置文件" class="headerlink" title="3.3、主题配置文件"></a>3.3、主题配置文件</h3><p> 在 <code>主题配置文件</code>中, <code>/themes/matrey/_config.yml</code>新增如下内容： </p><pre class="line-numbers language-html"><code class="language-html">live2d:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://thumbnail0.baidupcs.com/thumbnail/6a18c6028iae01de232e37b597a72509?fid=1789975539-250528-1067975557203980&amp;time=1635249600&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Sm9E3qTeTtlQ/IaBEBkdMrgwQLY=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=13363232879024885&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h3 id="3-4、可修改"><a href="#3-4、可修改" class="headerlink" title="3.4、可修改"></a>3.4、可修改</h3><p> 想修改看板娘大小、位置、格式、文本内容等，可查看并修改 ：<code>waifu-tips.js</code> 、 <code>waifu-tips.json</code> 和 <code>waifu.css</code>。 </p><h3 id="3-5、效果"><a href="#3-5、效果" class="headerlink" title="3.5、效果"></a>3.5、效果</h3><p>可以来我的博客看一看(*￣︶￣)： <a href="https://baiziqing.github.io/">https://baiziqing.github.io/</a> </p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/840dce293j5fa8dbf0a32c4d99481bb2?fid=1789975539-250528-466233969120453&amp;time=1635300000&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-8O1oq404kGYf9naZtmMCVDtAqtU=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=27632489292156135&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/5eda6f049t0f48cba557cc820968cf11?fid=1789975539-250528-972375583407838&amp;time=1635303600&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-prVDRyifhL6pHhALhhpRz7pOKIw=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=27838105699779010&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/80fe208cah20a4f5c4a25f574cadc1ed?fid=1789975539-250528-1078671342672383&amp;time=1635300000&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-S3TGKeWr8dWhL1RXbExN2LFkd7Q=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=27632489292156135&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++程序设计</title>
      <link href="/2021/10/25/c-cheng-xu-she-ji/"/>
      <url>/2021/10/25/c-cheng-xu-she-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="https://thumbnail0.baidupcs.com/thumbnail/500a1b499k9170203b3516bc6f8fcb11?fid=1789975539-250528-1050671472593170&amp;time=1635210000&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-BR7g/2FMQcf9frA6UwZuHLxI5Zc=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=2796754644589342&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h1 id="C-程序设计"><a href="#C-程序设计" class="headerlink" title="C++程序设计"></a>C++程序设计</h1><h2 id="一、从-C-到-C"><a href="#一、从-C-到-C" class="headerlink" title="一、从 C 到 C++"></a>一、从 C 到 C++</h2><h3 id="1-1、C-简介"><a href="#1-1、C-简介" class="headerlink" title="1.1、C++简介"></a>1.1、C++简介</h3><p>C语言是面向过程、C++是向对象的编程语言</p><p>C++是C的升级、面向对象</p><h3 id="1-2、C-新增特性"><a href="#1-2、C-新增特性" class="headerlink" title="1.2、C++新增特性"></a>1.2、C++新增特性</h3><h4 id="1-2-1、相对于C-C-有更为严格的类型检查"><a href="#1-2-1、相对于C-C-有更为严格的类型检查" class="headerlink" title="1.2.1、相对于C/ C++ 有更为严格的类型检查"></a>1.2.1、相对于C/ C++ 有更为严格的类型检查</h4><p>eg:<br>int *p;<br>char *q;<br>p = q; //c 语言警告， 但是c++是错误</p><h4 id="1-2-2、新增变量引用"><a href="#1-2-2、新增变量引用" class="headerlink" title="1.2.2、新增变量引用"></a>1.2.2、新增变量引用</h4><p>eg：<br>int a  = 10；<br>int &amp;b =  a;  //c语言直接报错，c++是为引用（给a 取别名 为 b）<br>printf（“%d–%d–%p–%p\n”, a,b,&amp;a, &amp;b）;<br>不能同时引用多个变量。</p><h4 id="1-2-3、支持面向对象"><a href="#1-2-3、支持面向对象" class="headerlink" title="1.2.3、支持面向对象"></a>1.2.3、支持面向对象</h4><p>类和对象、继承、多态、虚函数及RTTI（运行时类型识别）</p><h4 id="1-2-4、新增泛型编程"><a href="#1-2-4、新增泛型编程" class="headerlink" title="1.2.4、新增泛型编程"></a>1.2.4、新增泛型编程</h4><p>支持模板（template），标准模板库（STL）</p><h4 id="1-2-5、支持异常处理"><a href="#1-2-5、支持异常处理" class="headerlink" title="1.2.5、支持异常处理"></a>1.2.5、支持异常处理</h4><p>标准异常、自定义异常</p><h4 id="1-2-6、支持函数-运算符重载"><a href="#1-2-6、支持函数-运算符重载" class="headerlink" title="1.2.6、支持函数/运算符重载"></a>1.2.6、支持函数/运算符重载</h4><h4 id="1-2-7、支持名字空间"><a href="#1-2-7、支持名字空间" class="headerlink" title="1.2.7、支持名字空间"></a>1.2.7、支持名字空间</h4><p>用于管理函数名、变量名及类</p><h3 id="1-3、OOP简介"><a href="#1-3、OOP简介" class="headerlink" title="1.3、OOP简介"></a>1.3、OOP简介</h3><h4 id="1-3-1、面向对象编程（-OOP-）"><a href="#1-3-1、面向对象编程（-OOP-）" class="headerlink" title="1.3.1、面向对象编程（ OOP ）"></a>1.3.1、面向对象编程（ OOP ）</h4><p>OOP是程序设计工程化的一种方法，软件架构的一种思想。<br>OOP基本原则是程序是由单个能够起到子程序作用的单元或对象组合而成，以达到软件工程的三个主要目标：重用性、灵活性和扩展性。</p><h4 id="1-3-2、重用性"><a href="#1-3-2、重用性" class="headerlink" title="1.3.2、重用性"></a>1.3.2、重用性</h4><p>代码被重复使用，以减少代码量，就是重用性的重要指标。</p><h4 id="1-3-3、灵活性"><a href="#1-3-3、灵活性" class="headerlink" title="1.3.3、灵活性"></a>1.3.3、灵活性</h4><p>软件系统由很多可以复用的构件随意重构，以达到实现不同的功能，非常灵活。</p><h4 id="1-3-3、扩展性"><a href="#1-3-3、扩展性" class="headerlink" title="1.3.3、扩展性"></a>1.3.3、扩展性</h4><p>软件系统可以容易地新增需求，基本构件也可以轻松的扩展功能。</p><h4 id="1-3-4、面向过程设计-（c语言面向过程）"><a href="#1-3-4、面向过程设计-（c语言面向过程）" class="headerlink" title="1.3.4、面向过程设计:（c语言面向过程）"></a>1.3.4、面向过程设计:（c语言面向过程）</h4><p>程序=数据结构+算法。</p><h4 id="1-3-5、面向对象设计：（c-面向对象）"><a href="#1-3-5、面向对象设计：（c-面向对象）" class="headerlink" title="1.3.5、面向对象设计：（c++面向对象）"></a>1.3.5、面向对象设计：（c++面向对象）</h4><p>对象=数据结构+算法<br>程序=(对象+对象+….)+对象间通讯机制。</p><h4 id="1-3-6、面向对象编程主要涉及概念如下"><a href="#1-3-6、面向对象编程主要涉及概念如下" class="headerlink" title="1.3.6、面向对象编程主要涉及概念如下"></a>1.3.6、面向对象编程主要涉及概念如下</h4><p>类( class )、对象( Object )、数据抽象、继承( inherit )、动态绑定(动态联编)、静态绑定(静态联编)、数据封装( encapsulation )、多态性( polymorphism)、消息传递。</p><h3 id="1-4、泛型编程-Generic-Programming"><a href="#1-4、泛型编程-Generic-Programming" class="headerlink" title="1.4、泛型编程( Generic Programming)"></a>1.4、泛型编程( Generic Programming)</h3><p>简介：目的是为了实现C++的STL(标准模板库)。</p><h3 id="1-5、编译C-程序"><a href="#1-5、编译C-程序" class="headerlink" title="1.5、编译C++程序"></a>1.5、编译C++程序</h3><h4 id="1-5-1、C-C-编译步骤-★★★"><a href="#1-5-1、C-C-编译步骤-★★★" class="headerlink" title="1.5.1、C/C++编译步骤 ★★★"></a>1.5.1、C/C++编译步骤 ★★★</h4><p><strong>(1)、c语言：以.h   .c 分别为头文件和源文件</strong></p><p>4个步骤： hello.c<br>预处理：（展开头文件里面的宏和结构体等）gcc  -E hello.c -o hello.i<br>编译：（检查语法错误，及删除预处理后文件内多余的文件）gcc  -S hello.i  -o hello.s<br>汇编：（转化为二进制文件）gcc  -c hello.s  -o hello.o<br>链接：（生成可执行程序）gcc  hello.o  -o  hello</p><p><strong>(2)、c++: 以GNU平台：.cpp 为后缀。 头文件无后缀</strong></p><p>4个步骤： hello.cpp<br>预处理:  g++  -E hello.cpp -o hello.i<br>编译：   g++  -S hello.i  -o hello.s<br>汇编：   g++  -c hello.s  -o hello.o<br>链接：   g++     hello.o  -o  hello</p><h4 id="1-5-2、C-程序的基本结构"><a href="#1-5-2、C-程序的基本结构" class="headerlink" title="1.5.2、C++程序的基本结构"></a>1.5.2、C++程序的基本结构</h4><h4 id="1-5-3、源文件的扩展名"><a href="#1-5-3、源文件的扩展名" class="headerlink" title="1.5.3、源文件的扩展名"></a>1.5.3、源文件的扩展名</h4><h4 id="1-5-4、引用头文件命名"><a href="#1-5-4、引用头文件命名" class="headerlink" title="1.5.4、引用头文件命名"></a>1.5.4、引用头文件命名</h4><h3 id="1-6、C-和-C-兼容及差异"><a href="#1-6、C-和-C-兼容及差异" class="headerlink" title="1.6、C 和 C++兼容及差异"></a>1.6、C 和 C++兼容及差异</h3><h4 id="1-6-1、C-对C的“增强”，主要表现在两个方面"><a href="#1-6-1、C-对C的“增强”，主要表现在两个方面" class="headerlink" title="1.6.1、C++对C的“增强”，主要表现在两个方面"></a>1.6.1、C++对C的“增强”，主要表现在两个方面</h4><p>在原来面向过程的机制基础上,对C语言的功能做了不少扩充。<br>增加了面向对象的机制。</p><h4 id="1-6-2、常变量"><a href="#1-6-2、常变量" class="headerlink" title="1.6.2、常变量"></a>1.6.2、常变量</h4><p>在变量基础上加const 限定：存储单元值不允许被修改。该变量称之为 只读变量（read-only-variable）;</p><h4 id="1-6-3、强制类型转换"><a href="#1-6-3、强制类型转换" class="headerlink" title="1.6.3、强制类型转换"></a>1.6.3、强制类型转换</h4><p><strong>(1)、c语言里面转换一般形式：</strong></p><pre class="line-numbers language-c++"><code class="language-c++">（类型名）（表达式）eg：int i;char ch;ch  = (char)i;  //将i 强制转换为char 类型 struct sockaddr_in saddr;(struct sockaddr *)&saddr; //强转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(2)、c++一般转换形式：</strong></p><pre class="line-numbers language-c++"><code class="language-c++">类型名 （表达式）int i;char ch;ch  = char（i）;  //将i 强制转换为char 类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-4、变量引用-reference"><a href="#1-6-4、变量引用-reference" class="headerlink" title="1.6.4、变量引用 reference"></a>1.6.4、变量引用 reference</h4><p>对一个数据可以使用“引用”,这是C++对C的一个重要扩充,引用是一种新的变量类型,它的作用是为一个变量起一个别名。<br>不能同时引用两个变量。<br>C中函数之间的参数传递方式有:复制传递方式、地址传递方式:C++增加了函数参数引用。</p><h4 id="1-6-5、内联函数"><a href="#1-6-5、内联函数" class="headerlink" title="1.6.5、内联函数"></a>1.6.5、内联函数</h4><p>可以在内部定义成员函数,也是内联函数。</p><p>优点：提升代码运行效率；缺点：目标程序体积较大。</p><p>注意：<br>1、频繁使用的函数<br>2、函数代码语句很少（&lt;= 5局）<br>3、函数代码语句简单，没有控制语句（循环语句，switch）</p><h4 id="1-6-6、内联函数语法"><a href="#1-6-6、内联函数语法" class="headerlink" title="1.6.6、内联函数语法"></a>1.6.6、内联函数语法</h4><p>inline存储类型数据类型函数名(参数列表)</p><h4 id="1-6-7、内联函数的限制"><a href="#1-6-7、内联函数的限制" class="headerlink" title="1.6.7、内联函数的限制"></a>1.6.7、内联函数的限制</h4><p>使用内联函数可以节省运行时间,但却增加了目标程序的长度。</p><h4 id="1-6-8、函数重载"><a href="#1-6-8、函数重载" class="headerlink" title="1.6.8、函数重载"></a>1.6.8、函数重载</h4><p>即对一个函数名重新赋予它新的含义,使一个函数名可以多用。</p><h4 id="1-6-9、函数模板"><a href="#1-6-9、函数模板" class="headerlink" title="1.6.9、函数模板"></a>1.6.9、函数模板</h4><p>c++中的函数重载，函数名相同，但参数列表必须不同(1)、参数个数不同<br>(2)、参数个数相同、类型不同<br>使用的时候看实参来调用，函数的返回值不可以作为函数重载的条件</p><p>所谓函数模板,实际上是建立一个通用函数,其函数类型和形参类型不具体指定,用一个虚拟的类型来代表。</p><h4 id="1-6-10、函数默认参数"><a href="#1-6-10、函数默认参数" class="headerlink" title="1.6.10、函数默认参数"></a>1.6.10、函数默认参数</h4><p>即在调用该函数时,可以不写某些参数的值,编译器会自动把默认值传递给调用语句中。<br>默认值只能在声明中设置。</p><h3 id="1-7、再谈结构体"><a href="#1-7、再谈结构体" class="headerlink" title="1.7、再谈结构体"></a>1.7、再谈结构体</h3><p>C++ 语法中相对C语语法增加了访问杈限的概念，<br>有三种: public、prⅳate及protected，默认是 public。</p><p>public：公共成员,表示可以通过结构体变量对象直接访问到成员<br>private：私有成员，表示仅结构体成员函数可以使用的成员<br>protected：保护成员，表示被继承的派生对象可以访闷使用的成员</p><h2 id="二、内存模型及名字空间"><a href="#二、内存模型及名字空间" class="headerlink" title="二、内存模型及名字空间"></a>二、内存模型及名字空间</h2><h3 id="2-1、作用域"><a href="#2-1、作用域" class="headerlink" title="2.1、作用域"></a>2.1、作用域</h3><h4 id="2-1-1、作用域"><a href="#2-1-1、作用域" class="headerlink" title="2.1.1、作用域"></a>2.1.1、作用域</h4><p>作用域( scope)描述了一个名字在文件(编译单元)的多大范围内可见。</p><h4 id="2-1-2、C-支持三种形式的域"><a href="#2-1-2、C-支持三种形式的域" class="headerlink" title="2.1.2、C++支持三种形式的域"></a>2.1.2、C++支持三种形式的域</h4><p><strong>(1)、局部域 (local scope)</strong></p><p>局部域是包含在函数定义或者函数块中的程序文本部分。</p><p><strong>(2)、名字空间域 (namespace scope)</strong></p><p>局部域是包含在函数定义或者函数块中的程序文本部分。</p><p><strong>(3)、类域 (class scope)</strong></p><p>局部域是包含在函数定义或者函数块中的程序文本部分。</p><h4 id="2-1-2、变量的作用域"><a href="#2-1-2、变量的作用域" class="headerlink" title="2.1.2、变量的作用域"></a>2.1.2、变量的作用域</h4><p>局部变量的作用域为局部,仅能在代码块内可见。</p><h4 id="2-1-3、函数的作用域"><a href="#2-1-3、函数的作用域" class="headerlink" title="2.1.3、函数的作用域"></a>2.1.3、函数的作用域</h4><p>可以是整个类,也可以是整个名字空间,但不能是局部的。</p><h3 id="2-2、链接性及存储性"><a href="#2-2、链接性及存储性" class="headerlink" title="2.2、链接性及存储性"></a>2.2、链接性及存储性</h3><h4 id="2-2-1、链接性-linkage-描述了名称如何在各个单元中的共享。"><a href="#2-2-1、链接性-linkage-描述了名称如何在各个单元中的共享。" class="headerlink" title="2.2.1、链接性 (linkage)描述了名称如何在各个单元中的共享。"></a>2.2.1、链接性 (linkage)描述了名称如何在各个单元中的共享。</h4><h4 id="2-2-2、外部链接：是指名称可以在文件间共享。"><a href="#2-2-2、外部链接：是指名称可以在文件间共享。" class="headerlink" title="2.2.2、外部链接：是指名称可以在文件间共享。"></a>2.2.2、外部链接：是指名称可以在文件间共享。</h4><h4 id="2-2-3、内部链接：名称仅仅能在一个文件中的函数共享。"><a href="#2-2-3、内部链接：名称仅仅能在一个文件中的函数共享。" class="headerlink" title="2.2.3、内部链接：名称仅仅能在一个文件中的函数共享。"></a>2.2.3、内部链接：名称仅仅能在一个文件中的函数共享。</h4><h4 id="2-2-4、变量链接及存储性"><a href="#2-2-4、变量链接及存储性" class="headerlink" title="2.2.4、变量链接及存储性"></a>2.2.4、变量链接及存储性</h4><h4 id="2-2-5、变量的说明限定符：auto-register-static-extern"><a href="#2-2-5、变量的说明限定符：auto-register-static-extern" class="headerlink" title="2.2.5、变量的说明限定符：auto register static  extern"></a>2.2.5、变量的说明限定符：auto register static  extern</h4><h4 id="2-2-6、函数的链接性及存储性：函数的存储持续性为静态的。"><a href="#2-2-6、函数的链接性及存储性：函数的存储持续性为静态的。" class="headerlink" title="2.2.6、函数的链接性及存储性：函数的存储持续性为静态的。"></a>2.2.6、函数的链接性及存储性：函数的存储持续性为静态的。</h4><p>存储方式：4种： auto register static  extern</p><h4 id="2-2-7、语言链接性："><a href="#2-2-7、语言链接性：" class="headerlink" title="2.2.7、语言链接性："></a>2.2.7、语言链接性：</h4><p>对于函数或变量而言,只要有链接性,则每种编程语言,都有自己的规则来处理它们的名字。这个就是语言的链接性</p><h3 id="2-3、动态内存"><a href="#2-3、动态内存" class="headerlink" title="2.3、动态内存"></a>2.3、动态内存</h3><h3 id="2-4、声明区与作用域"><a href="#2-4、声明区与作用域" class="headerlink" title="2.4、声明区与作用域"></a>2.4、声明区与作用域</h3><p>C++标准的名字空间属性<br>声明区：可以进行声明的区域<br>潜在的作用域：变量潜在的作用域,从声明点,到声明区结尾</p><h3 id="2-5、名字空间"><a href="#2-5、名字空间" class="headerlink" title="2.5、名字空间"></a>2.5、名字空间</h3><h2 id="三、输入输出流"><a href="#三、输入输出流" class="headerlink" title="三、输入输出流"></a>三、输入输出流</h2><h3 id="3-1、概述"><a href="#3-1、概述" class="headerlink" title="3.1、概述"></a>3.1、概述</h3><p>C++的输出和输入是用“流”(stream)的方式实现的。<br>在定义流对象时，系统会在内存中开辟一段缓冲区，用来暂存输入输出流的数据。<br>在执行输入输出语句时，先把数据顺序存放在输出缓冲区中，直到输出缓冲区满或遇到输入输出语句中的endl(或′＼n′，ends，flush)为止，此时将缓冲区中已有的数据一起输出，并清空缓冲区。</p><h3 id="3-2、C-输出"><a href="#3-2、C-输出" class="headerlink" title="3.2、C++输出"></a>3.2、C++输出</h3><p>输出流即从程序中输出一系列的字符串,使用cout对象</p><h3 id="3-3、C-输入"><a href="#3-3、C-输入" class="headerlink" title="3.3、C++输入"></a>3.3、C++输入</h3><p>输入流即向程序输入一系列的字符串,使用cin对象</p><h3 id="3-4、格式控制符"><a href="#3-4、格式控制符" class="headerlink" title="3.4、格式控制符"></a>3.4、格式控制符</h3><h2 id="四、类和对象"><a href="#四、类和对象" class="headerlink" title="四、类和对象"></a>四、类和对象</h2><h3 id="4-1、OPP思想"><a href="#4-1、OPP思想" class="headerlink" title="4.1、OPP思想"></a>4.1、OPP思想</h3><h4 id="4-1-1、抽象"><a href="#4-1-1、抽象" class="headerlink" title="4.1.1、抽象"></a>4.1.1、抽象</h4><p>抽象就是声明定义一个类，抽象概括一类对象的公共性质。</p><p><strong>数据抽象</strong>：设置成员变量</p><p><strong>代码抽象</strong>：设置成员函数</p><p><strong>抽象的实现</strong>：通过类的定义</p><h4 id="4-1-2、封装"><a href="#4-1-2、封装" class="headerlink" title="4.1.2、封装"></a>4.1.2、封装</h4><p>封装将数据成员和成员函数结合在一起，形成一个整体，就是类体部分。</p><h4 id="4-1-3、分类"><a href="#4-1-3、分类" class="headerlink" title="4.1.3、分类"></a>4.1.3、分类</h4><p>层层分类，使概念逐渐细化、具体化。</p><h4 id="4-1-4、继承"><a href="#4-1-4、继承" class="headerlink" title="4.1.4、继承"></a>4.1.4、继承</h4><p>子类继承父类所有的属性、方法，并可定义自己的特有属性与方法。</p><h4 id="4-1-5、多态"><a href="#4-1-5、多态" class="headerlink" title="4.1.5、多态"></a>4.1.5、多态</h4><p>多态性是面向对象程序设计的一个重要特征，能增加程序的灵活性。</p><h3 id="4-2、类的声明定义"><a href="#4-2、类的声明定义" class="headerlink" title="4.2、类的声明定义"></a>4.2、类的声明定义</h3><p>C++中对象的类型称为类(class)，类代表了某一批对象的共性和特征,类是对象的抽象，而对象是类的具体实例 (instance)。</p><p>(1)、编写一个的类基本语法形式：</p><p>class 类名{</p><p>private:</p><p>​    私有的数据和成员函数;</p><p>public:</p><p>​    公有的数据和成员函数;</p><p>protected:</p><p>​    保护的数据和成员函数;<br>};</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:    int a;    int setx(int val);#if 0    int setx(int val)    {        x = val;    }#endif    int getx()    {        return x;    }    protected:    int b;private:    int c;    int x;    };int Demo::setx(int val){    x = val;    return 0;}int main(int argc, char *argv[]){    Demo obj;    obj.setx(123);    cout << obj.getx() << endl;        return 0;}//cout:123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3、构造和析构"><a href="#4-3、构造和析构" class="headerlink" title="4.3、构造和析构"></a>4.3、构造和析构</h3><h4 id="4-3-1、构造函数"><a href="#4-3-1、构造函数" class="headerlink" title="4.3.1、构造函数"></a>4.3.1、构造函数</h4><p>构造函数是一种特殊的成员函数，与其他成员函数不同。</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:        //公有    Demo(int val)    //构造函数：无返回值，函数名与类名相同，可以有形参，定义对象的时候自动调用    {        myval = val;        cout << "func: " << __func__ << "line: " << __LINE__ << endl;    }        int getval()    {        return myval;    }private:    //私有    int myval;    };int main(int argc, char *argv[]){    Demo obj(123);    //构造对象并且传递参数        cout << obj.getval() << endl;        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2、析构"><a href="#4-3-2、析构" class="headerlink" title="4.3.2、析构"></a>4.3.2、析构</h4><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:        //公有    Demo(int val)    //构造函数：无返回值，函数名与类名相同，可以有形参，定义对象的时候自动调用    {        myval = val;        cout << "func: " << __func__ << "line: " << __LINE__ << endl;    }        ~Demo()            //析构函数：无参数，无返回值    {        cout << "func: " << __func__ << "line: " << __LINE__ << endl;    }        int getval()    {        return myval;    }private:    //私有    int myval;    };int main(int argc, char *argv[]){    Demo obj(123);    //构造对象并且传递参数        cout << obj.getval() << endl;        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1634787253868.png" alt="1634787253868"></p><h4 id="4-3-3、拷贝构造"><a href="#4-3-3、拷贝构造" class="headerlink" title="4.3.3、拷贝构造"></a>4.3.3、拷贝构造</h4><p>1、定义对象的一般格式</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1634795594450.png" alt="1634795594450"></p><p>2、动态创建对象</p><p>cp2</p><p>3、函数的传值调用</p><p>cp3</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1634796412720.png" alt="1634796412720"></p><h4 id="4-3-4、浅拷贝和深拷贝"><a href="#4-3-4、浅拷贝和深拷贝" class="headerlink" title="4.3.4、浅拷贝和深拷贝"></a>4.3.4、浅拷贝和深拷贝</h4><p>(1)、浅拷贝：同类型的两个对象的成员指针，指向同一个堆区空间，两成员指针相互干扰</p><p>(2)、深拷贝：同类型的两个对象的成员指针，指向两个不同的堆区，互不干扰</p><h3 id="4-4、this指针"><a href="#4-4、this指针" class="headerlink" title="4.4、this指针"></a>4.4、this指针</h3><p>this指针是一个特殊的指针，指向类对象自身的首地址。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1634800413078.png" alt="1634800413078"></p><h3 id="4-5、static成员"><a href="#4-5、static成员" class="headerlink" title="4.5、static成员"></a>4.5、static成员</h3><h3 id="4-4、const成员"><a href="#4-4、const成员" class="headerlink" title="4.4、const成员"></a>4.4、const成员</h3><h4 id="4-4-1、const成员函数"><a href="#4-4-1、const成员函数" class="headerlink" title="4.4.1、const成员函数"></a>4.4.1、const成员函数</h4><p>在类内声明语法形式<br>            &lt;数据类型&gt; &lt;函数名&gt; (&lt;参数列表&gt;) const;<br>            在类外定义语法形式<br>            &lt;数据类型&gt;  &lt;类名&gt; :: &lt;函数名&gt; (&lt;参数列表&gt;) const<br>            {<br>            ……<br>            }</p><h4 id="4-4-2、const对象"><a href="#4-4-2、const对象" class="headerlink" title="4.4.2、const对象"></a>4.4.2、const对象</h4><pre class="line-numbers language-c++"><code class="language-c++">#include <assert.h>#include <iostream>using namespace std;class Demo{public:            Demo(int a=0, int b= 0):x(a), y(b)        {        cout << "line:" << __LINE__ <<endl;    }    public:    void setx(int val)     //const    {        x = val;        //const 修饰的成员函数 不能修改成员变量    }        void sety(int val)    {        y = val;    }    int getx() const    //不能修改 可以被const对象调用    {        return x;    }    int gety()    {        return y;    }private:        int x;        int y;};int main(int argc, char *argv[]){    Demo obj(321, 123);    const Demo obj2(321, 123);    //const 修饰的对象    //obj.setx(111);            //const 修饰的对象，只能掉const成员函数    obj.sety(222);        //obj.setx(333);    cout << obj2.getx()<<endl;    cout << obj.getx()<<endl;    cout << obj.gety()<<endl;        return 0;}/*输出：    line:17    line:17    321    321    222*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4、友元"><a href="#4-4、友元" class="headerlink" title="4.4、友元"></a>4.4、友元</h3><p>类的朋友</p><h4 id="4-4-1、友元函数"><a href="#4-4-1、友元函数" class="headerlink" title="4.4.1、友元函数"></a>4.4.1、友元函数</h4><p>指：某个函数是类的友元；</p><p>一个类的函数是多个类的函数</p><h4 id="4-4-2、友元类"><a href="#4-4-2、友元类" class="headerlink" title="4.4.2、友元类"></a>4.4.2、友元类</h4><pre class="line-numbers language-c++"><code class="language-c++">#include <assert.h>#include <iostream>using namespace std;class A{public:    A(int val=0):myval(val)    {        cout<<__LINE__<<endl;    }public:    int getval()    {        return myval;    }    friend class B;    //声明类B是类A的友元private:    int myval;    };class B{public:    B(int val=0):myval(val)    {        cout<<__LINE__<<endl;    }public:    void setval(A &obj)    //这是A的友元    {        obj.myval = this->myval;    //访问A类的私有成员    }    int getval()    {        return myval;    }    private:    int myval;    };int main(int argc, char *argv[]){    A obj1(123);    B obj2(321);    obj2.setval(obj1);    //通过obj2修改obj1的成员1变量值        cout<<obj1.getval()<<endl;        return 0;}/*输出：    17    34    321*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3、友元成员函数"><a href="#4-4-3、友元成员函数" class="headerlink" title="4.4.3、友元成员函数"></a>4.4.3、友元成员函数</h4><p>B类的成员函数可以是类A的友员</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1634890579045.png" alt="1634890579045"></p><pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>using namespace std;class A;   //前向 声明class B{public:    B(int val=0) :myval(val)    {        cout<<__LINE__<<endl;    }public:    void setval(A &); //  函数的内部声明private:    int myval; //};#if 1class A{public:    A(int val=0):myval(val)    {        cout<<__LINE__<<endl;    }public:    int getval()    {        return myval;    }    friend void B::setval(A &); //声明 B类的成员方法是 类A的友元private:    int myval;};#endif void B::setval(A &obj)   //A的友元{    obj.myval = this->myval; //}int main(){    A obj(123);    B obj2(321);    obj2.setval(obj);     cout<<obj.getval()<<endl;    //cout<<ob2.getval()<<endl;    return 0;}/*输出：    22    9    321*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、运算符重载"><a href="#五、运算符重载" class="headerlink" title="五、运算符重载"></a>五、运算符重载</h2><h3 id="5-1、为什么需要重载运算符"><a href="#5-1、为什么需要重载运算符" class="headerlink" title="5.1、为什么需要重载运算符"></a>5.1、为什么需要重载运算符</h3><p>函数可以重载，运算符也可以重载。</p><p>运算符重载：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型。</p><h3 id="5-2、运算符重载简介"><a href="#5-2、运算符重载简介" class="headerlink" title="5.2、运算符重载简介"></a>5.2、运算符重载简介</h3><h4 id="5-2-1、语法形式"><a href="#5-2-1、语法形式" class="headerlink" title="5.2.1、语法形式"></a>5.2.1、语法形式</h4><p>运算符重载的一般语法如下：</p><pre class="line-numbers language-c++"><code class="language-c++"><返回类型说明符> operator <运算符符号>(<参数表>){    <函数体>}                          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-2、可以被重载的运算符"><a href="#5-2-2、可以被重载的运算符" class="headerlink" title="5.2.2、可以被重载的运算符"></a>5.2.2、可以被重载的运算符</h4><pre class="line-numbers language-c++"><code class="language-c++">算术运算符：+、-、*、/、%、++、--位操作运算符：&、|、~、^(位异或)、<<(左移)、>>(右移)逻辑运算符：!、&&、||比较运算符：<、>、>=、<=、==、!=赋值运算符：=、+=、-=、*=、/=、%=、&=、|=、^=、<<=、>>=其他运算符：[]、()、->、,、new、delete、new[]、delete[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3、不被重载的运算符"><a href="#5-2-3、不被重载的运算符" class="headerlink" title="5.2.3、不被重载的运算符"></a>5.2.3、不被重载的运算符</h4><p>==不能被重载的运算符，其余的都可以被重载==</p><pre class="line-numbers language-c++"><code class="language-c++">逗号“.”、?号表达式“? :”、sizeof、作用域“::”、指针运算符“*”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;int main(){    string a = "hello";    string b = "world";    cout << a+b << endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3、友元运算符重载"><a href="#5-3、友元运算符重载" class="headerlink" title="5.3、友元运算符重载"></a>5.3、友元运算符重载</h3><h4 id="5-3-1、含义"><a href="#5-3-1、含义" class="headerlink" title="5.3.1、含义"></a>5.3.1、含义</h4><p>指：运算符重载作为类的友元</p><h4 id="5-3-2、语法形式"><a href="#5-3-2、语法形式" class="headerlink" title="5.3.2、语法形式"></a>5.3.2、语法形式</h4><p>友元运算符重载的语法形式：</p><pre class="line-numbers language-c++"><code class="language-c++">class 类名{    friend 返回类型 operator 运算符(形参表);}类外定义格式:返回类型 operator 运算符(参数表){    函数体;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-3、四则运算符运算"><a href="#5-3-3、四则运算符运算" class="headerlink" title="5.3.3、四则运算符运算"></a>5.3.3、四则运算符运算</h4><pre class="line-numbers language-c++"><code class="language-c++">/*四则运算符运算*/#include <iostream>using namespace std;class Demo{public:        Demo(int val):myval(val)    {        cout<<__LINE__<<endl;    }    public:        int getval()const    {        return this->myval;    }        friend Demo operator + (Demo &obj1, Demo &obj2);    friend Demo operator - (Demo &obj1, Demo &obj2);    friend Demo operator * (Demo &obj1, Demo &obj2);    friend Demo operator / (Demo &obj1, Demo &obj2);    private:    int myval;};//重载运算符 '+'//'+' 是双目运算符，需要两个参数Demo operator + (Demo &obj1, Demo &obj2){    Demo obj3(obj1.myval + obj2.myval);    //运算obj1和obj2的和然后再通过构造函数    return obj3;}Demo operator - (Demo &obj1, Demo &obj2){    Demo obj3(obj1.myval - obj2.myval);    //运算obj1和obj2的和然后再通过构造函数    return obj3;}Demo operator * (Demo &obj1, Demo &obj2){    Demo obj3(obj1.myval * obj2.myval);    //运算obj1和obj2的和然后再通过构造函数    return obj3;}Demo operator / (Demo &obj1, Demo &obj2){    Demo obj3(obj1.myval / obj2.myval);    //运算obj1和obj2的和然后再通过构造函数    return obj3;}int main(int argc, char *argv[]){    Demo a(8);    Demo b(2);    Demo c = operator + (a, b);    //Demo c = a+b;    Demo d = operator - (a, b);    //Demo d = a-b;    Demo e = operator * (a, b);    //Demo d = a*b;    Demo f = operator / (a, b);    //Demo d = a/b;        cout << a.getval() << endl;    cout << b.getval() << endl;    cout << "a + b: " << c.getval() << endl;    cout << "a - b: " << d.getval() << endl;    cout << "a * b: " << e.getval() << endl;    cout << "a / b: " << f.getval() << endl;        return 0;}/*cout：15151515151582a + b: 10a - b: 6a * b: 16a / b: 4*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-4、”-”运算符"><a href="#5-3-4、”-”运算符" class="headerlink" title="5.3.4、”++”运算符"></a>5.3.4、”++”运算符</h4><pre class="line-numbers language-c++"><code class="language-c++">/*前++与后++的实现*/#include <iostream>using namespace std;class Demo{public:    Demo (int x) :myval(x){ cout << __LINE__<<endl; }public:    int getval()const    {        return this->myval;    }    friend Demo operator ++( Demo &obj, int  );  //后 ++  int 作为 占位符     friend Demo operator ++(  Demo &obj );private:    int myval;};//重载运算符 "++"// ++ 单目运算符  需要指定一个参数#if 1Demo operator ++( Demo &obj, int val )  //后++{    Demo obj2(obj.myval++);    return obj2; }#endif #if 1Demo operator ++(Demo &obj )  //前 ++ {    Demo obj2(++obj.myval);    return obj2; }#endif int main(){    Demo a(222);    Demo b(444);  /*       a++; //等价 operator ++ (a);    Demo c = a++;*/    Demo c = ++a;     cout << a.getval()<<endl;    cout << b.getval()<<endl;    cout << c.getval()<<endl;   // cout << a.getval()<<endl;    return 0;}/*cout：666223444223*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-5、”-”运算符"><a href="#5-3-5、”-”运算符" class="headerlink" title="5.3.5、”!”运算符"></a>5.3.5、”!”运算符</h4><pre class="line-numbers language-c++"><code class="language-c++">/*!运算*/#include <iostream>using namespace std;class Demo{public:    Demo (bool flag = true){         this->flag = flag;        cout << __LINE__<<endl;     }public:    friend bool  operator !( Demo &obj );  private:    bool flag;};//重载运算符 "!"// ! 单目运算符  需要指定一个参数#if 1bool  operator !( Demo &obj )  {    return !obj.flag; }#endif int main(){    Demo a(true);    Demo b(false);     if(!a)    {        cout <<"a is false"<<endl;     }else     {                cout <<"a is true"<<endl;     }    return 0;}/*cout：88a is true*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4、成员函数运算符重载"><a href="#5-4、成员函数运算符重载" class="headerlink" title="5.4、成员函数运算符重载"></a>5.4、成员函数运算符重载</h3><p>第一个参数类型和对象类型匹配，可以使用this 指针，那么形参个数可以 减 1。</p><h4 id="5-4-1、语法形式"><a href="#5-4-1、语法形式" class="headerlink" title="5.4.1、语法形式"></a>5.4.1、语法形式</h4><p>成员函数运算符重载的语法形式：</p><pre class="line-numbers language-c++"><code class="language-c++">class 类名{    返回类型 operator 运算符(形参表);}类外定义格式:返回类型:: operator 运算符(形参表){    函数体;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2、”-”运算符"><a href="#5-4-2、”-”运算符" class="headerlink" title="5.4.2、”+=”运算符"></a>5.4.2、”+=”运算符</h4><pre class="line-numbers language-c++"><code class="language-c++">/*+=运算*/#include <iostream>using namespace std;class Demo{public:    Demo(int x):myval(x)    {        cout <<__LINE__<<endl;    }public:    int getval()const ;         Demo & operator +=(Demo &obj); //声明运算符重载 +=private:    int myval;};int Demo:: getval() const{    return this->myval;}//重载运算符  +=//+=：双目运算符，由于该重载函数是类的成员，则之需要传一个参数即可，//另一个参数可以用this直接访问//a+=b; 返回aDemo & Demo::operator +=(Demo &obj)  //内部成员函数实现重载  有this 指针， 可以用this ，传参是可以少一个{    this->myval += obj.myval;    return (*this); //返回this 指针指向的对象}int main(){    Demo a(222);    Demo b(444);    a += b;  //等价 a.operator +=(b);   //a = a + b    cout <<a.getval()<<endl;    cout <<b.getval()<<endl;    return 0;}/*cout：88666444*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2、友元成员函数"><a href="#5-4-2、友元成员函数" class="headerlink" title="5.4.2、友元成员函数"></a>5.4.2、友元成员函数</h4><p>(1)、用友元重载+实现对象与整型数相加 Demo b(5):</p><p>b+3;</p><p>(2)、成员函数重载实现b+3。</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:    Demo(int x):myval(x)    {        cout <<__LINE__<<endl;    }public:    int getval()const ;         int operator + (int ); //声明运算符重载 +   // friend int operator + (Demo &obj, int val); private:    int myval;};int Demo:: getval() const{    return this->myval;}#if 1/*内部成员函数实现运算符重载  有this 指针 ，传参是可以少一个**行参个数 = 运算符操作个数 - 1*/int Demo::operator + (int val){    return this->myval + val;  //返回this 指针指向的对象}#endif /*友元运算符重载：因为友元函数没有this 指针， 所以对应的重载运算符 需要多少个操作数 那则传递多少个 参数 * * */#if 0int operator + (Demo &obj, int val)  // 参是可以少一个{    return obj.myval + val;  //返回this 指针指向的对象}#endif int main(){    Demo a(222);    Demo b(444);   // cout << 3 + b << endl;   //（b, 3）;    cout << b + 3 << endl;   //（b, 3）;    return 0;}/*友元运算符重载和成员运算符重载 函数选择： * 1、如果成员函数的this 指针指向运算符的第一操作数的类型， 与当前对象类型匹配才可以用  this 指针 * 2、否则就使用友元运算符重载 * *//*cout：88447*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2、左移、输出"><a href="#5-4-2、左移、输出" class="headerlink" title="5.4.2、左移、输出"></a>5.4.2、左移、输出</h4><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:    Demo (int x):myval(x) { cout << __LINE__<<endl; }public:    int getval() const;    Demo operator << (int bits); //声明运算符重载  <<    friend  ostream & operator << (ostream &, Demo &);private:    int myval; };/**********************************************/    int Demo:: getval()const{    return this->myval;}Demo Demo::operator << (int bits) //运算符重载  <<  ：左移 运算  {#if 0    Demo tmp(this->myval << bits);    return tmp;#endif     return Demo (this->myval << bits);}ostream & operator << (ostream & out, Demo &obj ){    out <<" ______________" <<endl;    out << obj.myval << endl;    //return out;}int main(){    Demo a(1);     Demo b(2);#if 0        Demo tmp  = a << 2 ;        cout << a.getval()<<endl;        cout << tmp.getval() + 1<<endl;#endif    cout << a << b <<endl;   // a + b; //    return 0;}/*cout:66 ______________1 ______________2*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2、”-”括号””运算符；成员"><a href="#5-4-2、”-”括号””运算符；成员" class="headerlink" title="5.4.2、”()”括号””运算符；成员"></a>5.4.2、”()”括号””运算符；成员</h4><p>==特殊：”()”不能是友元，必须是成员==</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:    Demo (int x) :myval(x)    {     //cout << __LINE__<<endl;    }public:   // friend  int operator + ( Demo &, int a) ;    int operator + ( int a)    {        return this->myval + a;    }#if 1#if 1    int operator () (int a)    {        return myval + a;    }#else    int  operator () (int a, int b)    {        return  a + b;    }#endif #endif      // friend  int operator ()(Demo &obj, int a);  // error : ()只能是成员， 不能是友元    private:    int myval;};/*int operator ()(Demo &obj, int a){    return obj.myval + a;}*/int main(){    Demo a(5);  //初始化   /*     cout << a + 3 << endl; //cout <<a.operator+(3)  << endl;    cout << (a + 3) << endl; //cout << operator (a + 3) <<endl;*/    #if 0    cout << a(6) << endl;    cout << a( 9 + 3 ) << endl;#endif         return 0;}/*cout:*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5、运算符重载注意事项"><a href="#5-5、运算符重载注意事项" class="headerlink" title="5.5、运算符重载注意事项"></a>5.5、运算符重载注意事项</h3><pre class="line-numbers language-c++"><code class="language-c++">A、除关系运算符"."、成员指针运算符".*"、作用域运算符"::"、sizeof运算符和三目运算符"?:"以外，C++中的所有运算符都可以重载（其中“=”和“&”不必用户重载）。B、重载运算符限制在C++语言中已有的运算符范围内的允许重载的运算符之中，不能创建新的运算符。C、运算符重载的实质是函数重载，遵循函数重载的选择原则。D、重载之后的运算符不能改变运算符的优先级和结合性，也不能改变运算符操作数的个数及语法结构。E、运算符重载不能改变该运算符用于内部类型对象的含义。F、运算符重载是针对新类型数据的实际需要对原有运算符进行的适当的改造，重载的功能应当与原有功能相类似，避免没有目的地使用重载运算符。G、重载运算符的函数不能有默认的参数，否则就改变了运算符的参数个数。H、重载的运算符只能是用户自定义类型，否则就不是重载而是改变了现有的C++标准数据类型的运算符的规则。I、运算符重载可以通过成员函数的形式，也可是通过友元函数，非成员非友元的普通函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、模板"><a href="#六、模板" class="headerlink" title="六、模板"></a>六、模板</h2><h3 id="6-1、什么是模板"><a href="#6-1、什么是模板" class="headerlink" title="6.1、什么是模板"></a>6.1、什么是模板</h3><h4 id="6-2-1、模板简介"><a href="#6-2-1、模板简介" class="headerlink" title="6.2.1、模板简介"></a>6.2.1、模板简介</h4><p>C++中模板是支持参数化多态的工具，就是让类或者函数声明为一种通用类型，使得类中的某些数据成员或者成员函数的参数、返回值在实际使用时可以是任意类型。</p><p>使用模板的目的就是能够让程序员编写与类型无关的代码,模板也是泛型编程的基。</p><h4 id="6-2-2、模板通常两种形式"><a href="#6-2-2、模板通常两种形式" class="headerlink" title="6.2.2、模板通常两种形式"></a>6.2.2、模板通常两种形式</h4><p>模板是一种对类型进行参数化的工具，通常有两种形式：</p><p><strong>函数模板：</strong><br>    函数模板针对仅参数类型不同的函数<br><strong>类模板：</strong><br>    类模板针对仅数据成员和成员函数类型不同的类</p><h4 id="6-1-3、函数模板"><a href="#6-1-3、函数模板" class="headerlink" title="6.1.3、函数模板"></a>6.1.3、函数模板</h4><pre class="line-numbers language-c++"><code class="language-c++">仅针对函数参数类型，返回值不同，功能相同的函数template < class形参名, class形参名> 返回类型 函数名(参数列表){    函数体}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;//声明及定义 类型模板函数template <typename T>    //typename 可以class 代替T add(T a, T b){    return (a + b);}int main(int argc, char *argv[]){    double e = add(1.2, 3.4);        //根据返回值 类型自动匹配 T 为 double    cout << "e: " << e << endl;    int sum = add(5, 6);            //根据返回值 类型自动匹配 T 为 int    cout << "sum: " << sum << endl;        //cout << add(10, 1.1) << endl;    //error：自动匹配的时候 没有匹配到 10的int和1.1的double    //因为没有定义两个类型的函数模板        cout << "add: " << add<double>(10, 1.1) << endl;    //添加 add<double> 即可解决    return 0;}/*cout:e: 4.6sum: 11add: 11.1*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:    Demo (int x):myval(x)    {        cout << __LINE__ << endl;    }    ~Demo()    {        cout << __LINE__ << endl;    }public:    int getval()const    {        return this->myval;    }    Demo operator + (Demo &obj)        //成员运算符重载    {        cout << "++++" << endl;        return Demo(this->myval + obj.myval);    }private:    int myval;};/*模板说明： *template <class T> *        template 模板说明关键字 *        class 和 typename 一样 类型说明关键字 *        T : 模板行参 用来替代 数据类型 */    //声明及定义 类型模板函数 必须使用 template 说明template <typename T>    //typename 可以用class代替T add(T &a, T &b){    return (a + b);}int main(int argc, char *argv[]){    Demo a(222);    Demo b(444);        Demo c = add<Demo>(a, b);        cout << c.getval() << endl;        return 0;}/*cout:1515++++15666191919*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;//template <class T> T add(T , T);  //函数模版声明#if 0template <typename B>  //函数模版的定义B add( B x, B y ){    return x + y;}#else template <class T1, class T2, class T3>T1 add( T2 x, T3 y ){    return x + y;}#endif int main(){    #if 0    cout << add(1, 3) <<endl;    cout << add(1.1, 3.1) <<endl;    cout << add< >(2,3) << endl; //函数模版调用，自动匹配数据类型    cout << add< >(2.1,3.1) << endl; //函数模版调用，自动匹配数据类型    cout << add< double >(2,3) << endl; //函数模版调用显式转换为double     cout << add< double >(4, 3.1) << endl; //函数模版调用, 显示指定返回值类型为 double     cout << add< >(2,3) << endl; //函数模版调用，自动匹配数据类型#endif     cout << add< int>(2,3) << endl; //函数模版调用，显示指定返回值类型为 int     cout << add< double>(2,3) << endl; //函数模版调用，需要显示指定 返回值类型 double     cout << add< double >(1, 3.1) <<endl;    cout << add< double , double, int  >(2.7 , 3.3) << endl; //函数模版调用， 第一个类型匹配万为 返回值类型，后两个为参数类型， 如果参数类型不匹配，会发生强转后再计算 然后返回指定的 返回值类型     return 0;}/*cout:554.15.7*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-4、类模板"><a href="#6-1-4、类模板" class="headerlink" title="6.1.4、类模板"></a>6.1.4、类模板</h4><pre class="line-numbers language-c++"><code class="language-c++">类模板针对仅数据成员和成员函数类型不同的template < class形参名, class形参名，…> class 类名{    …}template <class T, typename B …>template： 关键字，说明是一个模板class T ： 定义类型模板形参，class 等价于 typenameT ： 类型模板形参，用来替换数据类型注意：模板声明和全局只能在全局。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2、类型模板参数"><a href="#6-2、类型模板参数" class="headerlink" title="6.2、类型模板参数"></a>6.2、类型模板参数</h3><p>指类中成员方法返回值类型 参数类型 及 成员变量类型为通用类型 </p><p>语法形式：</p><pre class="line-numbers language-c++"><code class="language-c++">template <typename T, ...., typename C>class 类名{    public:    T 方法名(T 参数名)    {        语句块；    }    private：        T 成员变量名；}；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;//定义 类模版template <typename T>  //声明类型模版 Ｔ class Demo{public:    Demo( T  val){         myval = val;    }  //由于 Ｔ 是通用 类型，所以 构造函数不能指定默认参数值    ~Demo(){};public:   void  setval (T val);    T getval() const;private:    T myval;};//类外部成员方法实现template <typename T>  //声明类型模版 Ｔ void Demo<T> ::setval( T val ) {    myval = val;}template <typename T>  //声明类型模版 Ｔ T Demo<T>::getval()const{    return myval;}int main(){    Demo <int> obj(123);   // Demo <> obj(222);    obj.setval(666);    cout << obj.getval() <<endl;      return 0;}/*cout:666*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>1&gt; 模板形参表示的是一个未知的类型。模板类型形参可作为类型说明符用在模板中的任何地方，与内置类型说明符或类类型说明符的使用方式完全相同，即可以用于指定返回类型，变量声明等。<br>2&gt; 类型形参仅由关键字class或typename后接说明符构成<br>3&gt; 譬如函数模板</p><pre class="line-numbers language-c++"><code class="language-c++">template<class T>  T func(T var){    …}template< typename T>  T func(T var){    …}其中T就是一个类型形参    形参var及返回值类型为T，实际类型在实例化时确定。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3、非类型模板参数"><a href="#6-3、非类型模板参数" class="headerlink" title="6.3、非类型模板参数"></a>6.3、非类型模板参数</h3><p>模板的非类型形参就是内置类型形参<br>譬如：</p><pre class="line-numbers language-c++"><code class="language-c++">template<class T, int var> class Demo{    …};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中int var就是非类型的模板形参。<br>非类型形参在模板定义的内部是常量值。<br>非类型模板的形参只能是整型、指针和引用，像double，String, String **这样的类型是不允许的。但是double &amp;，double *，对象的引用或指针是正确的。非类型模板形参的实参如果是表达式，则必须是一个常量表达式，在编译时计算出结果。<br>非类型模板形参和实参间允许类型转换。</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include <assert.h>using namespace std;//非类型模版参数template <typename T, int len>  //int len  是非类型行参，指定数组元素个数class Array{public:    Array(T val);     ~Array();public:    void setval(const int pos, const T val); //设置对应下标的元素    T getval( const int pos ) const;  //获取对应下标的元素值private:    T *buffer;  //保存数组首地址};template <typename T, int  len>Array<T,len>::Array(T val)    //构造函数实现{    cout << __func__<< "line:"<<__LINE__<<endl;    buffer = new T [len];    assert(NULL != buffer);    for(int i=0; i<len; i++)    {        buffer[i] = val;    }}template <typename T, int  len>Array<T, len>::~Array()  //析构函数的实现{        cout << __func__<< "line:"<<__LINE__<<endl;    delete []buffer;     buffer = NULL; }template <typename T, int  len>void Array<T,len>::setval(const int pos, const T val)  //设置对应下标的元素值{    buffer[pos] = val; }template <typename T, int  len>T Array<T, len> ::getval(const int pos) const //获取对应下标的元素值{    return buffer[pos]; }int main(){    Array<int, 10> obj(0);    for(int i=0; i<10 ;i++)    {        obj.setval(i, i+1);    }    for(int i=0; i<10 ; i++)    {        cout<<obj.getval(i) <<endl;     }    return 0;}/*cout:12345678910~Arrayline:33*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4、默认模板参数"><a href="#6-4、默认模板参数" class="headerlink" title="6.4、默认模板参数"></a>6.4、默认模板参数</h3><p>类模板的类型形参可以有默认值，函数模板的类型形参则不能。<br>函数模板和类模板都可以为模板的非类型形参提供默认值。<br>类模板的类型形参默认值形式为：</p><pre class="line-numbers language-c++"><code class="language-c++">template<class T1, class T2=int> class Demo{    …};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>类型形参T1、T2，其中T2的默认类型为int。<br>类模板类型形参默认值和函数的默认参数一样，如果有多个类型形参则从左起的莫个形参设定了默认值之后，右边所有模板形参都要设定默认值<br>和函数默认参数一样，如果在类模板的外部定义类中的成员时，模板形参表应省略默认的形参类型。</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include <assert.h>using namespace std;//默认类型参数模版//template <typename T, int len>                //int len  是非类型行参，指定数组元素个数template <typename T = int , int len=10>        //指定默认参数class Array{public:    Array(T val);     ~Array();public:    void setval(const int pos, const T val);    //设置对应下标的元素    T getval( const int pos ) const;            //获取对应下标的元素值private:    T *buffer;                                  //保存数组首地址};template <typename T, int  len>Array<T,len>::Array(T val)                       //构造函数实现{    cout << __func__<< "line:"<<__LINE__<<endl;    buffer = new T [len];    assert(NULL != buffer);    for(int i=0; i<len; i++)    {        buffer[i] = val;    }}template <typename T, int  len>Array<T, len>::~Array()                         //析构函数的实现{        cout << __func__<< "line:"<<__LINE__<<endl;    delete []buffer;     buffer = NULL; }template <typename T, int  len>void Array<T,len>::setval(const int pos, const T val)  //设置对应下标的元素值{    buffer[pos] = val; }template <typename T, int  len>T Array<T, len> ::getval(const int pos) const   //获取对应下标的元素值{    return buffer[pos]; }int main(){    //Array<int, 10> obj(0);    Array<  > obj(0); // 指定默认参数，可以具体参数    for(int i=0; i<10 ;i++)    {        obj.setval(i, i+1);    }    for(int i=0; i<10 ; i++)    {        cout<<obj.getval(i) <<endl;     }    return 0;}/*cout:12345678910~Arrayline:35*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5、友元函数模板"><a href="#6-5、友元函数模板" class="headerlink" title="6.5、友元函数模板"></a>6.5、友元函数模板</h3><p>如果一个类是模板类，又要实现运算符重载，一般的，运算符重载是友员函数，那么显然会涉及到一个问题，一个友员如何操作模板类。<br>其实质就是类模板和函数模板的综合应用。</p><pre class="line-numbers language-javascript"><code class="language-javascript">#include <span class="token operator">&lt;</span>iostream<span class="token operator">></span>#include <span class="token operator">&lt;</span>assert<span class="token punctuation">.</span>h<span class="token operator">></span>using namespace std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*友元模板*/</span>template <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//类 模板</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token punctuation">:</span>    <span class="token function">Demo</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span><span class="token punctuation">;</span>#<span class="token keyword">if</span> <span class="token number">0</span>    friend T operator <span class="token operator">+</span> <span class="token punctuation">(</span>Demo <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>obj1<span class="token punctuation">,</span> Demo <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>obj2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj1<span class="token punctuation">.</span>x <span class="token operator">+</span> obj2<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>#<span class="token keyword">else</span>    template <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">></span>    friend B operator <span class="token operator">+</span> <span class="token punctuation">(</span>Demo <span class="token operator">&lt;</span>B<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> Demo <span class="token operator">&lt;</span>B<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#endif<span class="token keyword">private</span><span class="token punctuation">:</span>    T x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>template <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">></span>Demo <span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Demo</span><span class="token punctuation">(</span>B x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>template <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//函数模板 和 类模板结合成为函数模板</span>B operator <span class="token operator">+</span> <span class="token punctuation">(</span>Demo <span class="token operator">&lt;</span>B<span class="token operator">></span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> Demo <span class="token operator">&lt;</span>B<span class="token operator">></span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">+</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**友元函数模板*    类模板中的友元运算符重载函数，在类外部定义时，必须单独说明该函数为一个函数模板*    由于友元函数不是类的成员函数，相当于定义了一个普通的函数模板*    因此，在类中声明时，也必须使用template关键字声明**    友元函数模板 实质是类模板的结合***/</span>int <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Demo <span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;</span><span class="token operator">&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;</span><span class="token operator">&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*cout:3*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、类继承"><a href="#七、类继承" class="headerlink" title="七、类继承"></a>七、类继承</h2><h3 id="7-1、概念"><a href="#7-1、概念" class="headerlink" title="7.1、概念"></a>7.1、概念</h3><p>在进行C编程的时候，<code>代码重用的目的就是提高开发效率、减少错误</code>、让大规模代码开发的关注点转到软件结构上。<br>C++(OOP)的代码重用除了简单层次的提供类库,还提出了更高层次：<br>类继承( inheritance)、多态( Polymorphism)、泛型编程( Generic Programming)，等等。</p><p>在C++中,所谓“继承”就是在一个已存在的类的基础上建立一个新的类。</p><p>学生称为基类或父类</p><p>新建如：小学生称为派生类或子类</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/be673280bva0bd6c7d867d80530e9d8f?fid=1789975539-250528-987681328585093&amp;time=1635296400&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-e5Nh3UcgG3rr0RoAZPW4OtTuyls=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=26281301271095606&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h3 id="7-2、派生一个类"><a href="#7-2、派生一个类" class="headerlink" title="7.2、派生一个类"></a>7.2、派生一个类</h3><h4 id="7-2-1、语法形式"><a href="#7-2-1、语法形式" class="headerlink" title="7.2.1、语法形式"></a>7.2.1、语法形式</h4><pre class="line-numbers language-c++"><code class="language-c++">class子类名:权限访问限定符 基类名1,权限访问限定符 基类名2,...{    //class body};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-2、权限访问符"><a href="#7-2-2、权限访问符" class="headerlink" title="7.2.2、权限访问符"></a>7.2.2、权限访问符</h4><p>c:表示基类的 public/ protected成员可以被子类访问,通过子类对象可访问基类的 oublic成员<br>tected/private:表示基类的 public/ protected.减员可以被子类访问,通过子类对象不能访问基类</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;#define pri() cout <<__func__<<"line:"<<__LINE__<<endl;class Father{public:    double money;     void show() { pri(); }protected:    void  setMoney(double m)    {        money = m;    }private:    int age; };//派生class Son : public Father{    //公有继承public:    void showMoney()    {        money = 120;  //通过子类内部可以识别并访问 公有成员        setMoney(10000);//通过子类内部可以识别并访问 保护成员        //age = 18;  //error： 因为 age 是父类私有成员，能继承，但是不能访问修改    }protected:    int sex; private:    char idCard[18]; };int main(){    /*    Father fa;    fa.setMoney(40000);     cout << fa.money << endl;*/    Son obj; //    obj.money = 20000; //通过子类外部对象访问 父类 继承下来的公有成员于    cout << obj.money <<endl;  //  cout << fa.money << endl;  //父子类  money 是彼此独立 不是共享    obj.show(); //    // obj.setMoney(666);// error:通过子类外部对象访问  父类 的保护成员，不能修改    // obj.age = 18;  //error:通过子类外部对象访问 可以识别到父类私有成员 但是不能访问修改    //    return 0;}/*通过 Father 派生出一个 Son 类，这就算类的派生，Son 类 继承下来的公有成员于 Father类 * * 公有继承： *   1、派生类继承基类的 公有、保护、私有成员 *   2、在类的外部： 通过派生类对象访问公有成员（因为派生继承过来的属性、行为、权限不变） *   3、在类内部：通过成员函数可以访问 基类的公有和保护成员 *   4、私有成员不管类内部、外部都不能访问 *//*cout:20000showline:8*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">/*子类父类重名*/    #include <iostream>using namespace std;class Father{public:    double money;    void show(){        cout << __func__<<__LINE__<<endl;    }};class Son : public Father {public:    double money;    void show(){        cout << __func__<<__LINE__<<endl;    }};int main(){    Son obj;    obj.money = 10000;   // obj.show1();  //    obj.show();  //        obj.Father::money = 20000;    obj.Father::show();    return 0;}/*公有继承时，派生类成员将会隐藏 基类的同名成员 * 即：不能通过派生类对象访问基类成员 *若要访问：可以通过:: 访问被隐藏的基类成员 * *隐藏：作用域不同 函数名相同  参数  返回值可以不同的情况 会是隐藏 *//*cout:show15show7*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">/*保护继承*/#include <iostream>using namespace std;class Father{public:    double money;    void show(){ ; }protected:    void setMoney(double m)    {        money = m;    }private:    int age;};class Son: protected Father{   //保护继承 和私有继承 都不能通过子类外部 对象访问，但是可以通过类内部访问，//class Son: private  Father{    //如果变为 私有继承,那么 该 Son 被再次继承时，不能访问 任何Father 成员成员public:    int showMoney()    {        money = 20;  //公有成员 可以通过类内部访问        setMoney(10000);  //保护 可以通过类内部访问        //age =18;    // 私有 不能访问    }protected:    int x;private:    char idCard[18];};class Son2 :public  Son{public:    int showMoney()    {        money = 20;  //公有成员 可以通过类内部访问        setMoney(10000);  //保护 可以通过类内部访问        //age =18;    // 私有 不能访问    }};int main(){    Son obj;    #if 0    obj.money = 16000;   //通过类的外部对象都不能访问    obj.show();    obj.setMoney(20000);    obj.age = 18;    #endif     return 0;}/*cout:*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有三种继承方式:公有继承、保护继承、私有继承。<br>派生类访问基类的成员的权限如下表所示:</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/f50a613f5uc29527e90c9f95f410d0fa?fid=1789975539-250528-426817568763585&amp;time=1635303600&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-ec/XTTkcvW8viNLRR77HutZJ+3k=&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=28317448917166343&amp;dp-callid=0&amp;file_type=0&amp;size=c10000_u10000&amp;quality=90&amp;vuk=-&amp;ft=video"></p><h3 id="7-3、派生类的构造及析构"><a href="#7-3、派生类的构造及析构" class="headerlink" title="7.3、派生类的构造及析构"></a>7.3、派生类的构造及析构</h3><p>派生类不能继承基类的构造jc、析构函数。<br>派生类有自己的构造、析构函数。<br>如果基类构造函数有参数,在从派生类的构造函数把参数传递给基类的构造函数。.<br>派生类名∷构造函数名(参数列表):基类名(参数列表) 。</p><ul><li>继承时，构造顺序：先基类构造，再派生构造<br>析构顺序：先派生类析构，再基类构造</li><li>包含对象成员的派生类和基类构造顺序：<br>先 基类构造，再对象成员构造，最后派生类构造</li><li>析构顺序与构造顺序相反</li></ul><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;#define pri() cout << __func__ << "line:"<<__LINE__<< endl;class Base{public:    Base(){pri(); };    Base(int x):x(x) {pri();}    ~Base(){pri(); }    int x;};class Subclass: public Base{public:    //Subclass (int x) :Base(x), a(x)  // 显示调用    Subclass (int x) : a(x)   //隐式调用默认构造    {        pri();    }    ~Subclass(){pri(); }private:    int a;};int main(){    Base b(3);    Subclass s(5);    cout << s.x <<endl;    return 0;}/*    ★★★  *     继承中，定义 派生类对象时，基类和派生类的顺序： *   构造：先基类构造、再派生类构造（实例化对象时，要先实例化基类） *   析构：和构造顺序相反： 先析构派生类 再析构基类 *   *   构造的顺序实现方法： *      1、在派生类构造函数初始化列表 中，隐式调用基类 的默认构造 *      2、如果 基类只有带参的构造函数，那么派生类构造函数初始化列表必须显示调用基类构造 *      3、当基类默认构造函数和带参构造函数同时出现时，派生类中只会调用带参构造，不会默认构造 * */ /*cout:Baseline:8Baseline:7Subclassline:190~Subclassline:21~Baseline:9~Baseline:9*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：类体中显示说明，带参数的构造函数，那么无参数的默认构造 不会自动生成</strong> </p><ul><li>派生类构造函数参数初始化列表中，隐式调用基类 默认构造（无参数的构造函数）</li><li>如果基类出现带参数构造函数，必须在派生类的构造函数参数初始化列表中，显示调用 基类带参构造函数</li><li>如果派生对象成员的构造函数带参数，必须在派生类的构造函数参数初始化列表中，为对象成员这个变量赋初值。</li></ul><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;#define pri() cout << __func__<<"line:"<<__LINE__<<endl;class A{public:   // A(){pri();}    A(int x) {pri();}    ~A(){pri();}};class Base{  //基类public:    Base (int x){pri();}    ~Base(){pri();}};class subclass:public Base{  //派生类public:    subclass():Base(5), x(7), obj(6)    {        pri();    }    ~subclass(){pri();}private:    int x;      A obj; //成员对象，定义时，系统暂时不会自动调用A的构造函数来初始化obj对            };int main(){    subclass s;  //派生对象    return 0;}/*含有对象成员构造顺序：   * 构造顺序： 先基类  再 A 对象 再 派生类   * * 析构顺序：和构造顺序相反 * *//*cout:Baseline:13Aline:7subclassline:22~subclassline:24~Aline:8~Baseline:14*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4、is-a关系"><a href="#7-4、is-a关系" class="headerlink" title="7.4、is-a关系"></a>7.4、is-a关系</h3><p><strong>is-a关系</strong><br>is-a 一般是继承关系，has-a一般是组合。</p><ul><li>is-a 派生类对象也是一个基类对象，基类对象能够做的操作，派生类也可以</li><li>has-a 是一种聚合，表示一个类中有另一个类的对象。</li></ul><h3 id="7-5、多重继承"><a href="#7-5、多重继承" class="headerlink" title="7.5、多重继承"></a>7.5、多重继承</h3><p> <strong>多重继承的路径二义性：</strong><br>解决方式，作用域访问符 和 设置虚基类（虚继承（继承时有 virtual）共同的基类叫虚基类 </p><pre class="line-numbers language-c++"><code class="language-c++">/*向上向下隐式转换*/#include <iostream>using namespace std;class Base{public:    Base (int x ):x(x)   //这里的 第一次  x = 10     {         cout<< "base" <<__LINE__<<endl;     }    ~Base(){              cout<< "~Base" <<__LINE__<<endl;     }    int x;   };class Subclass:public Base{public:    Subclass(int x, int y): Base(x),y(y){    //初始化 base 的x 为 1 ， subcalss 的y 为 4            cout<< "Subclass" <<__LINE__<<endl;     }    ~Subclass(){        cout<< "~Subclass" <<__LINE__<<endl;     }        int y;};int main(){    Subclass s(1,4);  //派生类对象    #if 0    Base b(10);       //基类对象    cout << b.x << endl;  //结果应该是10        b = s;  // 将 派生类的基类部分重新赋值给 基类对象b， 所以这时候，b对象的数据被 s的基类覆盖了，后边打印b.x             //就不再是 10 而是 1            //c++类型兼容规则：            //公有继承默认小范围转大范围（向上隐士转换）:将派生类中基类的数据进行赋值，派生类自己的部分丢弃       cout << b.x << endl;  //x  为 1    //cout << s.x << endl;   // cout << s.y << endl;   //s  = b;    //基类到 派生的赋值   向下隐式转换   此刻不行#endif     Subclass *q = new Subclass(7,8);    Base *p   = new  Base(9);    p = q;     cout << p->x << endl;    //delete q;    //q = NULL;    // delete p;   // p = NULL;     //    Base *m  = new Subclass(11, 22);    Base &a = s;    cout <<  m->x <<endl;   cout <<  a.x <<endl;    return 0;}/*cout:base8Subclass20base8Subclass20base87base8Subclass20111~Subclass23~Base12*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">/*狼人*/#include <iostream>using namespace std;#define pri()   cout << __func__<<__LINE__<<endl;class Man{public:    Man(){pri();}    ~Man(){pri();}    int x;};class Wolf{public:    Wolf(){pri();}    ~Wolf(){pri();}    int x;};class WolfMan:public Wolf, public Man{public:    WolfMan(){pri();}    ~WolfMan(){pri();}};int main(){    WolfMan wm;    //wm.x  = 100;  //error :有歧义 （x 有二义性）,解决方式 ：作用域 访问符 ：：    wm.Wolf::x = 12;    wm.Man::x  = 13;    return 0;}/*多重继承构造顺序： *  从左边起第一个继承的基类开始构造，再到第二个  再到派生类构造 *  析构顺序：相反 *//*cout:Wolf13Man6WolfMan20~WolfMan21~Man7~Wolf14*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">虚基类#include <iostream>using namespace std;#define pri()   cout << __func__<<__LINE__<<endl;class Animal{public:    Animal(){pri();}    ~Animal(){pri();}    int x;    };class Man: public virtual  Animal {  //在继承的时候 加 virtual声明 为虚继承public:    Man(){pri();}    ~Man(){pri();}};class Wolf :public virtual Animal{public:    Wolf(){pri();}    ~Wolf(){pri();}};class WolfMan:public Wolf, public Man{public:    WolfMan(){pri();}    ~WolfMan(){pri();}};int main(){    WolfMan wm;    wm.x  = 100;  //error :有歧义 （x 有二义性）,解决方式 ：作用域 访问符 ：：    cout << wm.x <<endl;    wm.Wolf::x = 12;    cout << wm.x <<endl;    wm.Man::x  = 13;    cout << wm.x <<endl;    return 0;}/*多重继承构造顺序： *  从左边起第一个继承的基类开始构造，再到第二个  再到派生类构造 *  析构顺序：相反 *//*cout:Animal6Wolf20Man14WolfMan261001213~WolfMan27~Man15~Wolf21~Animal7*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、多态"><a href="#八、多态" class="headerlink" title="八、多态"></a>八、多态</h2><h3 id="8-1、什么是多态"><a href="#8-1、什么是多态" class="headerlink" title="8.1、什么是多态"></a>8.1、什么是多态</h3><p>即多态为: 一种方法,多种实现</p><p>多态（Polymorphism）按字面的意思就是“多种状态”，简单地概括为“一个接口，多种方法”，程序在运行时才决定调用的函数，是面向对象编程领域的核心概念。<br>即多态为：<code>一种方法，多种实现</code>；<br>多态性是将接口与实现进行分离；用形象的语言来解释就是实现以共同的方法，但因个体差异，而采用不同的策略。<br>在面向对象编程（OOP）的主要特征<br>            封装wrap：实现细节隐藏，使得代码模块化。把成员数据和成员函数封装起来，通过公共的成员接口进行成员数据的操作。<br>            继承inheritance：扩展已存在的代码，目的是为了代码重用<br>            多态polymorphism：目的是为了接口重用。也就是说，不论传递过来的究竟是哪个类的对象，函数都能够通过同一个接口调用到适应各自对象的实现方法。</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;#define pri() cout << __LINE__<<endl;class Base{public:    //void prnmsg(){pri();}    virtual  void prnmsg(){pri();}  //加virtual 关键字声明 为虚函数， 实现多态};class Subclass:public Base{  public:    void prnmsg(){pri();}};void test(Base *obj)  //接口  :多态：一个接口 实现不同的调用方法 {    obj->prnmsg();}int main(){    Base b;  // 基类对象    Subclass s;// 派生类对象    test(&b);  //  调基类     Base obj = b    test(&s);   //调派生类    Base obj = s  //向上隐式转换   还是 Base     /*会不会实现传什么调什么     *在这里  如果不用多态 不能实现传什么调什么  始终调基类     */   // s.prnmsg();  //派生类调用    //s.Base::prnmsg();    return 0;}/*cout:712*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2、虚函数"><a href="#8-2、虚函数" class="headerlink" title="8.2、虚函数"></a>8.2、虚函数</h3><p>有时候,希望子类和基类有相同的方法,但是行为却有所不同,这就是多<br>文里就引入了虚函数的概念。</p><p>有时候，希望子类和基类有相同的方法，但是行为却有所不同，这就是多态。这里就引入了虚函数的概念。<br>注意：简单继承，is-a的关系不是多态；另外函数重载，一般应该是行为类似，使用方法不同，也不是多态。<br>简单地说，用virtual修饰的成员函数，就是虚函数。虚函数的作用就是实现多态性（Polymorphism）。多态性是将接口与实现进行分离；用形象的语言来解释就是实现以共同的方法，但因个体差异，而采用不同的策略。<br>虚函数的限制如下：<br>            A、非类的成员函数不能定义为虚函数<br>            B、类的静态成员函数不能定义为虚函数<br>            C、构造函数不能定义为虚函数，但可以将析构函数定义为虚函数<br>            D、只需要在声明函数的类体中使用关键字“virtual”将函数声明为虚函数，而定义函数时不需要使用关键字“virtual”。<br>            E、当将基类中的某一成员函数声明为虚函数后，派生类中的同名函数（函数名相同、参数列表完全一致、返回值类型相关）自动成为虚函数。</p><h4 id="8-2-1、虚函数语法"><a href="#8-2-1、虚函数语法" class="headerlink" title="8.2.1、虚函数语法"></a>8.2.1、虚函数语法</h4><blockquote><p>class 类名{<br>        public:<br>            virtual 返回值类型 函数名1(参数列表)<br>            {    </p><p>​            }</p><p>​            …</p><p>​        virtual 返回值类型 函数名n(参数列表)<br>​            {</p><p>​            }</p><p>};            </p></blockquote><p>注意：（重点）<br>        虚函数是在运行时根据对象决定调用的函数；</p><h3 id="8-3、覆盖、重载、隐藏"><a href="#8-3、覆盖、重载、隐藏" class="headerlink" title="8.3、覆盖、重载、隐藏"></a>8.3、覆盖、重载、隐藏</h3><p><img src="D:\ZiyuBlogs\source_posts\C++程序设计.assets\1635388364929.png" alt="1635388364929"></p><h3 id="8-4、动态联编-动态链接"><a href="#8-4、动态联编-动态链接" class="headerlink" title="8.4、动态联编(动态链接)"></a>8.4、动态联编(动态链接)</h3><h4 id="8-4-1、联编-链接"><a href="#8-4-1、联编-链接" class="headerlink" title="8.4.1、联编(链接)"></a>8.4.1、联编(链接)</h4><p>就是将模块或者函数合并在一起生成可执行代码的处理过程。按照联编所进行的阶段不同，可分为两种不同的联编方法：静态联编和动态联编。<br>静态联编（静态链接）<br>是指在编译阶段就将函数实现和函数调用关联起来，因此静态联编也叫早绑定。<br>动态联编（动态链接）<br>是指在程序执行的时候才将函数实现和函数调用关联，因此也叫运行时绑定或者晚绑定。<br>C++中一般情况下联编也是静态联编，但是一旦涉及到多态和虚拟函数就必须要使用动态联编了。<br>重载只是一种语言特性，编译器根据函数不同的参数表，把同名函数区分开来，属于静态联编，与多态无关。引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚绑定，它就不是多态。”</p><h4 id="8-4-2、静态联编-静态链接"><a href="#8-4-2、静态联编-静态链接" class="headerlink" title="8.4.2、静态联编(静态链接)"></a>8.4.2、静态联编(静态链接)</h4><h4 id="8-4-3、动态联编-动态链接"><a href="#8-4-3、动态联编-动态链接" class="headerlink" title="8.4.3、动态联编(动态链接)"></a>8.4.3、动态联编(动态链接)</h4><p><img src="D:\ZiyuBlogs\source_posts\C++程序设计.assets\1635391644517.png" alt="1635391644517"></p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>using namespace std;class Base{public:    Base(int x, int b):x(x), b(b){}  //构造函数 参数初始化列表 给成员变量 付初始值    virtual void func1(){        cout << "line: " << __LINE__<<endl;   //虚函数表 成员 func 1 func 2        }    virtual void func2(){        cout << "line: " << __LINE__<<endl;    }    int getX(){ return x; }private:    int x;    //成员变量    int b;    //static int c;  //不占 大小};typedef void (*FUNC)(void);   //函数指针 int main(){    Base obj(10, 20); //定义基类对象  x 和 b  为 2 ，3     cout << "x: " << *((int *)&obj+1) << endl;    //    cout << "b: " << *((int *)&obj+2) << endl;#if 0        FUNC p = (FUNC) *(int *) (*((int *)&obj));    p();    p = (FUNC) *( (int *) (*((int *)&obj))+1);    p();#else        int vtbl = *(int *)&obj;   //obj的头4字节内容  eg：0x12315  这个数据只是16进制数值      FUNC p = (FUNC) *(int *)vtbl;  //将16进制数值强传为 地址 然后取头4个字节内容， 通过 函数指针强转 后调用得到 调用虚函数func1            // vtbl -> 0x1234               p();  //得到 调用虚函数  func 1说明 可以通过虚函数表首地址 第一个成员就算func1的入口地址    p = (FUNC) *((int *)vtbl+1);  //下一个能的得到 func2的调用 更加确定我结论的正确性    p();       cout<< sizeof(obj)<<endl;#endif}/*cout:712*/  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:\ZiyuBlogs\source_posts\C++程序设计.assets\1635393220060.png" alt="1635393220060"></p><h3 id="8-5、抽象类"><a href="#8-5、抽象类" class="headerlink" title="8.5、抽象类"></a>8.5、抽象类</h3><p>含有纯虚函数的类就是抽象类。<br>抽象类没有完整的信息,只能是派生类的基类<br>抽象类不能有实例,不能有静态成员<br>派生类应该实现抽象类的所有方法 </p><pre class="line-numbers language-c++"><code class="language-c++">/*纯虚函数*/#include <iostream>using namespace std;class Base{public:   //virtual void  prnmsg() ;  //虚函数   virtual void  prnmsg() = 0;  //纯虚函数(包含纯虚函数的累就是 抽象类)protected:    int y;private:    int x;};class Subclass:public Base{public:    void prnmsg(){        cout <<__LINE__<<endl;         //x = 10;         y = 20;        cout << y << endl;    }};void test (Base &obj){    obj.prnmsg();}int main(){    //Base obj;   //抽象类 不能有具体的实例 可以通过派生类的实现    Subclass obj;     test(obj);    return 0;}/*cout:x: 10b: 20line: 8line: 1112*/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-6、虚继承"><a href="#8-6、虚继承" class="headerlink" title="8.6、虚继承"></a>8.6、虚继承</h3><p>虚继承解决多重继承产生的二义性；</p><h3 id="8-7、虚析构函数"><a href="#8-7、虚析构函数" class="headerlink" title="8.7、虚析构函数"></a>8.7、虚析构函数</h3><p>一般将析构函数指定为虚的，主要是避免空间回收不完整；</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;#define pri() cout<<__func__<<__LINE__<<endl;class Base{public:    Base() {pri();}    //~Base(){pri();}   virtual  ~Base(){pri();} //声明一个虚析构函数.作用：解决资源回收不完整的情况private:    int x;};class Subclass:public Base{public:    Subclass(){pri();}    ~Subclass(){pri();}private:    int y;};int main(){    Base *p = new Subclass; //     cout<< sizeof(p) <<endl;    delete p;     return 0;}/*Base7Subclass154~Subclass16~Base9*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8、限制构造函数"><a href="#8-8、限制构造函数" class="headerlink" title="8.8、限制构造函数"></a>8.8、限制构造函数</h3><p>1&gt; 含义<br>        指 构造函数的权限不是publlic,而是protected/private<br>2&gt;友元函数解决限制构造函数不能构造对象的问题</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;#define pri() cout<<__func__<<__LINE__<<endl;class Base{protected:    Base(){pri();}    ~Base(){pri();}public:    void prnmsg()    {        pri();    }    friend Base *getobj();    friend void deleteobj(Base *p)    {        delete p;    }};Base *getobj(){    return (new Base);} class Subclass:public Base{public:    Subclass(){pri();}    ~Subclass(){pri();}};int main(){#if 0    Subclass obj;    obj.prnmsg();#endif        Base *p = getobj();    p->prnmsg();    deleteobj(p);    return 0;}/*cout:Base8prnmsg13~Base9*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-9、类的大小"><a href="#8-9、类的大小" class="headerlink" title="8.9、类的大小"></a>8.9、类的大小</h3><pre class="line-numbers language-c++"><code class="language-c++">/*求类的大小*/#include <iostream>using namespace std;class Base{};class Demo{    char buf[3];  // 4  4    short a;      // 4  2};class Demo1{    double buf[3];  // 24    char a;         //      char b;    //char c;    int f;    short d;};class Demo2{    char a;    double s;     int c;    short b;};class Demo3{  long buf[3];  // 12    char str[9]; // 12    short bu[5];     double a;  //8};class Demo4{    long buf[3];  // 12    char str[9]; // 12    double a;  //8    void setval();   };class Demo5{    virtual void setval(int x){}   // 4   4    virtual void setval2(int x){}  // 0   4    void setval3(int x){}          // 0   0    int x;};class Demo6{    int b;                 // 8   12      static int a;    friend void get(){}    virtual void set(){}    int x;};int Demo6 ::a=13;class Demo7:public Demo6{    };class Demo8:public Demo6, public Demo5{  //12   8       int x;    virtual void fun(){}};class Demo9:public virtual  Demo6, public virtual  Demo5{  //12   8       int x;    int b;   // virtual void fun(){}};int main(){    cout << "sizeof(Base)=" << sizeof(Base) << endl;    cout << "sizeof(Demo)=" << sizeof(Demo) << endl;    cout << "sizeof(Demo1)=" << sizeof(Demo1) << endl;    cout << "sizeof(Demo2)=" << sizeof(Demo2) << endl;    cout << "sizeof(Demo3)=" << sizeof(Demo3) << endl;    cout << "sizeof(Demo4)=" << sizeof(Demo4) << endl;    cout << "sizeof(Demo5)=" << sizeof(Demo5) << endl;    cout << "sizeof(Demo6)=" << sizeof(Demo6) << endl;    cout << "sizeof(Demo7)=" << sizeof(Demo7) << endl;    cout << "sizeof(Demo8)=" << sizeof(Demo8) << endl;    cout << "sizeof(Demo9)=" << sizeof(Demo9) << endl;    return 0;}/*计算类的空间大小 ：类似结构体按字节对齐 *  1、空类 占 1 个字节  （站位符） *  2、成员函数 、静态成员、 友元函数 占 0字节 *  3、虚函数 占 4字节 （仅虚函数表占4字节） *  4、非静态成员 满足字节序对齐 *//*sizeof(Base)=1sizeof(Demo)=6sizeof(Demo1)=36sizeof(Demo2)=20sizeof(Demo3)=40sizeof(Demo4)=32sizeof(Demo5)=8sizeof(Demo6)=12sizeof(Demo7)=12sizeof(Demo8)=24sizeof(Demo9)=32*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、异常"><a href="#九、异常" class="headerlink" title="九、异常"></a>九、异常</h2><h3 id="9-1、什么是异常"><a href="#9-1、什么是异常" class="headerlink" title="9.1、什么是异常"></a>9.1、什么是异常</h3><ul><li>什么是异常：异常在一种容错机制，是一种错误处理系统。</li><li>为什么要有异常：保证软件系统运行的稳定性与健状性</li><li>C++的异常处理机制有3部分组成try(检查)→ throw(抛出)&gt; catch(捕获)</li></ul><blockquote><p> try{<br>            //检查语句<br>            if(错误){<br>            throw异常<br>        }<br>}    catch(异常类型1){<br>    进行异常处理的语句1<br>}<br>… </p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include <stdexcept>  //标准异常的头文件using namespace std;/*c++ 中默认每一个函数都会抛出异常 除非特殊请说明 * 如果要提示抛出什么类型的异常，那么就必须在函数的声明处 用 throw （。。）说明 * *如果 需要说明该函数没有异常，是安全的函数，则声明定义时，就可以用throw（） 或者 noexecpt来说明 * */int fun(int ,int) throw(invalid_argument);   //告知 编译器或用户 该函数会抛出什么类型的异常int fun(int x ,int y) throw(invalid_argument){    if(!y)  //检查错误        throw invalid_argument("参数有误：y==0"); //抛出异常并携带错误信息（实质是抛出一个类对象）    else        return x/y;    cout << "------------";}int main(){    int a, b;    cin >> a >> b;     try{   //检查错误       cout<<  fun(a,b) << endl;   // }catch ( const invalid_argument &err ){  //捕获异常、定义一个异常类型的对象来接收                                           //通过const 为常量取别名 为 &err         //异常处理（这里是没有自定义处理方式，默认交由上级处理）    }catch (  invalid_argument err ){  //捕获异常、定义一个异常类型的对象来接收  不引用 定义同类类型接收        cout << err.what() <<endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2、使用标准异常"><a href="#9-2、使用标准异常" class="headerlink" title="9.2、使用标准异常"></a>9.2、使用标准异常</h3><p>C++ 中默认每一个函数都会抛出异常，如果要说明该函数不会抛出异常，那么声明和定义时，都用 throw()<br>如果函数说明为 不会抛出异常，那么内部强行抛出异常，会出现终止程序运行<br>throw() ：是C++ 旧标准的<br>noexcept：是C++ 11 标准中的运算符，32位机中编译时，必须使用 -std=c++0x<br>int func(int, int)throw();</p><h3 id="9-3、自定义异常"><a href="#9-3、自定义异常" class="headerlink" title="9.3、自定义异常"></a>9.3、自定义异常</h3><p>在设计一个大系统的时候,往往设计者会自定义很多错误,这些错误在标准错 误里面是没有的,那么就需要我们来设计一些异常类 </p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;#include <stdexcept>#include <string.h>int fun(int , int);int fun(int x, int y){    if(!y)        throw invalid_argument("y==0"); //抛出匿名对象 （没有对象名数据）    else if(y == 1)    {        invalid_argument temp("y==1");         throw temp;     }    else         return x/y;    cout << "------"<<endl;}int main(){    int a,b;LOOP:    cin >> a >> b;    try{        cout << fun(a, b) <<endl;     }catch (const invalid_argument &err){  //捕获方式2种：1、 const 为 常量数据取别名 或 2、定义类类型对象       cout <<  err.what() << endl;        //自定义处理方式        if(strcmp(err.what(), "y==0")  == 0)        {            goto LOOP;        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1635477713189.png" alt="1635477713189"></p><h3 id="9-4、异常规范"><a href="#9-4、异常规范" class="headerlink" title="9.4、异常规范"></a>9.4、异常规范</h3><p> <img src="https://img-blog.csdnimg.cn/b2ace9699a364b47b06261a18d476b20.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70" alt="img"> </p><h2 id="十、转换函数"><a href="#十、转换函数" class="headerlink" title="十、转换函数"></a>十、转换函数</h2><h3 id="10-1、什么是转换函数"><a href="#10-1、什么是转换函数" class="headerlink" title="10.1、什么是转换函数"></a>10.1、什么是转换函数</h3><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:    Demo(int x):x(x){}    friend ostream & operator << (ostream & out, Demo &obj)  //运算符重载    {        out << obj.x;        return out;    }private:    int x;};class Base{public:    Base(int x):x(x){}    operator int (){   // 转换函数实现 Base 转 int         return x;    }    operator char(){        return  char(x);    }    operator Demo(){ //Base 转 Demo 都是自定义类型转其他类型， 可用 自己设计的转换函数，但是如果是int * 转int 非自定义类型则要用标准内置转换函数        return x;    }    operator double(){        return double (x);    }private:    int x;};int main(){    int b = 65;    char c = 'B';    c = b;  //内置转换函数（隐式转换）    cout << c << endl;    int a = 13 ;     Base obj(66);    a = obj; //自定义类型转其他类型，自定转换函数    cout << a << endl;  //    char ch = obj ;  //    cout << ch << endl;     Demo D = obj;  // Demo D = Demo(obj);     double m = obj; //     cout << D << endl;     cout << m << endl;     return 0;}/*cout:A66B66*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Subclass; //前向声明  一个不完整的派生类class Base{public:    Base (int x):x(x){}    operator Subclass(); //转换函数的定义  必须放到派生类定义之后private:    int x;};class Subclass:public Base{public:    Subclass(int x ):x(x), Base (x){}    friend ostream &operator << (ostream &out, Subclass &obj)    {        out << obj.x;        return out;    }private:    int x;};Base :: operator Subclass (){  //转换函数的实现    return x;}int main(){    Subclass a(10);    Base b(6);    // b = a; //right: 向上隐式转换     a = b; // 向下隐式转换 本来是不允许，但是这里自己设计了转换函数可以实现向下转换    cout << a <<endl;  //本来不能直接打印对象，但是这里设计了运算符重载 函数    return 0;}/*cout:6*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2、标准转换函数"><a href="#10-2、标准转换函数" class="headerlink" title="10.2、标准转换函数"></a>10.2、标准转换函数</h3><p><img src="https://img-blog.csdnimg.cn/d42a91476ea44cb5bc84409c72db3979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70"></p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Base{public:    //Base (int x):x(x){}   explicit Base (int x):x(x){}  //限制隐式转换private:    int x;};int main(){    Base obj(1);    //但单参数的构造函数被 explicit 修饰，表示  该类 不能进行隐式转换，否则可以    //Base obj2 = 2; // 构造： Base obj2 = Base(2);     //obj =  1;   //赋值    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Base{public:    Base(int x):x(x){}private:    int x;};class Subclass:public Base{public:    Subclass(int x):x(x), Base(x){}private:    int x;};int main(){    int a = 65;    int *p = &a;    cout << "*p:" << *p <<endl;    cout << "p:" <<  p <<endl;    char *q = reinterpret_cast <char  *>(p);     //q = "hello";    cout << "q:" << q  << endl;    cout << "*q:" << *q  << endl;        int  b = reinterpret_cast <int >(p);     cout << "b:" << b << endl;     const char *str = "hello world";     //char  *s = str;  //error :  str 常量指针 转普通指针     char *buf = const_cast <char *>(str);    // *buf =  'k';    //error：buf指向字符串常量区 不能修改     cout << "buf:" << buf << endl;        Base obj(6);    Subclass *s = static_cast<Subclass * >(&obj);  //static_cast实现 普通类型转换和具有继承关系的转换    //Subclass obj1 = static_cast<Subclass >(obj);         Subclass obj3(3);    Base  obj2 = static_cast<Base >( obj3 );     return 0;}/**p:65p:0xbf99a24cq:A*q:Ab:-1080450484buf:hello world*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3、自定义转换函数"><a href="#10-3、自定义转换函数" class="headerlink" title="10.3、自定义转换函数"></a>10.3、自定义转换函数</h3><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;class Demo{public:    Demo () {cout << __LINE__<<endl;}    ~Demo () {cout << __LINE__<<endl;}};void test(){    Demo *p = new Demo;    //delete p;  //如果频繁调用，难免忘记 delete 回收，导致内存泄露，但是有智能指针就ok}int main(){    test();        test();    test();    return 0;}/*777*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4、慎用转换函数"><a href="#10-4、慎用转换函数" class="headerlink" title="10.4、慎用转换函数"></a>10.4、慎用转换函数</h3><h2 id="十一、智能指针"><a href="#十一、智能指针" class="headerlink" title="十一、智能指针"></a>十一、智能指针</h2><h3 id="11-1、什么是智能指针"><a href="#11-1、什么是智能指针" class="headerlink" title="11.1、什么是智能指针"></a>11.1、什么是智能指针</h3><p><img src="https://img-blog.csdnimg.cn/3620129ffce446c4b78c956d4e503828.png"></p><h3 id="11-2、shared-ptI"><a href="#11-2、shared-ptI" class="headerlink" title="11.2、shared-ptI"></a>11.2、shared-ptI</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">8</span>#include <span class="token operator">&lt;</span>iostream<span class="token operator">></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span>   </span><span class="token comment" spellcheck="true">//加头文件</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个shared_ptr 智能指针，此处有重载 * 运算符</span>    shared_ptr<span class="token operator">&lt;</span>Demo<span class="token operator">></span> <span class="token function">p</span>   <span class="token punctuation">(</span><span class="token keyword">new</span> Demo<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//编译加 -std=c++0x </span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         shared_ptr<span class="token operator">&lt;</span>Demo<span class="token operator">></span> pp <span class="token operator">=</span> p<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//pp 和 p 共享同一个地址</span>    pp<span class="token operator">-</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">#<span class="token directive keyword">if</span> 1</span><span class="token comment" spellcheck="true">//定义的两种方式</span>    shared_ptr<span class="token operator">&lt;</span>Demo<span class="token operator">></span> <span class="token function">q</span>  <span class="token punctuation">(</span><span class="token keyword">new</span> Demo<span class="token punctuation">)</span> <span class="token punctuation">;</span>    shared_ptr<span class="token operator">&lt;</span>Demo<span class="token operator">></span> q2  <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>Demo<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"-------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3、unique-ptr"><a href="#11-3、unique-ptr" class="headerlink" title="11.3、unique ptr"></a>11.3、unique ptr</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span>   </span><span class="token comment" spellcheck="true">//加头文件</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个unique_ptr 智能指针，资源独享 智能指针</span>    unique_ptr<span class="token operator">&lt;</span>Demo<span class="token operator">></span> <span class="token function">p</span>   <span class="token punctuation">(</span><span class="token keyword">new</span> Demo<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//编译加 -std=c++0x </span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//unique_ptr&lt;Demo> pp = p;   //不允许pp 和 p 共享同一个地址（独享智能指针）</span>   <span class="token comment" spellcheck="true">// pp->fun();</span> <span class="token macro property">#<span class="token directive keyword">if</span> 0</span><span class="token comment" spellcheck="true">//定义的两种方式</span>    unique_ptr<span class="token operator">&lt;</span>Demo<span class="token operator">></span> <span class="token function">q</span>  <span class="token punctuation">(</span><span class="token keyword">new</span> Demo<span class="token punctuation">)</span> <span class="token punctuation">;</span>    unique_ptr<span class="token operator">&lt;</span>Demo<span class="token operator">></span> q2  <span class="token operator">=</span> make_unique <span class="token operator">&lt;</span>Demo<span class="token operator">></span> <span class="token punctuation">(</span><span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"-------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4、weak-ptr"><a href="#11-4、weak-ptr" class="headerlink" title="11.4、weak-ptr"></a>11.4、weak-ptr</h3><h2 id="十二、STL"><a href="#十二、STL" class="headerlink" title="十二、STL"></a>十二、STL</h2><h3 id="12-1、STL简介"><a href="#12-1、STL简介" class="headerlink" title="12.1、STL简介"></a>12.1、STL简介</h3><p>STL 即标准模板库</p><p><strong>STL可分为六个部分：</strong></p><ul><li><p>容器( containers )<br>特殊的数据结构,实现了数组、链表、队列、等等,实质是模板类</p></li><li><p>迭代器( iterators )<br>一种复杂的指针,可以通过其读写容器中的对象,实质是运算符重载</p></li><li><p>算法( algorithms )<br>读写容器对象的逻辑算法:排序、遍历、查找、等等,实质是模板函数</p></li><li><p>空间配置器( allocator)<br>容器的空间配置管理的模板类</p></li><li><p>配接器( adapters )<br>用来修饰容器、仿函数、迭代器接口</p></li><li><p>仿函数( functors )<br>类似函数,通过重载()运算符来模拟函数行为的类</p></li></ul><h3 id="12-2、标准容器简介"><a href="#12-2、标准容器简介" class="headerlink" title="12.2、标准容器简介"></a>12.2、标准容器简介</h3><p> STL标准模版库是一种泛型编程。</p><blockquote><p>  <a href="https://blog.csdn.net/zb1593496558/article/details/80987071">STL常用接口大全</a></p></blockquote><h3 id="12-3、vector"><a href="#12-3、vector" class="headerlink" title="12.3、vector"></a>12.3、vector</h3><p><img src="https://img-blog.csdnimg.cn/d2fa2d924f1a4b5e910f0c1977f3dbc8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-4、ist"><a href="#12-4、ist" class="headerlink" title="12.4、ist"></a>12.4、ist</h3><p><img src="https://img-blog.csdnimg.cn/619a72857daf4a64acce8ad25c72834d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDk4MTM3,size_16,color_FFFFFF,t_70"></p><h3 id="12-5、deque"><a href="#12-5、deque" class="headerlink" title="12.5、deque"></a>12.5、deque</h3>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
